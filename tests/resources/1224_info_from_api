{"status":"success","notice":"Record found","project":{"id":1224,"slug":"this-is-working-spad-tree","name":"This is working! SPAD Tree","disclaimer":null,"views":null,"location":null,"latitude":null,"longitude":null,"start_date":null,"end_date":null,"start_time":null,"end_time":null,"is_open":true,"beta":true,"created_at":"2016-05-16T16:33:59.601Z","updated_at":"2017-02-08T19:33:50.239Z","terms_accepted":false,"tag_list":[],"md5hash":"07d8fd559b7c88dc4f3e22417a3e98ef","project_image":{"large":"https://photosynqproduction.s3.amazonaws.com/uploads/project_image/image/28/large_apple-tree.png","small":"https://photosynqproduction.s3.amazonaws.com/uploads/project_image/image/28/medium_apple-tree.png","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/project_image/image/28/thumb_apple-tree.png"},"data_count":86,"latest_contributors":{},"protocol_json":"[{\"pulses\":[4000,300,300,300,100,20,30,10,10,10,30,20,400,150,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],\"nonpulsed_lights\":[[2],[2],[0],[2],[2],[2],[2],[2],[2],[2],[2],[2],[9],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],\"nonpulsed_lights_brightness\":[[\"light_intensity\"],[\"light_intensity\"],[0],[\"light_intensity\"],[\"light_intensity\"],[\"light_intensity\"],[4500],[4050],[3600],[3150],[4500],[\"light_intensity\"],[2090],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],\"pulse_distance\":[1000,1000,1000,1000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000],\"pulsed_lights_brightness\":[[0],[\"150*(40000/detector_read2)\"],[\"150*(40000/detector_read2)\"],[\"150*(40000/detector_read2)\"],[0],[2000],[2000],[2000],[2000],[2000],[2000],[2000],[0],[2000],[30],[450],[75],[80],[700],[700],[700],[700],[375],[3000],[500],[500],[2250],[2250],[2250],[2250],[1800],[7000],[1800],[2000],[2250],[2250],[2250],[2250]],\"pulse_length\":[[\"(-.000093*detector_read2)+13.093\"],[\"(-.000093*detector_read2)+13.093\"],[\"(-.000093*detector_read2)+13.093\"],[\"(-.000093*detector_read2)+13.093\"],[30],[30],[30],[30],[30],[30],[30],[30],[30],[30],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20]],\"detectors\":[[0],[3],[3],[3],[0],[1],[1],[1],[1],[1],[1],[1],[0],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1]],\"pulsed_lights\":[[0],[1],[1],[1],[0],[3],[3],[3],[3],[3],[3],[3],[0],[3],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10]],\"open_close_start\":1,\"recall\":[\"colorcal_blank1[1]\",\"colorcal_blank1[2]\",\"colorcal_blank1[3]\",\"colorcal_blank1[4]\",\"colorcal_blank1[6]\",\"colorcal_blank1[8]\",\"colorcal_blank1[9]\",\"colorcal_blank1[10]\",\"colorcal_blank2[1]\",\"colorcal_blank2[2]\",\"colorcal_blank2[3]\",\"colorcal_blank2[4]\",\"colorcal_blank2[6]\",\"colorcal_blank2[8]\",\"colorcal_blank2[9]\",\"colorcal_blank2[10]\",\"colorcal_blank3[1]\",\"colorcal_blank3[2]\",\"colorcal_blank3[3]\",\"colorcal_blank3[4]\",\"colorcal_blank3[6]\",\"colorcal_blank3[8]\",\"colorcal_blank3[9]\",\"colorcal_blank3[10]\",\"colorcal_intensity1_slope[2]\",\"colorcal_intensity1_yint[2]\",\"colorcal_intensity2_slope[2]\",\"colorcal_intensity2_yint[2]\",\"colorcal_intensity3_slope[2]\",\"colorcal_intensity3_yint[2]\",\"ir_baseline_slope[5]\",\"ir_baseline_yint[5]\",\"ir_baseline_slope[3]\",\"ir_baseline_yint[3]\"],\"environmental\":[[\"detector_read1\",5,700,1,30],[\"detector_read2\",1,150,3,15],[\"light_intensity\"],[\"temperature_humidity_pressure\"],[\"temperature_humidity_pressure2\"],[\"contactless_temp\"],[\"thickness\"],[\"compass_and_angle\"]],\"averages\":1,\"protocol_id\":476}]","protocols":[{"id":476,"name":"Leaf Photosynthesis MultispeQ V1.0","slug":"leaf-photosynthesis-multispeq-v1-0","description":"**Summary**\n\nMeasures many photosynthesis-related parameters in \u003c15 seconds, including:  \n\n- Chlorophll Fluorescence: Phi2, PhiNPQ, PhiNO, NPQt, qL, LEF\n- Relative Chlorophyll: SPAD\n- Proton Motive Force: ECSt, vH+, gH+\n- Absorbance at: 450, 535, 605, 650, 730, 850, 880, and 940nm.\n- Leaf Thickness (in mm), angle, and cardinal direction\n- Leaf Temperature and differential from ambient temperature\n- Environmental conditions: PAR and ambient temperature/pressure/humidity\n\n**Description**\n\n_It's not practical to fully describe what all of these measurements mean here.  If you want to learn more, a good place to start is this video: https://www.youtube.com/watch?v=pU5vOtE1wE8 .  Check the PhotosynQ youtube channel for other videos explaining photosynthesis and related parameters._\n\n_This article is also helpful http://onlinelibrary.wiley.com/doi/10.1111/j.1365-3040.2007.01680.x/abstract.  It's paywalled, but email admin@photosynq.org to request a copy._\n\n_If you want to see the exact calculations for each parameter, please see the associated macro called \"Leaf Photosynthesis MultispeQ V1.0\"._\n\n_Finally, there are two publications about the MultispeQ Beta device covering many of the below parameters and comparisons to commercial instruments.  While that is technically an older model device, the calculations and comparisons are still true for this protocol.  You can find them at the Royal Society for Open Science, and \u003cstill waiting on this one!\u003e._\n\n_Works with the MultispeQ V1.0 device only_\n\nThe Leaf Photosynthesis protocol collects many different measurements of a leaf as quickly as possible.  It attempts to be both accurate and fast, so that large amounts of data can be collected quickly.  There are 3 main components of the protocol which we will describe in detail.\n\n_Click on this link to see an example measurement - https://photosynq.org/projects/disease-damage-and-drought-impacts-on-photosynthesis/explore/363687_ \n\n**1) Proton Motive Force**\n\nProton Motive Force is the chemical and electrical gradient of protons (H+) across the thylakoid.  Protons can move through the ATP synthase when passing from inside to outside the thylakoid membrane, providing energy to convert ADP to ATP as they pass.  The capacity and flow rate of protons can be regulated by the plant in response to environmental conditions.\n\nProton Motive Force is measured in the MultispeQ by measuring the electrochromic shift of carotenoids in the light harvesting complex.  This is a really interesting effect I strongly suggest you look up.  The short description is when carotenoids (or any polar molecule) are stuck (not floating around in water or something), their absorbance shifts slightly if they are placed under an electric field.  In our case, there are carotenoids sitting on the thylakoid membrane, and as positively charged protons build up in the thylakoid those carotenoids experience a larger and larger electric field, causing a shift in absorbance.  As the positively charged protons move out of the ATP synthase, the electric field is reduced and the absorbance of the carotenoids shifts back to where it was.\n\nThis protocol measures that shift in absorbance of carotenoids using a green (545nm) LED from the plants normal state (ambient conditions) to darkness back to ambient. This short dark period causes all of the protons to empty out of the thylakoid which we can see as a shift in absorbance.  \n\nThe maximum rate of protons exiting the ATP synthase (called rate of flux, or **vH+**), the total quantity of protons which exited (called **ECSt**) and the time until half of those protons exited (called **gH+**) are measured.  Of all those parameters, gH+ is the most comparable across plants, as the other two are affected by leaf thickness, chlorophyll density, and other factors.  \n\nYou can see the effect by zooming in on the first part of the trace.  The ECS effect is most visible in high light conditions (because the thylakoid is going from a high density of protons to darkness, causing a large shift in the absorbance) and looks something like an extended shark's fin.  Remember that this trace is showing transmission, not absorbance, though it could be transformed to show absorbance if you want to.\n\n**2) Chlorophyll Fluorescence**\n\nThe second part of the trace uses chlorophyll fluorescence to understand Photosytem II.  Chlorophyll fluorescence occurs when visible light absorbed by the plant is re-radiated in the near infra-red range (about 680 - 700nm), and is an important mechanism for plants to dissipate unwanted energy.  By measuring chlorophyll fluorescence under ambient conditions (Fs) and high light (Fm'), and estimating fluorescence under dark conditions (Fo') by applying far red light to run photosystem I and fully reducing photosystem II, we can then calculate the amount of energy from photosystem II which goes to photosynthesis (**Phi2**), dissipated as heat via non-photochemical quenching (**PhiNPQ**), and all other places (**PhiNO**).  \n\nWikipedia has good entries describing existing instruments and outputs which we won't repeat here: \n\nhttps://en.wikipedia.org/wiki/Chlorophyll_fluorescence#Chlorophyll_fluorometers\n\n**3) Absorbance + Relative Chlorophyll**\n\nAbsorbance can identify compounds which have a specific color.  Chlorophyll is the most obvious example, but anthocyanins (purple/blue), carotenoids (orange), and flavenoids (pinkish, like those found in tomato skins, for example) can also be measured using absorbance.  \n\nIt's important to remember that the visible color of a compound is what is most reflected (lowest absorbance), but to measure absorbance we need the color which is most absorbed.  For example, chlorophyll is measured using absorbance in the red region (where it most absorbs), even though it's visibly green (where it most reflects).  This can be counterintuitive but makes sense when you walk through the logic.  \n\nAlso, to measure absorbance we need a blank.  A blank measures how much light passes through no sample (ambient air).\n\nLet's walk through the calculations relating to absorbance.\n\nTransmittance (Ts) is the proportion of light which passes through the sample (0% - 100%) relative to a blank (no sample).  \n\n\u003cpre\u003e\nTs = sample / blank\n\nTs            transmittance of sample\nsample        raw detector value from sample\nblank         raw detector value from blank\n\u003c/pre\u003e\n\nAbsorbance is the opposite of transmission, so we need to do a bit more math.\n\n\u003cpre\u003e\n_abs = -1*log(Ts)\n\nabs         absorbance of sample\nTs          transmittance of sample\n\u003c/pre\u003e\n\nIn order to convert a raw absorbance value to a relative concentration, the thickness of the sample must be estimated.  Otherwise, a low concentration but very thick sample and a high concentration very thin sample would produce similar absorbance readings.  We can estimate thickness by using near infra-red (940nm) which is not absorbed by the sample (we assume, that's a simplifying and imperfect assumption), but is reflected and refracted based on the sample thickness.  So lower near infra-red tranmission, thicker sample.  \n\nI'm going to call this thickness-adjusted absorbance value SPAD because that's what it's called historically when measuring chlorophyll (see Minolta SPAD meter for example).  So the final formula to account for this thickness using near infra-red is:\n\n\u003cpre\u003e\nSPAD = 100*log(Ts / Tir)\n\nSPAD           thickness adjusted absorbance\nTs             sample transmittance\nTir            near infra-red (940nm) transmittance\n\u003c/pre\u003e\n\nIn the MultispeQ, this usually outputs a value between 0 - 125 for any given wavelength.  For relative chlorophyll content, we then normalize our values to a Minolta SPAD 502+ to make it more easily comparable and compatible to users.  This range is 0 - 75.   \n\nFinally, we have to take one additional step due to limitations of the hardware.  The detector (pin photodiode) which is used to measure the light for any given absorbance measurement has a limited range - too much light can max out the signal.  We can adjust the light intensity, pulse length, and pulse size in order to adjust that range to avoid maxing out the detector.  Let's call this process adjusting the gain.  However, for any given leaf, we can't know ahead of time how much to adjust the gain - thicker leaves will require high intensities and longer pulses, while thinner leaves require lower intensities and shorter pulses.  \n\nIn order to address this problem, we take 3 absorbance measurements at 3 gain settings for each sample - a low, medium, and high gain for thin, medium, and thick leaves.  Then, after the measurement, the macro automatically chooses the most appropriate gain setting based on the response (so skip the setting where the signal is maxed out or too low).\n\n**To sum up**  We measure absorbance on 8 lights (450, 530, 605, 650, 730, 850, 880, 940) at 3 gain settings (24 total).  For the visible lights (450, 530, 605, 650, and 730) we apply the SPAD calculation to get a thickness-normalized value.  We apply an additional normalization for the SPAD for red to make the range similar to that of a Minolta SPAD 502+.  We then choose the values which are within an acceptable range (not too high, not too low) from the 3 intensities we measured. ","pre_selected":true,"macro_id":208,"protocol_json":{"pulses":[4000,300,300,300,100,20,30,10,10,10,30,20,400,150,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"nonpulsed_lights":[[2],[2],[0],[2],[2],[2],[2],[2],[2],[2],[2],[2],[9],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"nonpulsed_lights_brightness":[["light_intensity"],["light_intensity"],[0],["light_intensity"],["light_intensity"],["light_intensity"],[4500],[4050],[3600],[3150],[4500],["light_intensity"],[2090],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"pulse_distance":[1000,1000,1000,1000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000],"pulsed_lights_brightness":[[0],["150*(40000/detector_read2)"],["150*(40000/detector_read2)"],["150*(40000/detector_read2)"],[0],[2000],[2000],[2000],[2000],[2000],[2000],[2000],[0],[2000],[30],[450],[75],[80],[700],[700],[700],[700],[375],[3000],[500],[500],[2250],[2250],[2250],[2250],[1800],[7000],[1800],[2000],[2250],[2250],[2250],[2250]],"pulse_length":[["(-.000093*detector_read2)+13.093"],["(-.000093*detector_read2)+13.093"],["(-.000093*detector_read2)+13.093"],["(-.000093*detector_read2)+13.093"],[30],[30],[30],[30],[30],[30],[30],[30],[30],[30],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20]],"detectors":[[0],[3],[3],[3],[0],[1],[1],[1],[1],[1],[1],[1],[0],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1]],"pulsed_lights":[[0],[1],[1],[1],[0],[3],[3],[3],[3],[3],[3],[3],[0],[3],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10]],"open_close_start":1,"recall":["colorcal_blank1[1]","colorcal_blank1[2]","colorcal_blank1[3]","colorcal_blank1[4]","colorcal_blank1[6]","colorcal_blank1[8]","colorcal_blank1[9]","colorcal_blank1[10]","colorcal_blank2[1]","colorcal_blank2[2]","colorcal_blank2[3]","colorcal_blank2[4]","colorcal_blank2[6]","colorcal_blank2[8]","colorcal_blank2[9]","colorcal_blank2[10]","colorcal_blank3[1]","colorcal_blank3[2]","colorcal_blank3[3]","colorcal_blank3[4]","colorcal_blank3[6]","colorcal_blank3[8]","colorcal_blank3[9]","colorcal_blank3[10]","colorcal_intensity1_slope[2]","colorcal_intensity1_yint[2]","colorcal_intensity2_slope[2]","colorcal_intensity2_yint[2]","colorcal_intensity3_slope[2]","colorcal_intensity3_yint[2]","ir_baseline_slope[5]","ir_baseline_yint[5]","ir_baseline_slope[3]","ir_baseline_yint[3]"],"environmental":[["detector_read1",5,700,1,30],["detector_read2",1,150,3,15],["light_intensity"],["temperature_humidity_pressure"],["temperature_humidity_pressure2"],["contactless_temp"],["thickness"],["compass_and_angle"]],"averages":1,"protocol_id":476},"created_at":"2016-05-11T20:04:29.410Z","updated_at":"2017-02-08T19:33:42.565Z","is_deleted":false,"md5hash":"23489832b6e51b3648369578a3dbfc60","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqproduction.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":208,"name":"Leaf Photosynthesis MultispeQ V1.0","slug":"leaf-photosynthesis-multispeq-v1-0-8a1c1c6b-9b4f-46ed-9c51-2599eba57772","description":"Photosynthesis protocol which includes ECS, Phi2, and other similar protocols","default_y_axis":"","default_x_axis":"","javascript_code":"// CALCULATIONS FOR PROTON MOTIVE FORCE VIA ECS PORTION OF THE TRACE\n//----------------------------\n\nvar output = {};\nvar spad;\nvar data = json.data_raw;\nvar vhplus;\nvar tau;\nvar ECSt;\nvar quality_flag = 0;\nvar i = 0;\nvar j = 0;\nvar h = 0;\nvar k = 0;\nvar smooth1 = data.slice(300,600);\nvar smooth0 = data.slice(300,600);\n\n///*\n\nvar pulsedistance = 1; // pulse distance for the ECS portion of the trace in seconds\nvar ecsPulses = 300; // pulses during each light cycle duing ECS portion of trace (300 light on, 300 light off, 300 light on)\nvar fit_cutoff = .01; // valueless number indicating what portion of the decay curve to pass to the decay fitting subroutine\nvar hit_cutoff_times = 1;  // this is a counter to ensure we don't just hit a weird portion of the curve and cutoff too soon.   \n\n// we need an array representing the time (in us) and data for each pulse in the ECS trace.  Subtract first and less point so it's 898 points total\n\nvar timeArray = [];\nfor (var i = 1; i \u003c ecsPulses*3+1; i++) {\n  timeArray[i-1] = pulsedistance*i;\n}\nvar ecsArray = data.slice(0,ecsPulses*3);\n\n// the very first pulse is often low.  Just set it to the 2nd pulse by default\necsArray[0] = ecsArray[1];\n// now check for big spikes\nfor (var i = 1; i \u003c ecsArray.length; i++) {\n// this line should be flat, or slightly sloped.  So if there are any big spikes (\u003e 10% of the previous value) then set it equal to the previous value\n  if (ecsArray[i] \u003e 1.10*ecsArray[i-1]) {\n    ecsArray[i] = ecsArray[i-1];\n  }\n}\n\n//output[\"ecsArray raw\"] = data.slice(0,ecsPulses*3);\n// sanity check - do the arrays look as we expect?\n//output[\"all_ecs length\"] = ecsArray.length;\n//output[\"all_time length\"] = timeArray.length;\n//output[\"ecsArray cleaned\"] = ecsArray;\n\n// first lets make the ECS trace flat, in case for some reason it's tilted up or down. Skip first and last point in case there were blips\n\nvar flattenData = ecsArray.slice(0,ecsPulses);\nvar flattenTime = timeArray.slice(0,ecsPulses);\n\n// make some error catching things - standard deviation of the first portion of the trace... etc.\nvar flattenData_std = MathSTDEV(flattenData);\nvar endOfTrace_std =  MathSTDEV(ecsArray.slice(ecsPulses*2,ecsPulses*3));\n//output[\"flattenData_std\"] = flattenData_std;\n//output[\"endOfTrace_std\"] = endOfTrace_std;\n\n// if the standard deviation is too high, then let's not output ECS values\n\n// now let's run a regression to determine the slope\n  \nvar flattenReg = MathLINREG(flattenTime,flattenData);\n\noutput[\"flatten slope\"] = MathROUND(flattenReg.m,4);\n//output[\"flatten y-int\"] = flattenReg.b;\n// sanity check - what does the slope look like before by checking the first and last value in the initial light period?  Compare with after the flattening adjustment\n//output[\"ecsArray pre 0\"] = ecsArray[0];\n//output[\"ecsArray pre 300\"] = ecsArray[300];\n//output[\"ecsArray\"] = ecsArray;\n\n\n// now we assume this slope applies to the whole ECS trace, and subtract off the slope at each point\n\nvar ecsArray_flat = ecsArray.slice(0,ecsPulses*3);\nfor (var i = 0; i \u003c timeArray.length; i++) {\n  var adjustment = flattenReg.m*timeArray[i]; \n  ecsArray_flat[i] = ecsArray_flat[i]-adjustment;\n}\n// now we can calculate the initial and max ecs values to calculate ECSt\n// calculated as the median value within 25 pulses of the light-on phase (minimum) and within 50 pulses of the light off phase (maximum)\necs_initial = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses-25,ecsPulses)),2);\necs_max = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses*2-100,ecsPulses*2)),2);\necst_estimate = ecs_max - ecs_initial;\noutput[\"ecs_initial\"] = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses-25,ecsPulses)),2);\noutput[\"ecs_max\"] = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses*2-100,ecsPulses*2)),2);\n\n//output[\"ecsArray flattened\"] = ecsArray_flat;\n// sanity check - ok these two numbers should be much closer to each other (slope has moved towards 0), and make sure our flattening worked\n//output[\"ecsArray post 0\"] = ecsArray_flat[0];\n//output[\"ecsArray post 300\"] = ecsArray_flat[300];\n\n// Then convert these values into absorbance in the form abs = -log(Io/I), where we set Io to ecs_initial.  \n// For the decay fitting subroutine, we also try to set the estimated asymptote (ecs_max) to zero - this helps the fitting subroutine reduce iterations to converge to the correct value\necsArray_flat_log = [];\nfor (var i = 0; i \u003c timeArray.length; i++) {\n  var abs = MathLOG(ecs_initial/(ecsArray_flat[i])); \n  ecsArray_flat_log[i] = abs - MathLOG(ecs_initial/ecs_max);\n}\n\n//output[\"ECS full\"] = ecsArray_flat_log;\n\n  output[\"ecs_r_squared\"] = flattenReg.r;\n\nif (ecst_estimate \u003c 2 || json.light_intensity \u003c 50) {\n  output[\"ECSt\"] = 0;\n  output[\"vH+\"] = 0;\n  output[\"gH+\"] = 0;\n  warning(\"proton motive force signal too low.  May be due to low ambient light, or normal biological variation.  ECSt, vH+, and gH+ have been set to zero\", output);\n}\nif (flattenData_std \u003e 25 || endOfTrace_std \u003e 25) {\n  output[\"ECSt\"] = \"NA\"\n  output[\"vH+\"] = \"NA\";\n  output[\"gH+\"] = \"NA\";\n  warning(\"Proton Motive Force too noisy\", output);\n}\nif (!(flattenData_std \u003e 25 || endOfTrace_std \u003e 25 || ecst_estimate \u003c 2 || json.light_intensity \u003c 50)) {\n  // Now we fit a best fit line to the curve.  We need to put our data in the format [[x,y],[x,y]...] first though\n  var expData = ecsArray_flat_log.slice(ecsPulses,ecsPulses+100);\n  var expTime = [];\n  // normalize time to zero for the fit\n  for (var i = 0; i \u003c timeArray.slice(ecsPulses, ecsPulses*2).length; i++) {\n    expTime.push(i);\n  }\n  //output[\"time array\"] = expTime;\n//  output[\"ECS decay\"] = expData;\n\n  var expFitArray = [];\n  for (var i = 0; i \u003c 100; i++) {\n    expFitArray[i] = [expTime[i], expData[i]];\n  }\n  \n  expReg = MathEXPINVREG(expFitArray);\n\n  // questions for kevin - ECSt would be y int + outputted asymptote, correct?\n\n  //output[\"asymptote\"] = expReg.asymptote;\n  output[\"ECSt\"] = MathROUND(expReg.results[0],4);\n  //output[\"expFit slope\"] = expReg.slope;\n  output[\"vH+\"] = MathROUND(expReg.slope,8);\n  //output[\"expFit lifetime\"] = expReg.lifetime;\n  output[\"gH+\"] = MathROUND(expReg.lifetime,4);\n}\n//*/  \n//*/  \n\n// CALCULATIONS FOR ABSORBANCE / SPAD PORTION OF THE TRACE\n//----------------------------\n\nvar abs_starts = 1180; // when does the Phi2 measurement start\nvar data = json.data_raw;\nvar lights = [1,2,3,4,6,8,9,10];// define the lights to have absorbance measured\nvar wavelengths = [\"530\",\"650\",\"605\",\"420\",\"940\",\"850\",\"730\",\"880\"];// define the lights to have absorbance measured\nvar raw_at_blank1 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank2 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank3 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank1 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank2 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank3 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank1 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank2 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank3 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank1 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank2 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank3 = [0,0,0,0,0,0,0,0];\nvar minolta_spad1 = 0;\nvar minolta_spad2 = 0;\nvar minolta_spad3 = 0;\nvar minolta_spad = 0;\nvar minolta_spad_averages = 0;\nvar choose = 0;\nvar light;\nvar wavelengthString;\nvar pulses = 10;// number of pulses in a cycle\n\n/* // this is what the recall object looks like --\u003e \n\"recall\":{\"colorcal_blank1[1]\":0.000000,\"colorcal_blank1[2]\":0.000000,\"colorcal_blank1[3]\":0.000000,\"colorcal_blank1[4]\":0.00000\n0,\"colorcal_blank1[6]\":0.000000,\"colorcal_blank1[8]\":0.000000,\"colorcal_blank1[9]\":0.000000,\"colorcal_blank1[10]\":0.000000,\"colo\nrcal_blank2[1]\":0.000000,\"colorcal_blank2[2]\":0.000000,\"colorcal_blank2[3]\":0.000000,\"colorcal_blank2[4]\":0.000000,\"colorcal_bla\nnk2[6]\":0.000000,\"colorcal_blank2[8]\":0.000000,\"colorcal_blank2[9]\":0.000000,\"colorcal_blank2[10]\":0.000000,\"colorcal_blank3[1]\"\n:0.000000,\"colorcal_blank3[2]\":0.000000,\"colorcal_blank3[3]\":0.000000,\"colorcal_blank3[4]\":0.000000,\"colorcal_blank3[6]\":0.00000\n0,\"colorcal_blank3[8]\":0.000000,\"colorcal_blank3[9]\":0.000000,\"colorcal_blank3[10]\":0.000000},\n*/\n\n/*\n** Loop through the lights.  If it's zero, skip it.  If it's not in the acceptable range (\u003e500 but \u003c65534 (max)) skip it.\n** Then choose the first blank (starting with 1 moving to 3) which fulfills this criteria\n** Otherwise, calculate absorbance and transmittance and a 'spad'-like value using LED 6 (940 on clamp) to calibrate thickness\n*/\n//----------------------------\n\nfor (var i = 0;i\u003clights.length;i++) { // loop through and save one averaged 'point' for each of the cycles\n  light = lights[i];\n  wavelengthString = wavelengths[i];\n  var value1 = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+2),(abs_starts + i*pulses+8)));\n  var value2 = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+82),(abs_starts + i*pulses+88)));\n  var value3 = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+162),(abs_starts + i*pulses+168)));\n  raw_at_blank1[light] = value1;\n  raw_at_blank2[light] = value2;\n  raw_at_blank3[light] = value3;\n  if (json.recall[\"colorcal_blank1[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 500 \u0026\u0026 raw_at_blank1[light] \u003c 65534) {\n    abs_at_blank1[light] = MathROUND(-1*MathLOG(raw_at_blank1[light]/json.recall[\"colorcal_blank1[\"+light+\"]\"]),3);\n//    trans_at_blank1[light] = MathROUND(raw_at_blank1[light]/json.recall[\"colorcal_blank1[\"+light+\"]\"],3);\n//\toutput [\"light\".concat(light.toString(),\"_transmittance\")]  = trans_at_blank1[light];\n    output [\"absorbance_\".concat(wavelengthString)]  = abs_at_blank1[light];\n//\toutput [\"light\".concat(light.toString(),\"_blank1\")]  = json.recall[\"colorcal_blank1[\"+light+\"]\"];\n  }\n}\n\n// so the raw value needs to be \u003e~2000, while the 940 needs to be greater than ~5000, otherwise it's out of range\n// the acceptable range is different for each blank (1,2,3) thus a separate if statement for each blank.\n// once you hit an intensity which is within the acceptable range, then keep that value and skip the rest\n\nfor (var i = 0;i\u003c8;i++) { // loop through and save one averaged SPAD value for each of the cycles.  If we have additional calibration values (like minolta spad) use those and output that value\n  light = lights[i];\n  wavelengthString = wavelengths[i];\n  spad_at_blank2[light] = MathROUND(100*MathLOG((raw_at_blank2[6] / json.recall[\"colorcal_blank2[6]\"])/(raw_at_blank2[light] / json.recall[\"colorcal_blank2[\"+light+\"]\"])),2);\n  spad_at_blank1[light] = MathROUND(100*MathLOG((raw_at_blank1[6] / json.recall[\"colorcal_blank1[6]\"])/(raw_at_blank1[light] / json.recall[\"colorcal_blank1[\"+light+\"]\"])),2);\n  spad_at_blank3[light] = MathROUND(100*MathLOG((raw_at_blank3[6] / json.recall[\"colorcal_blank3[6]\"])/(raw_at_blank3[light] / json.recall[\"colorcal_blank3[\"+light+\"]\"])),2);\n  if (light == 2) { // if it's the red light, the also calculate minolta spad\n    output [\"light\".concat(light.toString(),\"_raw1\")]  = raw_at_blank1[light];\n    output [\"light6_raw1\"]  = raw_at_blank1[6];\n    output [\"spad_raw1\"]  = spad_at_blank1[2];\n    output [\"light\".concat(light.toString(),\"_raw2\")]  = raw_at_blank2[light];\n    output [\"light6_raw2\"]  = raw_at_blank2[6];\n    output [\"spad_raw2\"]  = spad_at_blank2[2];\n    output [\"light\".concat(light.toString(),\"_raw3\")]  = raw_at_blank3[light];\n    output [\"light6_raw3\"]  = raw_at_blank3[6];\n    output [\"spad_raw3\"]  = spad_at_blank3[2];\n  }\n  if (json.recall[\"colorcal_blank1[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 30 \u0026\u0026 raw_at_blank1[light] \u003c 65534 \n      \u0026\u0026 raw_at_blank1[6] \u003e 4500 \u0026\u0026 raw_at_blank1[6] \u003c 65534) {\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad = (spad_at_blank1[2] - json.recall[\"colorcal_intensity1_yint[2]\"]) / json.recall[\"colorcal_intensity1_slope[2]\"];\t\n      output [\"SPAD_\".concat(wavelengthString)]  = MathROUND(minolta_spad,2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")]  = 1;\n        choose = 1;\n      continue;\n    }\n    else if (light != 6) {\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(spad_at_blank1[light],2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 1;\n//      output [\"SPAD1_\".concat(wavelengthString)] = MathROUND(spad_at_blank1[light],2);\n//      output [\"SPAD1_\".concat(wavelengthString,\"_intensity\")] = 1;\n      continue;\n    }\n  }\n  if (json.recall[\"colorcal_blank2[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank2[light] \u003e 500 \u0026\u0026 raw_at_blank2[light] \u003c 65534 \n      \u0026\u0026 raw_at_blank2[6] \u003e 3000 \u0026\u0026 raw_at_blank2[6] \u003c 65534) {\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad = (spad_at_blank2[2] - json.recall[\"colorcal_intensity2_yint[2]\"]) / json.recall[\"colorcal_intensity2_slope[2]\"];\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(minolta_spad,2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 2;\n        choose = 2;\n      continue;\n    }\n    else if (light != 6) {\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(spad_at_blank2[light],2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 2;\n//      output [\"SPAD2_\".concat(wavelengthString)] = MathROUND(spad_at_blank2[light],2);\n//      output [\"SPAD2_\".concat(wavelengthString,\"_intensity\")] = 2;\n      continue;\n    }\n  }\n  if (json.recall[\"colorcal_blank3[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank3[light] \u003e 750 \u0026\u0026 raw_at_blank3[light] \u003c 65534 \n      \u0026\u0026 raw_at_blank3[6] \u003e 3000 \u0026\u0026 raw_at_blank3[6] \u003c 65534) {\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad = (spad_at_blank3[2] - json.recall[\"colorcal_intensity3_yint[2]\"]) / json.recall[\"colorcal_intensity3_slope[2]\"];\n      output [\"SPAD_\".concat(wavelengthString)]  = MathROUND(minolta_spad,2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")]  = 3;\n      choose = 3;\n      continue;\n    }\n    else if (light != 6) {\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(spad_at_blank3[light],2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 3;\n//      output [\"SPAD3_\".concat(wavelengthString)] = MathROUND(spad_at_blank3[light],2);\n//      output [\"SPAD3_\".concat(wavelengthString,\"_intensity\")] = 3;\n      continue;\n    }\n  }\n}\n\nif (choose == 0) {\n  output [\"SPAD_650\"]  = 0;\n  danger(\"Chlorophyll content SPAD is outside the acceptable range.  The leaf may be too thick, too thin, or have holes in it.\", output);\n}\nelse if (minolta_spad \u003c= 2) {\n  info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n}\nelse if (minolta_spad \u003e= 100) {\n  info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n}\n\n/*\n    if (minolta_spad \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad1 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n*/\n\n// calculate chlorophyll content SPAD values with Minolta SPAD calibration --\u003e\n\n/*\nif (choose == 0) {\n    output [\"SPAD\"]  = 0;\n    output [\"SPAD intensity\"]  = 0;\n  \t\n\tdanger(\"Chlorophyll content SPAD is outside the acceptable range.  The leaf may be too thick, too thin, or have holes in it.\", output);\n}\nelse if (choose == 1) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad1,2);\n    output [\"SPAD intensity\"]  = 1;\n    if (minolta_spad1 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad1 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\nelse if (choose == 2) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad2,2);\n    output [\"SPAD intensity\"]  = 2;\n\tif (minolta_spad2 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad2 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\nelse if (choose == 3) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad3,2);\n    output [\"SPAD intensity\"]  = 3;\n\tif (minolta_spad3 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad3 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\n*/\n\n// consider adding some warnings here... could be noisy, but also if the signal is \u003e blank (suggest to recalibate?)\n\n\n\n// consider adding some warnings here... could be noisy, but also if the signal is \u003e blank (suggest to recalibate?)\n\n\n// CALCULATIONS FOR PHI2 PORTION OF THE TRACE\n//----------------------------\n\n// calculate the ir baseline for LED 3 which is used as the measuring light.  This subtract IR generated by the LED from the IR generated by the plant\n//----------------------------\nvar sample_cal = json.detector_read1;\n\nvar shinyness = (sample_cal-json.recall[\"ir_baseline_yint[5]\"])/json.recall[\"ir_baseline_slope[5]\"]; // where 0 is dull black electrical tape, and 1 is shiny aluminum\nvar baseline = json.recall[\"ir_baseline_slope[3]\"]*shinyness+json.recall[\"ir_baseline_yint[3]\"];\n\nif (!baseline || !json.recall[\"ir_baseline_yint[5]\"] || sample_cal == 65535) {\t\t\t\t\t\t// if it hasn't been calibrated or there's an error or it's maxed, set baseline == 0\n  baseline = 0;\n}\n\n/*\noutput[\"shinyness\"] = shinyness;\noutput[\"baseline\"] = baseline;\noutput[\"recall led slope\"] = json.recall[\"ir_baseline_slope[3]\"];\noutput[\"recall led yint\"] = json.recall[\"ir_baseline_yint[3]\"];\noutput[\"recall cal slope\"] = json.recall[\"ir_baseline_slope[5]\"];\noutput[\"recall cal yint\"] = json.recall[\"ir_baseline_yint[5]\"];\noutput[\"sample led\"] = json.detector_read1;\n*/\n\n//var sample_cal = MathMEAN(data.slice(2,18));\n\nvar inverse_intensity = [1/4500,1/4050,1/3600,1/3150];\nvar ps2_starts = 900; // when does the Phi2 measurement start\n\n// Set our Apparent FmPrime, 3 FmPrime steps, and Fs to calculate both traditional fv/fm and new Multi-phase flash fv/fm\n//----------------------------\nvar Fs = MathMEAN(data.slice(ps2_starts + 1,ps2_starts + 4)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar Fs_std = MathSTDEV(data.slice(ps2_starts + 1,ps2_starts + 4)); // create standard deviation for this value for error checking\n\nvar sat_vals = data.slice(ps2_starts + 25,ps2_starts + 48).sort();  // sort the saturating light values from low to high\nvar AFmP = MathMEAN(sat_vals.slice(2,20)) - baseline; // take the 18 largest values and average them\nvar AFmP_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checkingjson.data_raw.slice(953,955)\n\nsat_vals = data.slice(ps2_starts + 84,ps2_starts + 110).sort();  // sort the saturating light values from low to high\nvar FmP_end = MathMEAN(sat_vals.slice(2,23)) - baseline; // take the 21 largest values and average them\nvar FmP_end_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 52,ps2_starts + 60).sort();  // sort the saturating light values from low to high\nvar FmP_step1 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step1_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 62,ps2_starts + 70).sort();  // sort the saturating light values from low to high\nvar FmP_step2 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step2_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 72,ps2_starts + 80).sort();  // sort the saturating light values from low to high\nvar FmP_step3 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step3_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\n// Calculations for F0'\n// ----------------------------\nvar FoPrime_values = json.data_raw.slice(ps2_starts + 160,ps2_starts + 270).sort();\nvar FoPrime = MathMEAN(FoPrime_values.slice(5,10)) - baseline;\nvar FoPrime_std = MathSTDEV(FoPrime_values); // create standard deviation for this value for error checking\n\n// Calculations for corrected FmPrime using multi-phase flash\n// ----------------------------\nvar reg = MathLINREG(inverse_intensity, [AFmP,FmP_step1,FmP_step2,FmP_step3]);\n\n// Calculate Phi2 w/ and w/out multi-phase flash\n// ----------------------------\nvar fvfm_noMPF = (AFmP-Fs)/AFmP;\nvar fvfm_MPF = (reg.b-Fs)/reg.b;\n\n\n// Calculate NPQt, PhiNPQ, PhiNO, qL w/ and w/out multi-phase flash\n// ----------------------------\nvar npqt_MPF = (4.88 / ((reg.b / FoPrime) -1) )-1;\nvar npqt_noMPF = (4.88 / ((AFmP / FoPrime) -1) )-1;\nvar qL_MPF = ((reg.b - Fs)*FoPrime)/((reg.b-FoPrime)*Fs);\nvar qL_noMPF = ((AFmP - Fs)*FoPrime)/((AFmP-FoPrime)*Fs);\nvar PhiNO_MPF = 1/(npqt_MPF + 1 + qL_MPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNO_noMPF = 1/(npqt_noMPF + 1 + qL_noMPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNPQ_MPF = 1-fvfm_MPF-PhiNO_MPF; //based on equation 53 in Kramer et al., 2004 PRES \nvar PhiNPQ_noMPF = 1-fvfm_noMPF-PhiNO_noMPF; //based on equation 53 in Kramer et al., 2004 PRES \n\nvar qP_MPF = (reg.b - Fs)/(reg.b - FoPrime);\nvar qP_noMPF = (FmPrime - Fs)/(FmPrime - FoPrime);\nvar FvP_FmP_MPF = (reg.b-FoPrime)/reg.b;\nvar FvP_FmP_noMPF = (AFmP-FoPrime)/AFmP;\n\n// Create the variables to be printed (assume to use the MPF values unless there is a good reason not to)\n// ----------------------------\nvar fvfm = fvfm_MPF;\nvar npqt = npqt_MPF;\nvar PhiNO = PhiNO_MPF;\nvar PhiNPQ = PhiNPQ_MPF;\nvar qL = qL_MPF;\nvar FmPrime = reg.b;\nvar qP = qP_MPF;\nvar FvP_FmP = FvP_FmP_MPF;\n\n/****************OUTPUT VALUES FROM MACRO *******************/\n\n// If multi-phase flash steps are flat or positive slope, then just use the normal Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nif (reg.m \u003e 0) {\n  fvfm = fvfm_noMPF;\n  npqt = npqt_noMPF;\n  PhiNO = PhiNO_noMPF;\n  PhiNPQ = PhiNPQ_noMPF;\n  qL = qL_noMPF;\n  FmPrime = AFmP;\n  qP = qP_noMPF;\n  FvP_FmP = FvP_FmP_noMPF;\n  \n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n\twarning('Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_noMPF variable',output);\n\toutput[\"Phi2_noMPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n    output[\"Phi2\"] \t\t\t= -1;\n\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n\n  }\n  else {\n\t  output[\"Phi2\"] \t\t= MathROUND(fvfm,3);\n  }\n  \n  if (npqt \u003c= 0) {\n\toutput[\"PhiNPQ\"]\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n\twarning(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_noMPF and PhiNPQ_noMPF variable\",output);\n\toutput[\"PhiNPQ_noMPF\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_noMPF\"]\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput[\"PhiNPQ\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt\"]\t\t= MathROUND(npqt,3);\n  }\n\toutput[\"PhiNO\"]\t\t= MathROUND(PhiNO,3);\n\toutput[\"qL\"]\t\t= MathROUND(qL,3);\n    output['FvP/FmP']\t\t= MathROUND(FvP_FmP,3);\n    output['qP']\t\t\t= MathROUND(qP,3);\n}\n\n// Otherwise, use the multi-phase flash calculation for Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nelse {\n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n\twarning(\"Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_MPF variable\",output);\n\toutput[\"Phi2_MPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n    output[\"Phi2\"] \t\t\t= -1;\n\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n  }\n  else {\n    output[\"Phi2\"]\t\t\t= MathROUND(fvfm,3);\n  }\n  if (npqt \u003c= 0) {\n\toutput[\"PhiNPQ\"]\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n\twarning(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_MPF and PhiNPQ_MPF variables\",output);\n\toutput[\"PhiNPQ_MPF\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_MPF\"]\t\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput[\"PhiNPQ\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt\"]\t\t= MathROUND(npqt,3);\n  }\n\toutput[\"PhiNO\"]\t\t= MathROUND(PhiNO,3);\n\toutput[\"qL\"]\t\t\t= MathROUND(qL,3);\n    output['FvP/FmP']\t\t= MathROUND(FvP_FmP,3);\n    output['qP']\t\t\t= MathROUND(qP,3);\n}\n\n// only display LEF if there is a light intensity measurement \u003e 0 \n// ----------------------------\nif (typeof json.light_intensity != \"undefined\" \u0026\u0026 json.light_intensity \u003e 0) {\n\toutput[\"LEF\"] \t\t= MathROUND((fvfm  * 0.45 * json.light_intensity),3);\n}\n\nif (Fs_std \u003e 100) {\n\tdanger(\"noisy Fs\", output);\n}\n/*\nif (AFmP_std \u003e 300) {\n\tdanger(\"noisy FmPrime\", output);\n}\n*/\nif (FmP_step1_std \u003e 120 | FmP_step2_std \u003e 120 | FmP_step3_std \u003e 120 | FmP_end_std \u003e 300) {\n\tdanger(\"noisy  multi-phase flash steps\",output);\n}\n/*\nif (FoPrime_std \u003e 250) {\n\tdanger(\"noisy FoPrime\", output);\n}\nif (reg.m \u003e 0) {\n\tinfo(\"Used Phi2 and not Phi2 MPF - ambient light level was too low to apply MPF calculation\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003e .1) {\t\n\tinfo(\"FmPrime slopes down.  This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating light on these samples\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\n\tinfo(\"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\",output);\n}\n*/\n\noutput[\"FmPrime\"] \t\t= MathROUND(FmPrime,3);\noutput[\"Fs\"] \t\t\t= MathROUND(Fs,1);\noutput['FoPrime']\t\t= MathROUND(FoPrime,0);\noutput[\"RFd\"]           = Number(MathROUND(((FmPrime/Fs)-1),3));\noutput[\"ratio MPF/noMPF, Phi2\"] = MathROUND(fvfm_MPF / fvfm_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNPQ\"] = MathROUND(PhiNPQ_MPF / PhiNPQ_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNO\"] = MathROUND(PhiNO_MPF / PhiNO_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNO\"] = MathROUND(npqt_MPF / npqt_noMPF,5);\noutput[\"MPF_slope\"] \t= MathROUND(reg.m,3);\noutput[\"MPF_rsquared\"] \t= MathROUND(reg.r,3);\n/*\noutput[\"Phi2_MPF\"] \t\t= MathROUND(fvfm_MPF,3);\noutput[\"Phi2_noMPF\"] \t= MathROUND(fvfm,3);\noutput[\"FmPrime_MPF\"] \t= MathROUND(reg.b,3);\noutput[\"FmPrime_noMPF\"] = MathROUND(AFmP,1);\noutput['qL_MPF']\t\t= MathROUND(qL_MPF,3);\noutput['qL_noMPF']      = MathROUND(qL,3);\noutput['PhiNPQ_MPF']    = MathROUND(PhiNPQ_MPF,3);\noutput['PhiNPQ_noMPF']  = MathROUND(PhiNPQ,3);\noutput['PhiNO_MPF']\t\t= MathROUND(PhiNO_MPF,3);\noutput['PhiNO_noMPF']\t= MathROUND(PhiNO,3);\noutput[\"Fs_std\"] \t\t\t= MathROUND(Fs_std,1);\noutput[\"AFmP_std\"] \t\t\t= MathROUND(AFmP_std,1);\noutput[\"FmP_step1_std\"] \t= MathROUND(FmP_step1_std,1);\noutput[\"FmP_step2_std\"] \t= MathROUND(FmP_step2_std,1);\noutput[\"FmP_step3_std\"] \t= MathROUND(FmP_step3_std,1);\noutput[\"FmP_end_std\"] \t\t= MathROUND(FmP_end_std,1);\noutput[\"FoPrime_std\"] \t\t\t= MathROUND(FoPrime_std,1);\n*/\n\n//output[\"FmP_step1\"] = MathROUND(FmP_step1,3);\n//output[\"FmP_step2\"] = MathROUND(FmP_step2,3);\n//output[\"FmP_step3\"] = MathROUND(FmP_step3,3);\n//output[\"intensity inverse\"] = inverse_intensity;\n//output[\"steps\"] = [AFmP,FmP_step1,FmP_step2,FmP_step3];\n//output[\"slopey\"] = FmP_end/AFmP - AFmP/AFmP ;\n\n  output[\"baseline\"] \t= baseline;\n\n// Check for data quality issues and add warning or danger flags\n//----------------------------\n\n// Finally, use the \"order\" object to define the order of the outputs (focus on the top 6 most important for the user to see)\n//----------------------------\noutput[\"Light Intensity (PAR)\"] = json.light_intensity;\noutput[\"Leaf Temp Differential\"] = json.contactless_temp - json.temperature;\noutput[\"Relative Chlorophyll\"] = minolta_spad;\noutput [\"Rel Chl intensity\"]  = choose;  \t\noutput[\"Ambient Temperature\"] = json.temperature;\noutput[\"Ambient Humidity\"] = json.humidity;\noutput[\"Leaf Angle\"] = json.angle;\n\noutput[\"order\"] = [\"Phi2\",\"PhiNPQ\",\"PhiNO\",\"Relative Chlorophyll\",\"Leaf Temp Differential\",\"Leaf Angle\", \"Light Intensity (PAR)\",\"Ambient Temperature\",\"Ambient Humidity\",\"ECSt\",\"vH+\",\"gH+\"];\n\nmaxvalue = MathMAX([json.r,json.g,json.b]);\n//output[\"r\"] = json.r;\n//output[\"g\"] = json.g;\n//output[\"b\"] = json.b;\n//output[\"rval\"] = json.r*(255/maxvalue);\n//output[\"gval\"] = json.g*(255/maxvalue);\n//output[\"bval\"] = json.b*(255/maxvalue);\n\noutput[\"Color\"] = [MathROUND(json.r*(255/maxvalue),2),MathROUND(json.g*(255/maxvalue),2),MathROUND(json.b*(255/maxvalue),2)];\n\nreturn output;","json_data":"{\"time_offset\":240,\"time\":1471466929426,\"device_version\":\"1\",\"device_id\":\"d4:f5:10:14:06:65\",\"device_battery\":90,\"device_firmware\":\"1.06\",\"firmware_version\":\"1.06\",\"device_time\":1471450983,\"sample\":[[{\"time\":1471466929451,\"protocol_id\":1,\"detector_read1\":2319,\"detector_read2\":3051,\"light_intensity\":11,\"r\":30,\"g\":15,\"b\":9,\"light_intensity_raw\":49,\"temperature\":27.43,\"humidity\":65.174805,\"pressure\":984.203064,\"temperature2\":27.51,\"humidity2\":62.969727,\"pressure2\":985.48407,\"contactless_temp\":26.53,\"thickness\":1.07,\"compass_direction\":\"NW\",\"compass\":\"315.06\",\"angle\":1.09,\"angle_direction\":\"N\",\"pitch\":0.88,\"roll\":0.65,\"recall\":{\"time\":1471466933605,\"colorcal_blank1[1]\":7839.5,\"colorcal_blank1[2]\":12927,\"colorcal_blank1[3]\":12024.5,\"colorcal_blank1[4]\":36130,\"colorcal_blank1[6]\":26263.5,\"colorcal_blank1[8]\":24891.5,\"colorcal_blank1[9]\":20946.5,\"colorcal_blank1[10]\":27715,\"colorcal_blank2[1]\":17226.5,\"colorcal_blank2[2]\":15096,\"colorcal_blank2[3]\":12841,\"colorcal_blank2[4]\":13510.5,\"colorcal_blank2[6]\":35288,\"colorcal_blank2[8]\":38212.5,\"colorcal_blank2[9]\":36138,\"colorcal_blank2[10]\":32846,\"colorcal_blank3[1]\":16779,\"colorcal_blank3[2]\":10041,\"colorcal_blank3[3]\":15482,\"colorcal_blank3[4]\":16311,\"colorcal_blank3[6]\":30774,\"colorcal_blank3[8]\":30418,\"colorcal_blank3[9]\":20022.5,\"colorcal_blank3[10]\":20597.5,\"colorcal_intensity1_slope[2]\":2.464,\"colorcal_intensity1_yint[2]\":7.4,\"colorcal_intensity2_slope[2]\":2.208,\"colorcal_intensity2_yint[2]\":10.4,\"colorcal_intensity3_slope[2]\":1.49,\"colorcal_intensity3_yint[2]\":10.6,\"ir_baseline_slope[5]\":9459.5,\"ir_baseline_yint[5]\":13594.5,\"ir_baseline_slope[3]\":251.5,\"ir_baseline_yint[3]\":482},\"data_raw\":[25190,26768,26778,26783,26787,26789,26777,26787,26785,26784,26771,26782,26782,26780,26779,26777,26779,26782,26777,26777,26780,26779,26777,26778,26777,26775,26776,26775,26779,26773,26773,26772,26779,26771,26773,26776,26777,26766,26773,26772,26775,26760,26775,26773,26776,26765,26774,26773,26777,26761,26774,26774,26775,26763,26776,26775,26773,26767,26773,26774,26767,26766,26772,26770,26762,26770,26770,26771,26759,26774,26770,26771,26763,26768,26768,26774,26765,26772,26769,26775,26771,26770,26772,26762,26773,26766,26771,26769,26770,26767,26768,26763,26772,26763,26772,26759,26767,26770,26772,26765,26766,26769,26771,26765,26769,26769,26766,26765,26769,26770,26759,26769,26767,26766,26765,26767,26766,26771,26762,26767,26760,26770,26759,26763,26771,26772,26763,26761,26775,26763,26769,26766,26771,26763,26764,26769,26769,26761,26762,26763,26767,26755,26767,26765,26769,26759,26767,26766,26762,26757,26764,26770,26758,26767,26765,26771,26757,26765,26761,26763,26764,26762,26765,26773,26763,26764,26761,26773,26768,26762,26766,26763,26763,26759,26770,26757,26759,26766,26767,26758,26762,26769,26767,26759,26769,26766,26765,26764,26765,26766,26757,26767,26759,26767,26760,26766,26762,26761,26765,26763,26763,26762,26765,26763,26765,26758,26762,26762,26768,26758,26761,26765,26766,26756,26766,26765,26760,26763,26763,26762,26760,26765,26759,26770,26759,26763,26759,26767,26758,26759,26766,26766,26761,26758,26768,26757,26758,26764,26761,26756,26761,26759,26763,26758,26762,26761,26763,26761,26761,26763,26762,26764,26763,26758,26759,26758,26760,26765,26756,26757,26757,26769,26760,26761,26767,26763,26761,26758,26765,26758,26761,26757,26768,26757,26758,26767,26765,26758,26759,26764,26764,26762,26764,26765,26757,26758,26763,26766,26755,26759,26769,26763,26760,26759,26768,26758,26759,26764,26761,26754,26756,26764,26758,26754,26760,26767,26762,26759,26764,26767,26757,26757,26765,26764,26756,26766,26766,26763,26762,26762,26765,26757,26767,26763,26762,26761,26763,26761,26770,26763,26764,26761,26761,26764,26759,26772,26760,26761,26767,26762,26760,26759,26767,26760,26759,26763,26768,26757,26759,26763,26768,26758,26767,26767,26763,26760,26761,26767,26757,26763,26765,26767,26758,26766,26767,26759,26759,26767,26764,26758,26766,26764,26766,26755,26763,26765,26762,26763,26768,26767,26757,26766,26761,26764,26758,26767,26769,26759,26769,26761,26765,26759,26763,26765,26761,26765,26764,26762,26761,26763,26763,26760,26759,26761,26765,26761,26767,26764,26766,26757,26763,26761,26762,26763,26762,26765,26760,26766,26764,26761,26761,26766,26758,26763,26760,26759,26763,26767,26766,26762,26767,26760,26763,26760,26768,26761,26761,26765,26759,26761,26763,26767,26755,26766,26766,26764,26758,26763,26767,26759,26765,26761,26760,26760,26763,26760,26770,26761,26759,26768,26767,26765,26758,26767,26758,26762,26769,26764,26768,26761,26769,26760,26761,26758,26767,26763,26762,26766,26763,26765,26759,26771,26757,26759,26769,26767,26762,26767,26769,26760,26759,26762,26771,26757,26764,26769,26765,26762,26768,26766,26761,26767,26765,26766,26761,26765,26767,26758,26766,26762,26767,26756,26764,26766,26763,26768,26764,26768,26759,26768,26761,26766,26765,26766,26764,26762,26766,26764,26763,26764,26765,26767,26767,26767,26759,26765,26763,26765,26762,26765,26761,26767,26770,26763,26769,26764,26766,26758,26763,26763,26764,26759,26765,26768,26757,26765,26766,26767,26757,26764,26767,26761,26766,26764,26767,26757,26766,26766,26769,26759,26769,26767,26758,26766,26763,26764,26757,26765,26765,26759,26768,26763,26769,26756,26766,26765,26761,26765,26764,26767,26757,26763,26763,26766,26764,26765,26766,26761,26768,26761,26769,26759,26767,26763,26760,26768,26765,26768,26755,26765,26765,26764,26763,26761,26761,26756,26764,26762,26758,26762,26761,26763,26755,26761,26761,26758,26763,26759,26758,26755,26764,26761,26759,26756,26763,26763,26761,26762,26759,26759,26757,26757,26759,26767,26760,26759,26765,26758,26761,26755,26763,26759,26758,26763,26760,26762,26759,26762,26758,26759,26760,26758,26760,26759,26764,26754,26760,26763,26757,26759,26760,26767,26756,26757,26763,26764,26759,26761,26764,26755,26761,26763,26760,26755,26766,26765,26756,26759,26762,26763,26755,26761,26765,26758,26758,26760,26764,26757,26759,26766,26759,26763,26759,26767,26753,26757,26762,26759,26759,26756,26765,26753,26759,26760,26761,26760,26754,26767,26757,26759,26758,26763,26761,26761,26761,26758,26757,26756,26765,26761,26759,26759,26757,26757,26762,26761,26763,26758,26758,26758,26759,26759,26766,26762,26759,26763,26757,26758,26759,26765,26765,26759,26763,26757,26757,26757,26763,26758,26756,26764,26758,26759,26761,26764,26763,26759,26765,26757,26761,26756,26766,26761,26759,26763,26757,26760,26758,26767,26759,26758,26766,26751,26759,26757,26764,26760,26757,26767,26757,26759,26763,26763,26759,26755,26765,26754,26761,26758,26764,26759,26762,26767,26755,26758,26759,26762,26762,26757,26768,26756,26758,26761,26763,26762,26757,26767,26757,26756,26767,26759,26757,26761,26765,26756,26759,26761,26759,26762,26762,26764,26757,26759,26766,26762,26758,26763,26763,26753,26758,26767,26758,26758,26764,26761,26756,26763,26762,26757,26759,26760,26763,26753,26763,26764,26755,26761,26762,26763,26756,26762,26763,26759,26765,26758,26764,26757,26759,26765,26751,26765,26758,26760,26761,26759,26762,26758,26759,26761,26757,26763,26759,26762,26758,26761,26763,26755,26763,26756,26758,26757,26760,26763,26755,26764,26763,26763,26757,26762,26766,26754,4600,4602,4599,4593,4594,4592,4590,4588,4587,4590,4589,4590,4588,4589,4587,4588,4589,4589,4590,4589,10547,11367,11919,12590,13286,13853,14241,14500,14686,14810,14910,14987,15048,15083,15126,15154,15177,15206,15211,15233,15239,15246,15255,15252,15258,15255,15262,15259,15246,15245,15139,15128,15108,15104,15090,15086,15074,15069,15062,15056,14914,14894,14875,14865,14859,14837,14831,14823,14812,14798,14623,14605,14581,14563,14549,14542,14532,14523,14512,14507,14937,14969,14981,14990,14984,14981,14979,14968,14961,14951,14945,14935,14924,14923,14909,14898,14890,14879,14873,14870,14851,14846,14841,14823,14819,14818,14800,14794,14795,14780,8343,7363,7017,6834,6704,6594,6518,6454,6404,6351,6314,6287,6257,6228,6199,6182,6157,6138,6117,6107,5471,5318,5285,5270,5248,5239,5237,5219,5216,5215,5199,5201,5201,5191,5189,5193,5183,5185,5182,5185,5177,5174,5177,5167,5169,5173,5162,5167,5166,5161,5161,5163,5157,5158,5161,5155,5154,5159,5147,5150,5154,5146,5149,5154,5142,5143,5150,5142,5142,5147,5138,5137,5142,5137,5137,5143,5137,5134,5133,5131,5135,5125,5127,5134,5125,5126,5127,5125,5124,5118,5117,5123,5110,5113,5119,5113,5111,5112,5109,5113,5104,5107,5107,5106,5105,5105,5104,5108,5097,5102,5102,5098,5104,5094,5098,5098,5095,5097,5093,5094,5090,5092,5100,5093,5091,5083,5091,5093,5090,5087,5082,5085,5090,5082,5088,5078,5083,5087,5084,5087,5082,5080,5074,5080,5080,5077,5082,5079,5081,5072,5075,5071,5073,5078,5075,5077,5073,5073,5071,5071,5071,5070,5077,5069,5074,5071,5073,5066,5070,5064,1860,620,592,586,581,582,581,577,579,577,274,299,297,300,300,297,300,298,297,300,5983,683,625,613,613,614,611,612,612,612,160,238,235,236,236,235,236,236,235,240,22734,9248,9035,9010,9003,9002,8985,8987,8989,8978,30310,8485,8144,8111,8098,8083,8080,8073,8075,8076,12507,9285,9239,9234,9229,9229,9230,9229,9228,9228,13264,10133,10076,10067,10069,10065,10063,10066,10060,10060,7819,8654,8672,8675,8671,8671,8674,8667,8671,8675,2128,2425,2431,2430,2431,2429,2434,2429,2432,2432,4155,4800,4805,4806,4806,4805,4806,4804,4805,4805,591,657,660,658,658,662,658,659,660,657,62432,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,57158,65535,65535,65535,65535,65535,65535,65535,65535,65535,56081,65535,65535,65535,65535,65535,65535,65535,65535,65535,33582,37122,37159,37164,37165,37163,37171,37163,37161,37170,5647,6462,6474,6467,6472,6475,6471,6471,6476,6469,24218,29798,29849,29851,29847,29831,29832,29831,29815,29815,4040,4980,4996,5001,4994,4998,5001,4999,4999,5004,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535]}]],\"app_os\":\"linux\",\"app_name\":\"PhotosynQ\",\"app_version\":\"0.3.4\",\"app_device\":\"x86-64\",\"location\":[\"42.7225897\",\"-84.4747067\"],\"ConsoleMacro\":\"207\"}","md5hash":"7d51da728e01aa0cd9f067c9875faaf0","created_at":"2016-08-17T20:38:43.939Z","updated_at":"2017-02-08T19:33:42.125Z","is_deleted":false,"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}},"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}},{"id":326,"name":"NPQ / NPQt correlation RODRI B with MACRO","slug":"npq-npqt-correlation-rodri-b-with-macro","description":"Correlation of NPQ and NPQt, written by Stefanie Tietz\nModifications from the original:\nACTINIC LIGHT ALWAYS 1500 (PIN 20 : 182) \nPULSES 2 MIN WITH LIGHT ON, 1 MIN LIGHT OFF\nWITHOUT 730 nm LIGHT (NO F0PRIME MEASURMENT) ","pre_selected":false,"macro_id":154,"protocol_json":{"pulses":[20,20,50,20,500,200,12000,20,50,20,500,200,12000,20,50,20,500,200,12000,20,50,20,500,200,12000,20,50,20,500,200,6000,20,50,20,500,200,6000,20,50,20,500,200,6000,20,50,20,500,200,6000,20,50,200,500,200],"environmental":[["light_intensity",0],["relative_humidity",0],["temperature",0]],"get_ir_baseline":[15,14],"act1_lights":[0,20,20,20,0,0,20,20,20,20,0,0,20,20,20,20,0,0,20,20,20,20,0,0,20,20,20,20,0,0,20,20,20,20,0,0,20,20,20,20,0,0,20,20,20,20,0,0,20,20,20,20,0,0],"act_intensities":[0,0,692,0,0,0,182,182,692,0,0,0,182,182,692,0,0,0,182,182,692,0,0,0,182,182,692,0,0,0,0,0,692,0,0,0,0,0,692,0,0,0,0,0,692,0,0,0,0,0,692,0,0,0],"cal_intensities":[4095,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"meas_intensities":[0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095],"pulsedistance":10000,"pulsesize":10,"detectors":[[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34]],"meas_lights":[[14],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15]],"protocol_id":326},"created_at":"2015-10-21T19:04:45.723Z","updated_at":"2016-05-16T16:36:17.748Z","is_deleted":null,"md5hash":"1d4508cf6b21971a86258bb4e4f62da7","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqproduction.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":154,"name":"NPQ / NPQt correlation RODRI B CORRECTED MARCH 2016","slug":"npq-npqt-correlation-rodri-b-corrected-march-2016","description":"Correlation of NPQ and NPQt, written by Stefanie Tietz\nModificaciones para medidas sin luz 730 (no da los f0prime)","default_y_axis":"","default_x_axis":"","javascript_code":"var data = json.data_raw;\nvar output = {};\nvar sample_cal = MathMEAN(data.slice(2,18));\n\n// retrieve the baseline information from the data JSON and save (using measuring light 15, calibrating light 14)\nfor (i in json.get_ir_baseline) {\t\n\tif (json.get_ir_baseline[i][0] == 15) {\n\t\tvar slope_light = json.get_ir_baseline[i][1];\n\t\tvar yint_light = json.get_ir_baseline[i][2];\n\t}\n\tif (json.get_ir_baseline[i][0] == 14) {\n\t\tvar slope_cal = json.get_ir_baseline[i][1];\n\t\tvar yint_cal = json.get_ir_baseline[i][2];\n\t}\n}\n\n// calculate the baseline\nvar shinyness = (sample_cal-yint_cal)/slope_cal; // where 0 is dull black electrical tape, and 1 is shiny aluminum\nvar baseline = slope_light*shinyness+yint_light;\n\nvar Fss = MathMEAN(data.slice(22,38)) - baseline;\nvar FmPs = MathMEAN(data.slice(42,88)) - baseline; // take the 4 largest values and average them\nvar fvfms = (FmPs-Fss)/FmPs;\n\nvar Fo = MathMEAN(data.slice(20,22)) - baseline;\nvar Fs = MathMEAN(data.slice(24,28)) - baseline;// take only the first 4 values in the Fs range, excluding the very first\nvar sat_vals = data.slice(42,88).sort();  // sort the saturating light values from low to high\nvar Fm = MathMEAN(sat_vals.slice(44,46)) - baseline; // take the 4 largest values and average them\nvar fvfm = (Fm-Fo)/Fm;\n\n//NPQt parameters\n\nvar Fs1 = MathMEAN(data.slice(3398,3401)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar sat_vals1 = data.slice(4018,4068).sort();  // sort the saturating light values from low to high\nvar Fm1 = MathMEAN(sat_vals1.slice(45,50)) - baseline; // take the 4 largest values and average them\nvar fvfm1 = (Fm1-Fs1)/Fm1;\n\nvar Fs2 = MathMEAN(data.slice(6071,6075)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar sat_vals2 = data.slice(6091,6141).sort();  // sort the saturating light values from low to high\nvar Fm2 = MathMEAN(sat_vals2.slice(45,50)) - baseline; // take the 4 largest values and average them\nvar fvfm2 = (Fm2-Fs2)/Fm2;\n\nvar Fs3 = MathMEAN(data.slice(8144,8148)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar sat_vals3 = data.slice(8164,8214).sort();  // sort the saturating light values from low to high\nvar Fm3 = MathMEAN(sat_vals3.slice(45,50)) - baseline; // take the 4 largest values and average them\nvar fvfm3 = (Fm3-Fs3)/Fm3;\n\n//NPQ \n\nvar NPQ1 = [(Fm-Fm1)/Fm1]\nvar NPQ2 = [(Fm-Fm2)/Fm2]\nvar NPQ3 = [(Fm-Fm3)/Fm3]\n\n//ETR\nvar ETR=250*0.84*0.5*fvfm\nvar ETR1=250*0.84*0.5*fvfm1\nvar ETR2=500*0.84*0.5*fvfm2\nvar ETR3=1000*0.84*0.5*fvfm3\n\n//output[\"sorted\"] = sat_vals;\noutput[\"Fv/Fm\"] = MathROUND(fvfm,3);\noutput[\"baseline\"] = MathROUND(baseline,1);\n\noutput[\"Fs\"] = MathROUND(Fs,3);\noutput[\"Fs1\"] = MathROUND(Fs1,3);\noutput[\"Fs2\"] = MathROUND(Fs2,3);\noutput[\"Fs3\"] = MathROUND(Fs3,3);\n\noutput[\"Fm\"] = MathROUND(Fm,0);\noutput[\"Fm1\"] = MathROUND(Fm1,0);\noutput[\"Fm2\"] = MathROUND(Fm2,0);\noutput[\"Fm3\"] = MathROUND(Fm3,0);\n\noutput[\"NPQ1\"] = MathROUND(NPQ1,3);\noutput[\"NPQ2\"] = MathROUND(NPQ2,3);\noutput[\"NPQ3\"] = MathROUND(NPQ3,3);\n\nreturn output;","json_data":"{\"time_offset\":240,\"time\":1429709655753,\"device_id\":128,\"firmware_version\":\"0.400\",\"sample\":[[{\"time\":1429709655760,\"protocol_id\":1,\"get_ir_baseline\":[[15,206.31,226.21],[14,5170.79,6094.21]],\"light_intensity\":0,\"r\":0,\"g\":0,\"b\":0,\"relative_humidity\":21.31,\"temperature\":25.94,\"data_raw\":[3696,3589,3670,3699,3626,3644,3688,3595,3677,3656,3642,3649,3651,3638,3694,3623,3606,3696,3643,3631,2371,2372,2379,2404,2396,2402,2421,2416,2419,2428,2433,2433,2440,2440,2457,2445,2453,2459,2446,2469,2465,7774,8731,9060,9218,9336,9513,9718,9922,10100,10264,10382,10485,10563,10626,10677,10710,10720,10745,10734,10753,10751,10770,10765,10764,10766,10764,10756,10755,10761,10756,10750,10761,10753,10743,10769,10761,10741,10742,10759,10748,10743,10736,10733,10734,10728,10722,10722,10723,10722,10729,8669,7962,7559,7266,7051,6885,6724,6617,6506,6390,6294,6217,6129,6039,5974,5906,5839,5773,5726,5681,5607,5232,4837,4571,4352,4213,4144,4014,3952,3902,3927,3876,3798,3783,3806,3786,3734,3726,3741,3723,3761,3724,3722,3726,3715,3688,3708,3682,3706,3747,3675,3667,3656,3658,3724,3651,3699,3694,3717,3644,3710,3696,3691,3643,3707,3632,3671,3673,3629,3625,3705,3636,3648,3670,3712,3652,3668,3671,3656,3705,3618,3650,3635,3666,3620,3677,3648,3611,3602,3633,3654,3624,3602,3608,3615,3590,3615,3625,3619,3604,3601,3594,3560,3575,3580,3621,3567,3566,3580,3575,3560,3576,3561,3551,3576,3567,3557,3522,3551,3501,3547,3527,3532,3535,3554,3511,3519,3501,3516,3502,3534,3498,3512,3530,3496,3466,3517,3500,3484,3498,3452,3443,3484,3452,3460,3443,3458,3427,3429,3451,3439,3441,3417,3444,3449,3438,3436,3391,3415,3438,3417,3395,3392,3420,3367,3389,3356,3498,3358,3382,3421,3342,3356,3386,3338,3330,3339,3354,3337,3336,3299,3296,3311,3326,3330,3341,3309,3334,3315,3280,3300,3296,3283,3309,3297,3308,3304,3341,3287,3265,3308,3261,3269,3392,3255,3242,3253,3247,3260,3246,3275,3232,3230,3229,3252,3224,3277,3252,3206,3231,3290,3211,3224,3250,3211,3204,3228,3234,3231,3238,3255,3201,3204,3201,3194,3202,3210,3190,3167,3193,3181,3176,3174,3183,3220,3174,3220,3175,3158,3193,3178,3222,3181,3144,3197,3150,3144,3170,3177,3165,3180,3162,3159,3196,3182,3129,3173,3141,3147,3155,3153,3144,3112,3207,3144,3163,3149,3143,3150,3145,3132,3130,3168,3114,3138,3144,3115,3186,3114,3102,3170,3082,3099,3151,3106,3089,3114,3134,3132,3129,3117,3109,3085,3073,3147,3171,3131,3117,3093,3085,3158,3088,3118,3094,3100,3066,3086,3109,3114,3111,3119,3124,3115,3130,3098,3081,3068,3093,3126,3095,3108,3149,3091,3091,3070,3080,3099,3111,3098,3069,3111,3190,3081,3108,3127,3073,3053,3109,3050,3089,3061,3098,3054,3081,3040,3046,3082,3117,3073,3092,3073,3046,3055,3060,3076,3102,3042,3069,3069,3096,3068,3035,3090,3034,3058,3041,3064,3062,3098,3088,3091,3045,3048,3077,3052,3060,3066,3119,3059,3007,3038,3101,3012,3067,3019,3051,3019,3055,3081,3086,3026,3035,3042,3035,3050,3042,3058,3021,3046,3061,3081,3006,3049,3027,3062,3034,3024,3025,3063,3061,3032,3045,3057,3038,3034,3047,3036,3065,3036,3011,3035,3066,3042,3044,3030,3053,3040,3122,3038,3089,3022,2970,2990,3008,3020,3054,3028,3079,3067,3063,3053,3000,3016,3029,3014,3034,3017,3000,2984,2987,3000,3053,2984,3021,3033,3034,2991,2991,3004,2972,3031,3021,3003,2997,3046,3064,2990,3000,3006,3010,2972,2979,2985,2999,3017,3005,3014,3032,3011,3013,2995,2976,2998,3004,3027,2992,3048,3006,2997,3012,2957,2981,2989,2992,3013,3023,3008,2957,2970,2991,2995,2961,2981,2997,3053,3015,3025,3017,2971,3006,2898,2834,2808,2766,2731,2707,2673,2653,2649,2629,2622,2614,2601,2591,2595,2578,2572,2561,2558,2554,2563,2556,2571,2570,2572,2559,2556,2566,2568,2551,2559,2555,2554,2548,2564,2562,2551,2551,2564,2569,2563,2556,2546,2554,2561,2549,2556,2548,2568,2547,2553,2543,2557,2552,2545,2542,2557,2551,2542,2558,2540,2555,2551,2554,2554,2544,2553,2546,2554,2551,2552,2527,2547,2547,2542,2555,2558,2543,2548,2561,2557,2566,2551,2544,2551,2544,2564,2545,2553,2552,2554,2541,2543,2534,2536,2543,2541,2539,2561,2559,2539,2543,2552,2554,2554,2553,2549,2547,2556,2553,2547,2536,2542,2547,2549,2548,2551,2548,2555,2535,2535,2544,2554,2556,2548,2550,2536,2554,2541,2539,2543,2549,2543,2558,2547,2538,2542,2543,2550,2545,2544,2543,2532,2533,2538,2544,2546,2550,2561,2560,2540,2538,2552,2544,2544,2551,2542,2537,2552,2543,2550,2545,2549,2543,2540,2542,2540,2540,2562,2542,2546,2545,2543,2546,2530,2531,2532,2535,2547,2541,2554,2541,2555,2533,2544,2544,2537,2525,2534,2526,2534,2519,2544,2536,2525,2536,2535,2552,2544,3450,3454,3448,3471,3458,3453,3467,3463,3449,3468,3465,3474,3481,3471,3468,3477,3483,3486,3472,3490,5906,6223,6332,6375,6400,6407,6430,6442,6442,6451,6459,6463,6451,6465,6454,6459,6463,6463,6471,6468,6481,6477,6455,6454,6468,6463,6464,6468,6468,6451,6467,6461,6466,6460,6476,6465,6470,6460,6455,6457,6470,6461,6485,6484,6491,6477,6480,6477,6473,6481,6482,4365,3669,3373,3272,3198,3162,3163,3122,3097,3089,3093,3079,3070,3076,3071,3062,3060,3047,3052,3055,3207,3017,2935,2822,2710,2627,2618,2642,2580,2510,2534,2518,2481,2535,2471,2479,2446,2458,2434,2431,2433,2406,2449,2423,2363,2458,2428,2394,2413,2451,2393,2426,2397,2394,2394,2480,2396,2368,2386,2389,2420,2405,2380,2397,2392,2361,2395,2451,2383,2388,2402,2409,2377,2394,2455,2393,2385,2380,2384,2388,2353,2400,2365,2356,2362,2375,2384,2449,2386,2397,2370,2368,2344,2489,2384,2338,2397,2395,2404,2377,2399,2382,2480,2361,2407,2524,2382,2355,2437,2418,2434,2344,2363,2370,2353,2338,2379,2346,2389,2370,2425,2394,2364,2356,2355,2392,2391,2475,2363,2374,2356,2372,2409,2362,2389,2368,2366,2422,2373,2407,2364,2400,2370,2378,2373,2366,2386,2360,2377,2401,2373,2368,2432,2350,2392,2427,2411,2426,2382,2377,2409,2354,2482,2383,2385,2369,2441,2379,2358,2348,2339,2367,2383,2429,2408,2405,2351,2355,2364,2411,2362,2377,2399,2389,2397,2338,2374,2421,2360,2370,2350,2359,2388,2376,2389,2465,2380,2369,2399,2392,2380,2350,2379,2357,2372,2420,2389,2434,2391,2350,2437,2366,2550,2391,2378,2371,2408,2383,2407,2385,2407,2384,2395,2406,2406,2422,2400,2394,2396,2408,2398,2433,2388,2373,2419,2399,2386,2391,2414,2463,2381,2394,2397,2394,2431,2368,2439,2399,2431,2399,2437,2401,2408,2379,2405,2387,2369,2460,2423,2407,2395,2401,2423,2467,2443,2408,2361,2401,2405,2381,2397,2417,2387,2420,2386,2407,2374,2387,2406,2395,2378,2404,2387,2408,2399,2391,2393,2440,2403,2420,2374,2404,2398,2396,2421,2430,2416,2411,2419,2437,2424,2405,2362,2396,2390,2407,2384,2400,2409,2411,2368,2366,2414,2417,2382,2388,2389,2400,2410,2421,2427,2406,2414,2374,2386,2445,2428,2401,2406,2399,2375,2411,2470,2417,2418,2404,2440,2446,2396,2404,2402,2396,2387,2427,2392,2387,2410,2422,2426,2422,2429,2469,2486,2427,2413,2469,2429,2414,2411,2480,2437,2455,2398,2417,2406,2407,2417,2450,2410,2476,2421,2416,2445,2396,2500,2415,2449,2444,2435,2432,2442,2409,2469,2440,2451,2415,2434,2406,2407,2426,2462,2411,2489,2396,2483,2422,2407,2417,2432,2459,2432,2482,2416,2394,2431,2427,2436,2427,2454,2472,2492,2434,2442,2454,2485,2443,2415,2448,2428,2403,2432,2443,2460,2432,2513,2443,2487,2429,2456,2430,2531,2502,2476,2426,2394,2401,2428,2422,2408,2440,2416,2420,2440,2423,2480,2407,2462,2503,2426,2439,2435,2448,2413,2415,2427,2447,2470,2450,2453,2550,2457,2429,2417,2454,2432,2414,2421,2409,2437,2485,2433,2431,2446,2426,2445,2447,2434,2502,2475,2460,2402,2411,2392,2450,2430,2511,2464,2425,2478,2456,2442,2436,2453,2451,2430,2442,2433,2440,2415,2416,2424,2395,2477,2446,2425,2450,2450,2436,2444,2466,2469,2422,2441,2425,2451,2443,2447,2424,2447,2509,2315,2316,2307,2287,2296,2289,2283,2269,2275,2268,2269,2292,2274,2273,2279,2266,2261,2264,2255,2260,2270,2254,2257,2271,2258,2249,2250,2252,2257,2255,2256,2264,2252,2273,2256,2260,2254,2245,2256,2253,2252,2248,2260,2259,2264,2257,2250,2265,2261,2244,2255,2262,2265,2256,2252,2236,2253,2242,2268,2253,2247,2247,2248,2251,2261,2266,2262,2244,2256,2266,2264,2255,2258,2250,2253,2237,2246,2259,2256,2260,2257,2258,2257,2262,2266,2254,2268,2267,2256,2262,2251,2256,2266,2268,2280,2266,2267,2253,2261,2261,2256,2263,2267,2273,2269,2258,2278,2270,2268,2258,2262,2268,2275,2268,2282,2279,2265,2273,2265,2265,2267,2275,2258,2263,2265,2268,2264,2269,2273,2274,2291,2273,2277,2268,2273,2292,2274,2268,2286,2281,2275,2269,2278,2280,2284,2273,2279,2276,2271,2270,2277,2280,2280,2273,2274,2278,2277,2261,2278,2270,2271,2287,2289,2278,2281,2271,2285,2281,2287,2289,2280,2279,2282,2283,2287,2300,2281,2303,2288,2283,2272,2282,2273,2273,2273,2295,2287,2286,2286,2295,2292,2288,2299,2301,2294,2296,2289,2300,2300,3532,3532,3539,3546,3554,3544,3554,3557,3554,3541,3533,3530,3542,3550,3566,3544,3536,3546,3546,3546,4816,5026,5084,5124,5134,5137,5135,5137,5136,5136,5138,5143,5158,5147,5146,5151,5150,5156,5141,5147,5159,5153,5173,5156,5150,5157,5140,5153,5140,5152,5154,5158,5136,5133,5153,5139,5140,5146,5143,5133,5154,5139,5148,5151,5165,5160,5140,5138,5134,5153,5143,3684,3151,2964,2895,2835,2823,2822,2810,2811,2803,2806,2805,2786,2783,2792,2794,2802,2791,2799,2794,2844,2733,2661,2635,2568,2526,2532,2482,2459,2409,2400,2342,2347,2451,2394,2310,2305,2298,2310,2352,2302,2265,2284,2248,2292,2294,2256,2232,2238,2267,2300,2265,2277,2269,2294,2278,2250,2360,2364,2270,2312,2263,2277,2245,2269,2250,2245,2253,2270,2253,2265,2245,2213,2267,2272,2228,2272,2261,2276,2264,2246,2271,2264,2253,2270,2264,2238,2256,2255,2289,2258,2242,2257,2273,2291,2271,2274,2267,2238,2237,2270,2278,2289,2267,2309,2260,2262,2292,2276,2315,2296,2281,2273,2291,2268,2288,2290,2243,2271,2241,2290,2254,2266,2286,2246,2241,2315,2300,2289,2366,2261,2286,2257,2247,2232,2278,2280,2258,2268,2258,2262,2292,2361,2271,2273,2257,2272,2308,2295,2267,2334,2276,2277,2299,2274,2283,2303,2250,2246,2291,2274,2254,2241,2271,2318,2255,2259,2342,2250,2279,2264,2258,2277,2289,2255,2274,2314,2296,2250,2265,2242,2316,2251,2257,2318,2309,2264,2304,2268,2282,2294,2312,2279,2261,2233,2291,2324,2266,2266,2284,2256,2299,2239,2315,2299,2281,2336,2366,2284,2289,2350,2311,2261,2332,2257,2276,2298,2273,2272,2286,2294,2301,2269,2269,2292,2293,2437,2295,2285,2317,2294,2292,2268,2290,2272,2280,2315,2296,2291,2277,2313,2272,2288,2266,2284,2316,2267,2283,2310,2297,2287,2302,2303,2289,2358,2287,2275,2256,2303,2278,2326,2321,2311,2327,2279,2307,2298,2284,2281,2287,2262,2304,2304,2286,2324,2297,2259,2286,2311,2291,2299,2319,2283,2282,2287,2287,2316,2277,2292,2297,2283,2275,2307,2296,2308,2308,2336,2304,2325,2277,2318,2306,2313,2402,2294,2342,2286,2303,2343,2335,2327,2342,2326,2387,2320,2315,2315,2338,2382,2330,2301,2344,2319,2311,2295,2327,2369,2330,2351,2325,2343,2327,2388,2312,2316,2313,2335,2298,2333,2362,2378,2410,2339,2312,2427,2315,2345,2348,2349,2342,2391,2325,2350,2330,2372,2379,2307,2331,2329,2364,2394,2323,2334,2342,2354,2356,2335,2339,2370,2334,2348,2342,2509,2342,2372,2340,2361,2321,2346,2338,2377,2354,2341,2355,2325,2349,2386,2376,2362,2371,2340,2342,2396,2352,2390,2328,2335,2389,2335,2323,2361,2360,2395,2337,2419,2424,2345,2387,2341,2360,2351,2343,2426,2339,2357,2375,2378,2377,2369,2380,2376,2374,2390,2380,2347,2359,2372,2373,2378,2352,2388,2489,2400,2404,2366,2362,2358,2365,2358,2379,2363,2381,2357,2416,2368,2390,2418,2367,2381,2404,2347,2351,2400,2423,2367,2390,2356,2400,2437,2377,2466,2389,2435,2463,2350,2361,2370,2377,2363,2391,2413,2389,2420,2371,2430,2392,2456,2397,2403,2382,2377,2384,2406,2397,2460,2398,2403,2401,2425,2433,2385,2409,2359,2388,2460,2409,2438,2386,2376,2378,2396,2411,2392,2433,2378,2424,2383,2406,2385,2389,2451,2370,2390,2472,2397,2373,2410,2401,2448,2435,2284,2273,2266,2250,2256,2250,2244,2241,2227,2237,2245,2236,2233,2231,2242,2230,2236,2240,2220,2232,2227,2232,2231,2213,2235,2211,2225,2239,2218,2220,2215,2205,2202,2212,2232,2220,2211,2229,2224,2216,2223,2216,2224,2215,2219,2232,2222,2217,2218,2215,2227,2214,2217,2212,2211,2219,2221,2218,2233,2228,2215,2217,2221,2227,2204,2214,2221,2206,2215,2218,2226,2226,2239,2234,2209,2227,2216,2221,2205,2232,2221,2238,2234,2231,2226,2220,2224,2222,2234,2231,2216,2218,2232,2226,2229,2224,2240,2235,2235,2230,2222,2233,2230,2232,2235,2231,2234,2230,2229,2225,2233,2233,2238,2231,2244,2237,2238,2235,2243,2236,2241,2245,2243,2239,2241,2247,2244,2230,2250,2259,2251,2239,2247,2235,2245,2247,2229,2228,2252,2241,2246,2263,2255,2239,2251,2243,2251,2245,2247,2252,2250,2241,2247,2245,2256,2254,2248,2249,2248,2239,2252,2239,2245,2258,2251,2259,2257,2243,2263,2270,2255,2254,2266,2260,2256,2252,2258,2265,2263,2259,2255,2264,2246,2265,2257,2261,2266,2257,2270,2259,2268,2260,2272,2261,2248,2271,2266,2288,2257,3758,3770,3772,3766,3768,3768,3784,3777,3771,3767,3771,3756,3769,3770,3767,3775,3770,3766,3762,3774,4411,4502,4542,4555,4571,4565,4576,4559,4564,4566,4571,4566,4563,4572,4568,4568,4590,4572,4568,4569,4568,4563,4564,4577,4571,4586,4563,4566,4573,4590,4576,4578,4582,4579,4580,4564,4563,4584,4584,4570,4567,4559,4575,4576,4585,4581,4573,4573,4555,4576,4574,3364,2940,2789,2731,2702,2695,2687,2680,2667,2678,2659,2658,2662,2659,2662,2656,2663,2673,2666,2672,2721,2686,2595,2587,2515,2453,2450,2433,2385,2343,2337,2315,2330,2332,2283,2339,2280,2241,2257,2257,2252,2273,2219,2245,2260,2225,2236,2186,2283,2211,2207,2210,2206,2207,2248,2221,2219,2205,2215,2211,2208,2213,2193,2227,2195,2218,2181,2203,2198,2213,2222,2198,2215,2267,2211,2257,2198,2217,2234,2228,2238,2199,2187,2228,2206,2244,2306,2178,2208,2195,2223,2245,2254,2225,2175,2212,2161,2216,2207,2228,2208,2238,2188,2188,2220,2158,2193,2243,2202,2211,2181,2182,2192,2193,2225,2177,2241,2208,2215,2224,2208,2213,2223,2216,2196,2175,2199,2208,2215,2205,2198,2171,2190,2229,2201,2241,2230,2206,2198,2191,2187,2225,2202,2185,2196,2187,2157,2214,2189,2216,2186,2199,2219,2162,2225,2195,2230,2284,2210,2201,2225,2215,2228,2227,2220,2219,2180,2179,2212,2222,2227,2232,2216,2191,2176,2189,2240,2210,2210,2321,2219,2169,2216,2181,2197,2201,2245,2187,2192,2199,2214,2215,2218,2249,2192,2202,2251,2230,2192,2242,2255,2232,2212,2246,2240,2236,2211,2234,2220,2254,2225,2209,2238,2222,2235,2241,2234,2243,2311,2235,2213,2246,2257,2202,2192,2227,2269,2214,2215,2233,2178,2261,2245,2257,2231,2296,2225,2211,2246,2230,2252,2224,2325,2203,2234,2220,2242,2253,2271,2237,2242,2239,2250,2273,2218,2239,2237,2246,2307,2248,2256,2231,2232,2238,2249,2293,2273,2229,2242,2232,2268,2247,2251,2266,2248,2258,2221,2279,2233,2238,2267,2278,2295,2272,2238,2253,2290,2222,2263,2257,2237,2254,2264,2278,2246,2249,2259,2252,2294,2254,2252,2282,2289,2285,2253,2281,2242,2295,2254,2291,2281,2264,2261,2314,2258,2241,2305,2235,2281,2246,2243,2273,2268,2265,2344,2286,2264,2263,2272,2296,2334,2282,2282,2290,2267,2340,2302,2289,2277,2282,2292,2273,2277,2279,2254,2291,2288,2268,2291,2301,2290,2289,2317,2284,2316,2292,2271,2343,2297,2264,2276,2296,2283,2369,2276,2310,2349,2315,2314,2396,2296,2294,2280,2271,2424,2307,2288,2407,2333,2267,2311,2386,2288,2265,2319,2354,2291,2358,2300,2298,2321,2329,2280,2307,2308,2412,2432,2287,2322,2303,2326,2331,2358,2306,2321,2305,2344,2327,2355,2306,2307,2298,2321,2304,2308,2287,2279,2314,2332,2276,2310,2303,2332,2317,2304,2340,2332,2307,2299,2287,2310,2283,2273,2319,2323,2389,2329,2349,2313,2315,2351,2307,2409,2333,2305,2313,2333,2342,2360,2372,2327,2338,2336,2310,2355,2309,2321,2360,2404,2358,2357,2333,2328,2353,2299,2330,2349,2347,2339,2377,2330,2342,2391,2347,2376,2359,2352,2343,2398,2342,2373,2356,2357,2410,2348,2363,2343,2335,2334,2480,2385,2391,2349,2397,2331,2383,2433,2321,2369,2390,2363,2331,2326,2349,2342,2375,2375,2379,2378,2387,2337,2447,2341,2439,2395,2385,2401,2520,2394,2393,2275,2252,2242,2243,2231,2221,2226,2225,2219,2206,2210,2203,2210,2202,2208,2230,2206,2208,2199,2209,2206,2202,2204,2196,2193,2207,2208,2202,2201,2202,2198,2193,2194,2199,2194,2193,2189,2191,2197,2193,2193,2203,2197,2186,2191,2207,2189,2190,2200,2202,2197,2199,2201,2194,2195,2191,2197,2197,2203,2197,2202,2189,2202,2202,2191,2196,2195,2193,2192,2197,2185,2207,2194,2196,2201,2202,2191,2213,2207,2209,2202,2188,2202,2217,2205,2220,2208,2218,2196,2215,2216,2200,2208,2205,2199,2209,2215,2222,2216,2219,2217,2209,2207,2200,2213,2213,2219,2209,2212,2218,2202,2207,2219,2209,2220,2213,2226,2209,2204,2211,2214,2215,2215,2208,2217,2217,2213,2203,2216,2218,2211,2227,2217,2227,2227,2226,2221,2220,2216,2221,2221,2228,2234,2220,2228,2222,2235,2228,2225,2231,2233,2229,2219,2230,2228,2222,2223,2223,2222,2233,2225,2224,2223,2236,2236,2237,2237,2234,2239,2248,2232,2244,2237,2260,2237,2250,2248,2246,2255,2247,2250,2252,2244,2246,2243,2248,2257,2239,2258,2261,2243,2240,2236,2248,2248,2255,2257,2252,2269,3823,3845,3848,3847,3833,3838,3830,3842,3846,3855,3851,3839,3851,3849,3845,3846,3828,3838,3829,3827,4217,4299,4312,4299,4306,4326,4319,4320,4326,4324,4324,4322,4317,4320,4320,4324,4326,4313,4320,4333,4326,4312,4321,4325,4319,4311,4311,4318,4315,4326,4329,4311,4312,4308,4327,4331,4321,4320,4325,4326,4315,4317,4332,4315,4317,4323,4310,4317,4312,4317,4310,3197,2828,2722,2668,2648,2636,2627,2619,2619,2621,2625,2621,2607,2622,2619,2624,2615,2620,2624,2639,2659,2595,2534,2495,2444,2453,2381,2358,2345,2334,2339,2302,2279,2264,2296,2258,2235,2213,2211,2195,2283,2192,2205,2197,2177,2168,2207,2205,2175,2199,2211,2176,2162,2199,2152,2181,2152,2182,2162,2181,2198,2161,2176,2194,2163,2183,2159,2146,2128,2166,2145,2175,2162,2123,2115,2150,2130,2162,2172,2152,2162,2167,2156,2151,2183,2151,2164,2135,2147,2192,2136,2186,2193,2153,2140,2206,2153,2184,2158,2167,2215,2298,2138,2152,2160,2162,2150,2167,2143,2176,2177,2154,2196,2150,2151,2118,2122,2122,2142,2170,2166,2135,2163,2190,2139,2139,2208,2162,2159,2163,2157,2145,2177,2135,2181,2156,2184,2259,2147,2127,2158,2159,2180,2187,2154,2126,2179,2197,2135,2135,2144,2114,2176,2170,2156,2164,2212,2176,2174,2252,2191,2179,2161,2149,2201,2206,2178,2205,2203,2174,2154,2273,2170,2165,2229,2198,2170,2214,2183,2189,2128,2157,2196,2188,2198,2206,2147,2175,2209,2146,2191,2189,2188,2192,2181,2168,2206,2145,2170,2201,2191,2192,2163,2196,2194,2174,2189,2199,2194,2176,2198,2188,2185,2144,2172,2211,2177,2181,2174,2215,2184,2212,2184,2201,2193,2200,2234,2206,2187,2275,2191,2177,2201,2177,2181,2217,2204,2223,2192,2211,2367,2207,2251,2178,2190,2218,2197,2210,2176,2314,2224,2212,2206,2205,2227,2228,2219,2184,2196,2236,2177,2240,2199,2192,2219,2194,2316,2191,2218,2234,2200,2228,2208,2220,2230,2222,2249,2223,2226,2172,2208,2214,2249,2205,2218,2247,2211,2204,2207,2186,2241,2246,2201,2254,2221,2268,2230,2213,2238,2243,2313,2199,2254,2227,2232,2264,2213,2241,2241,2222,2217,2209,2289,2261,2217,2226,2257,2229,2326,2239,2238,2274,2287,2242,2257,2262,2300,2233,2277,2278,2252,2267,2261,2263,2244,2260,2219,2231,2263,2249,2255,2270,2329,2330,2285,2288,2308,2255,2260,2276,2283,2330,2264,2272,2334,2267,2274,2273,2279,2264,2236,2261,2257,2257,2282,2272,2266,2333,2275,2313,2301,2286,2284,2247,2289,2270,2355,2319,2301,2256,2288,2275,2285,2312,2281,2293,2252,2275,2275,2263,2260,2281,2277,2350,2270,2282,2283,2304,2289,2312,2282,2312,2262,2280,2293,2285,2267,2294,2272,2267,2263,2269,2289,2270,2288,2277,2325,2295,2301,2270,2294,2310,2262,2335,2270,2288,2292,2312,2310,2282,2266,2357,2297,2311,2327,2336,2359,2295,2282,2310,2323,2265,2353,2303,2300,2298,2310,2333,2362,2321,2345,2363,2319,2327,2335,2351,2396,2301,2309,2325,2306,2321,2320,2328,2335,2336,2343,2336,2318,2343,2330,2285,2361,2287,2340,2328,2395,2327,2336,2305,2322,2327,2328,2384,2336,2334,2332,2306,2328,2322,2313,2323,2349,2321,2319,2320,2357,2370,2342,2308,2323,2319,2379,2349,2324,2371,2343,2363,2335,2332,2326,2321,2329,2315,2320,2305,2324,2324,2329,2337,2252,2262,2234,2226,2223,2225,2216,2216,2210,2214,2200,2202,2211,2211,2209,2199,2186,2203,2191,2200,2188,2207,2188,2171,2190,2201,2188,2202,2202,2193,2199,2185,2182,2189,2188,2190,2179,2193,2181,2201,2210,2193,2199,2198,2198,2192,2191,2193,2182,2184,2190,2200,2196,2197,2206,2203,2202,2197,2191,2190,2187,2187,2202,2191,2198,2181,2189,2179,2191,2197,2199,2187,2198,2201,2200,2203,2199,2202,2199,2190,2215,2197,2204,2203,2196,2203,2209,2195,2203,2199,2206,2205,2203,2213,2207,2209,2203,2196,2212,2206,2204,2199,2200,2211,2204,2220,2195,2216,2218,2218,2217,2214,2210,2208,2218,2211,2219,2218,2210,2215,2218,2209,2224,2217,2226,2216,2212,2218,2219,2222,2217,2216,2221,2216,2222,2210,2222,2210,2221,2215,2218,2215,2219,2212,2207,2217,2231,2220,2229,2235,2233,2229,2219,2224,2232,2217,2234,2222,2236,2218,2225,2232,2233,2222,2239,2228,2244,2242,2242,2232,2223,2229,2228,2239,2231,2233,2233,2240,2243,2233,2246,2249,2247,2235,2248,2248,2241,2253,2243,2236,2246,2244,2242,2249,2249,2260,2259,2259,2246,2260,2271,2295,2299,2329,2352,2341,2356,2375,2380,2330,2404,2408,2416,2433,2441,2437,2454,2468,2462,2479,7945,8460,8694,8871,9041,9140,9242,9272,9330,9345,9354,9374,9376,9370,9345,9391,9403,9386,9396,9401,9390,9394,9407,9390,9388,9405,9392,9402,9401,9396,9402,9384,9388,9388,9379,9387,9391,9382,9388,9384,9372,9380,9393,9368,9365,9360,9367,9365,9359,9360,5264,3993,3499,3320,3239,3195,3141,3135,3105,3080,3071,3053,3030,3015,2971,3021,2997,2997,2997,2979,3065,3014,2985,2941,2836,2798,2790,2836,2764,2697,2655,2683,2645,2643,2652,2620,2734,2638,2659,2565,2619,2705,2655,2619,2677,2618,2604,2631,2587,2633,2631,2617,2681,2611,2625,2629,2575,2593,2645,2707,2603,2622,2641,2693,2541,2639,2618,2622,2610,2575,2624,2628,2667,2621,2741,2610,2583,2746,2641,2608,2610,2599,2613,2611,2621,2689,2588,2596,2630,2517,2676,2605,2601,2591,2588,2630,2600,2619,2634,2652,2612,2649,2627,2649,2592,2617,2601,2682,2619,2600,2626,2576,2617,2605,2524,2704,2598,2608,2593,2636,2582,2601,2585,2587,2627,2581,2587,2680,2602,2629,2621,2599,2613,2580,2618,2644,2613,2607,2585,2558,2616,2617,2605,2601,2648,2603,2621,2619,2605,2610,2599,2607,2610,2600,2639,2626,2712,2644,2598,2621,2591,2593,2616,2617,2605,2557,2598,2617,2606,2618,2625,2609,2615,2724,2604,2608,2615,2672,2602,2586,2664,2622,2610,2581,2622,2665,2589,2591,2592,2558,2568,2609,2592,2611,2640,2603,2590,2646,2673,2675,2604,2596,2577,2590,2634,2647,2634,2606,2594,2641,2580,2606,2609,2642,2541,2610,2585,2620,2576,2616,2623,2593,2651,2616,2584,2613,2596,2624,2619,2615,2612,2615,2578,2607,2631,2590,2654,2669,2642,2570,2597,2583,2611,2670,2582,2605,2626,2602,2631,2695,2584,2620,2629,2596,2603,2609,2620,2629,2607,2681,2587,2590,2626,2602,2546,2588,2591,2617,2617,2639,2611,2705,2566,2576,2612,2617,2689,2636,2632,2600,2628,2632,2616,2670,2692,2620,2613,2597,2586,2551,2632,2594,2605,2602,2588,2578,2611,2620,2605,2642,2612,2764,2613,2614,2639,2627,2612,2596,2643,2635,2593,2642,2614,2657,2560,2626,2606,2610,2609,2731,2604,2635,2659,2637,2625,2595,2700,2575,2621,2604,2598,2591,2601,2631,2602,2592,2567,2611,2616,2551,2616,2614,2608,2615,2581,2604,2629,2715,2603,2621,2617,2614,2593,2596,2601,2676,2620,2592,2591,2620,2611,2590,2632,2594,2522,2555,2615,2600,2597,2582,2628,2590,2611,2609,2623,2610,2616,2590,2595,2625,2629,2600,2599,2590,2612,2635,2662,2642,2601,2562,2600,2664,2605,2584,2622,2712,2629,2615,2619,2710,2610,2600,2613,2614,2608,2624,2604,2602,2626,2625,2590,2614,2646,2598,2567,2631,2683,2633,2660,2674,2611,2623,2642,2736,2588,2625,2604,2644,2607,2596,2599,2615,2606,2587,2617,2666,2631,2692,2621,2585,2661,2729,2635,2614,2607,2634,2579,2652,2654,2637,2627,2646,2613,2614,2625,2664,2619,2614,2617,2604,2596,2605,2653,2612,2631,2659,2586,2609,2610,2681,2664,2633,2616,2607,2609,2616,2593,2644,2654,2620,2611,2637,2693,2620,2605,2660,2621,2622,2647,2615,2620,2647,2647,2605,2605,2629,2603,2627,2603,2674,2608,2646,2628,2627,2574,2774,2613,2633,2645,2621,2641,2615,2639,2614,2623,2630,2616,2608,2645,2634,2521,2511,2494,2482,2470,2468,2465,2463,2464,2463,2444,2459,2440,2448,2435,2439,2443,2434,2428,2415,2428,2435,2432,2433,2430,2421,2425,2437,2438,2426,2420,2421,2437,2413,2424,2422,2421,2425,2411,2421,2414,2433,2420,2428,2410,2418,2413,2405,2405,2415,2409,2414,2418,2424,2415,2415,2416,2403,2429,2412,2414,2417,2405,2412,2412,2412,2421,2417,2400,2397,2401,2419,2406,2412,2426,2419,2410,2408,2413,2407,2411,2413,2416,2431,2416,2415,2420,2415,2414,2407,2419,2417,2420,2411,2410,2418,2406,2423,2415,2424,2425,2408,2394,2424,2420,2407,2403,2414,2410,2415,2420,2420,2414,2414,2415,2398,2427,2415,2424,2410,2407,2420,2411,2404,2406,2416,2410,2416,2424,2413,2411,2418,2411,2413,2419,2407,2413,2416,2428,2411,2409,2420,2414,2415,2394,2407,2416,2411,2410,2412,2408,2415,2412,2400,2410,2422,2413,2416,2412,2410,2428,2416,2416,2413,2418,2405,2407,2416,2413,2404,2411,2414,2418,2418,2411,2397,2414,2414,2414,2420,2418,2407,2406,2397,2420,2419,2409,2416,2421,2418,2422,2420,2424,2410,2400,2420,2419,2419,2432,2237,2243,2265,2270,2283,2297,2297,2313,2333,2323,2331,2357,2369,2362,2388,2390,2400,2402,2398,2420,2436,7612,8389,8701,8967,9174,9366,9494,9588,9663,9687,9726,9757,9760,9767,9796,9807,9794,9791,9791,9807,9804,9783,9798,9788,9801,9785,9790,9789,9794,9782,9765,9773,9767,9762,9770,9773,9763,9750,9769,9743,9767,9750,9752,9747,9751,9747,9750,9765,9749,9747,6081,4796,4230,3970,3838,3764,3700,3651,3618,3579,3569,3535,3508,3496,3481,3458,3436,3436,3409,3413,3465,3355,3308,3170,3041,3009,2922,2868,2847,2845,2785,2754,2763,2716,2706,2750,2693,2714,2703,2690,2736,2702,2717,2689,2697,2707,2696,2803,2679,2707,2642,2650,2679,2680,2720,2739,2685,2693,2683,2747,2640,2791,2670,2786,2659,2664,2691,2654,2622,2624,2696,2733,2676,2666,2700,2700,2701,2661,2662,2679,2664,2750,2703,2677,2760,2655,2732,2641,2663,2626,2670,2688,2661,2679,2644,2649,2648,2685,2677,2661,2669,2679,2670,2676,2674,2668,2679,2664,2674,2687,2689,2702,2650,2689,2763,2663,2686,2679,2672,2664,2671,2772,2651,2669,2669,2660,2656,2717,2649,2682,2656,2777,2619,2627,2671,2676,2673,2662,2685,2654,2644,2663,2662,2651,2715,2652,2671,2665,2664,2728,2655,2729,2642,2653,2672,2643,2655,2641,2658,2660,2645,2643,2663,2690,2661,2696,2651,2624,2655,2670,2669,2662,2646,2670,2639,2679,2683,2653,2704,2667,2663,2668,2691,2658,2637,2671,2692,2677,2663,2639,2670,2667,2714,2658,2657,2638,2718,2652,2666,2656,2631,2659,2673,2627,2730,2669,2674,2667,2671,2702,2669,2639,2789,2709,2662,2671,2665,2667,2662,2744,2675,2707,2666,2751,2776,2673,2763,2683,2661,2675,2660,2685,2674,2663,2677,2649,2656,2695,2655,2669,2667,2667,2682,2628,2708,2674,2784,2691,2682,2785,2675,2660,2678,2666,2654,2651,2669,2696,2710,2668,2732,2705,2680,2646,2688,2724,2666,2666,2678,2725,2673,2675,2666,2665,2684,2739,2675,2746,2683,2653,2680,2702,2659,2673,2654,2723,2685,2644,2700,2700,2664,2671,2696,2653,2685,2729,2692,2685,2654,2680,2682,2675,2664,2695,2643,2691,2654,2685,2709,2693,2686,2667,2737,2668,2718,2655,2718,2732,2753,2678,2712,2675,2739,2672,2685,2690,2642,2672,2667,2675,2689,2797,2668,2670,2672,2687,2671,2690,2668,2783,2679,2674,2699,2721,2730,2683,2836,2639,2672,2662,2693,2668,2628,2680,2677,2680,2676,2654,2665,2629,2684,2644,2765,2641,2768,2694,2707,2682,2693,2671,2725,2672,2770,2688,2681,2685,2698,2715,2760,2721,2690,2689,2692,2720,2684,2703,2693,2670,2655,2655,2721,2658,2708,2685,2727,2698,2672,2721,2694,2756,2720,2677,2683,2762,2682,2684,2712,2668,2685,2656,2702,2668,2708,2712,2704,2725,2708,2683,2678,2699,2666,2722,2703,2729,2683,2708,2672,2698,2689,2704,2694,2694,2694,2699,2668,2713,2678,2671,2669,2655,2684,2680,2670,2735,2869,2708,2704,2681,2664,2684,2672,2771,2694,2792,2851,2664,2704,2704,2677,2646,2683,2669,2698,2843,2686,2679,2679,2680,2681,2729,2657,2649,2659,2689,2672,2713,2672,2690,2826,2687,2713,2665,2692,2748,2686,2704,2729,2665,2677,2695,2706,2692,2696,2670,2706,2698,2707,2696,2721,2753,2720,2692,2686,2692,2667,2685,2700,2666,2668,2774,2759,2698,2767,2655,2679,2676,2731,2680,2687,2715,2610,2563,2550,2532,2537,2506,2522,2502,2507,2503,2495,2519,2486,2478,2482,2510,2482,2482,2493,2475,2469,2467,2479,2486,2468,2460,2467,2465,2469,2464,2467,2461,2458,2458,2467,2470,2467,2461,2452,2460,2457,2449,2455,2451,2452,2442,2456,2460,2443,2459,2455,2447,2457,2449,2470,2460,2451,2444,2448,2439,2449,2448,2444,2455,2442,2448,2444,2441,2442,2442,2443,2449,2448,2445,2448,2453,2446,2447,2436,2435,2444,2447,2439,2445,2442,2428,2431,2436,2435,2434,2432,2428,2425,2438,2440,2430,2445,2440,2436,2438,2438,2423,2431,2434,2432,2428,2438,2446,2437,2429,2443,2445,2448,2445,2439,2441,2431,2426,2434,2428,2440,2433,2434,2423,2427,2428,2454,2446,2442,2442,2428,2419,2437,2435,2436,2441,2427,2438,2435,2442,2437,2431,2451,2435,2434,2445,2449,2431,2432,2442,2429,2429,2430,2430,2446,2446,2439,2444,2428,2432,2420,2447,2438,2434,2430,2447,2435,2445,2437,2431,2436,2444,2433,2431,2422,2433,2442,2415,2430,2435,2433,2435,2433,2422,2441,2430,2427,2422,2429,2433,2429,2447,2449,2436,2440,2423,2427,2428,2442,2192,2222,2233,2250,2261,2275,2281,2290,2293,2306,2316,2324,2338,2346,2350,2368,2371,2372,2380,2396,2396,7442,8393,8750,9002,9261,9481,9647,9776,9867,9954,10016,10050,10084,10101,10119,10145,10153,10138,10159,10184,10175,10175,10174,10167,10185,10182,10193,10186,10185,10184,10172,10178,10192,10181,10169,10172,10176,10166,10182,10176,10176,10172,10186,10178,10176,10176,10169,10176,10189,10180,7170,6191,5680,5407,5236,5094,5007,4923,4870,4810,4749,4714,4670,4641,4595,4566,4520,4507,4484,4455,4325,4017,3762,3551,3465,3302,3226,3167,3144,3084,3040,3033,2983,3051,2978,3012,2924,2933,2924,2928,2928,2903,2883,2875,2896,2948,2846,2861,2887,2845,2858,2869,2862,2861,2867,2877,2846,2885,2842,2843,2863,2836,2860,2866,2850,2827,2839,2912,2843,2876,2910,2832,2846,2886,2896,2863,2836,2827,2859,2850,2860,2967,2863,2861,2858,2822,2840,2891,2847,2868,2855,2913,2878,2836,2833,2914,2878,2979,2843,2853,3100,2884,2851,2881,2836,2864,2798,2818,2877,2905,2848,2863,2871,2875,2870,2832,2830,2850,2880,2951,2805,2883,2908,2821,2837,2820,2829,2825,2850,2823,2840,2847,2859,2808,2809,2907,2798,2856,2830,2823,2824,2830,2870,2841,2833,2816,2882,2923,2814,2819,2815,2824,2801,2792,2815,2839,2931,2857,2813,2827,2803,2811,2815,2819,2835,2848,2800,2846,2807,2873,2804,2795,2828,2794,2811,2875,2822,2786,2824,2799,2821,2868,2843,2829,2806,2802,2834,2803,2846,2866,2834,2815,2789,2818,2806,2811,2821,2788,2819,2809,2780,2812,2825,2821,2807,2834,2837,2801,2856,2823,2805,2837,2819,2812,2798,2861,2833,2810,2882,2831,2853,2819,2852,2792,2816,2791,2837,2829,2832,2835,2838,2808,2788,2821,2823,2860,2825,2852,2794,2820,2819,2837,2821,2834,2895,2807,2831,2812,2828,2826,2939,2808,2808,2855,2836,2826,2832,2825,2820,2824,2810,2854,2843,2828,2797,2814,2885,2858,2807,2890,2838,2835,2809,2803,2836,2838,2823,2814,2813,2842,2842,2937,2805,2813,2801,2832,2837,2870,2818,2838,2830,2828,2849,2854,2812,2868,2834,2826,2859,2820,2827,2806,2791,2864,2825,2836,2894,2829,2824,2828,2825,2836,2811,2842,2881,2846,2840,2872,2824,2862,3000,2809,2843,2848,2832,2913,2882,2814,2822,2818,2839,2824,2796,2815,2834,2815,2870,2887,2843,2852,2823,2849,2845,2826,2854,2874,2816,2827,2837,2858,2867,2831,2828,2827,2825,2833,2851,2847,2833,2825,2819,2850,2814,2988,2869,2894,2824,2879,2844,2826,2895,2826,2799,2866,2865,2825,2780,2832,2808,2873,2878,2826,2864,2902,2867,2793,2878,2826,2926,2821,2841,2813,2834,2838,2819,2829,2825,2854,2820,2843,2872,2795,2886,2892,2855,2992,2799,2836,2842,2836,2831,2842,2853,2969,2802,2891,2826,2815,2995,2913,2808,2786,2810,2884,2836,2801,2833,2824,2911,2855,2823,2819,2842,2831,2810,2798,2834,2828,2844,2811,2822,2882,2813,2820,2863,2864,2863,2846,2830,2820,2814,2939,2841,2863,2867,2814,2828,2886,2827,2851,2870,2847,2839,2833,2856,2822,2853,2809,2842,2843,2808,2900,2871,2882,2839,2833,2842,2879,2848,2827,2821,2898,2882,2954,2852,2818,2856,2868,2853,2841,2820,2826,2850,2821,2856,2849,2814,2832,2826,2811,2893,2833,2811,2816,2848,2886,2867,2848,2872,2855,2812,2845,2898,2968,2830,2837,2875,2822,2829,2810,2747,2712,2672,2649,2631,2625,2607,2598,2588,2591,2581,2560,2559,2561,2564,2552,2563,2544,2541,2544,2553,2545,2530,2537,2523,2532,2538,2538,2524,2520,2524,2510,2519,2519,2511,2522,2517,2521,2511,2500,2524,2522,2523,2510,2515,2516,2507,2503,2512,2508,2513,2501,2519,2509,2504,2498,2510,2502,2507,2502,2496,2490,2499,2499,2494,2510,2501,2483,2493,2479,2492,2490,2498,2496,2494,2502,2485,2491,2501,2498,2494,2483,2481,2490,2486,2485,2481,2493,2480,2479,2489,2491,2491,2496,2483,2490,2481,2479,2477,2484,2480,2481,2494,2478,2500,2490,2475,2475,2490,2481,2475,2483,2496,2482,2496,2489,2471,2475,2472,2478,2484,2477,2487,2481,2479,2480,2477,2474,2477,2476,2473,2479,2472,2476,2467,2477,2459,2461,2463,2483,2472,2482,2482,2476,2488,2480,2469,2474,2473,2478,2476,2480,2470,2490,2466,2471,2473,2480,2473,2468,2482,2471,2469,2476,2470,2470,2476,2484,2475,2470,2481,2470,2476,2485,2468,2477,2476,2460,2462,2479,2479,2471,2481,2464,2467,2470,2487,2466,2476,2471,2472,2477,2467,2475,2485,2488,2476,2485,2469,2209,2235,2234,2254,2251,2271,2276,2296,2317,2315,2329,2350,2338,2351,2361,2370,2377,2379,2392,2389,2412,2411,2419,2436,2431,2438,2440,2450,2459,2459,2469,2461,2463,2464,2466,2472,2484,2486,2491,2484,2509,2500,2505,2512,2506,2518,2525,2508,2513,2508,2532,2516,2527,2522,2545,2543,2521,2528,2528,2534,2528,2543,2535,2536,2546,2544,2548,2531,2540,2541,2545,2538,2564,2537,2549,2542,2558,2556,2549,2552,2545,2541,2543,2554,2540,2558,2555,2565,2554,2542,2555,2544,2555,2556,2560,2555,2562,2546,2566,2551,2548,2548,2543,2550,2548,2547,2541,2545,2548,2555,2541,2545,2551,2560,2549,2552,2545,2548,2562,2555,2567,2562,2550,2565,2546,2559,2557,2571,2551,2558,2552,2556,2555,2552,2560,2562,2557,2566,2573,2558,2558,2556,2557,2558,2562,2565,2566,2551,2562,2561,2563,2561,2559,2558,2569,2568,2566,2567,2563,2565,2571,2570,2560,2555,2575,2562,2569,2566,2548,2554,2566,2559,2557,2560,2563,2574,2566,2558,2578,2573,2568,2559,2568,2553,2555,2570,2554,2569,2572,2569,2567,2564,2570,2570,2564,2575,2567,2569,2573,2574,2576,2577,2563,2566,2581,2569,2559,2573,2570,2556,2581,2563,2579,2582,2588,2579,2580,2573,2577,2584,2581,2587,2578,2575,2582,2579,2577,2574,2580,2584,2573,2575,2570,2572,2567,2574,2576,2565,2578,2571,2588,2571,2577,2586,2579,2588,2591,2572,2576,2574,2589,2582,2586,2573,2582,2584,2583,2590,2578,2588,2574,2584,2578,2579,2573,2588,2582,2573,2592,2592,2577,2576,2590,2587,2596,2589,2592,2576,2586,2591,2586,2593,2583,2594,2604,2604,2590,2587,2593,2600,2601,2602,2599,2586,2583,2590,2604,2600,2587,2593,2600,2599,2600,2598,2585,2591,2602,2603,2601,2604,2596,2595,2598,2593,2595,2591,2595,2600,2598,2593,2602,2601,2605,2597,2612,2602,2616,2603,2600,2586,2594,2606,2609,2607,2607,2606,2598,2612,2611,2602,2610,2611,2608,2604,2606,2620,2611,2599,2600,2601,2617,2596,2605,2594,2599,2610,2614,2604,2609,2606,2604,2605,2606,2594,2599,2614,2606,2605,2601,2597,2617,2613,2610,2604,2618,2607,2622,2620,2603,2620,2617,2611,2612,2613,2608,2633,2625,2606,2605,2612,2618,2623,2626,2617,2611,2610,2608,2617,2604,2616,2624,2625,2626,2611,2605,2611,2615,2613,2618,2616,2613,2623,2612,2624,2631,2611,2608,2621,2635,2627,2621,2623,2629,2625,2624,2631,2628,2627,2631,2634,2633,2624,2624,2629,2628,2633,2636,2635,2615,2615,2629,2631,2628,2626,2616,2643,2624,2618,2624,2637,2629,2638,2634,2610,2624,2626,2630,2621,2622,2617,2622,2627,2625,2621,2629,2640,2631,2619,2642,2618,2622,2624,2626,2628,2634,2636,2634,2623,2641,2639,2647,2645,2650,2647,2635,2645,2632,2653,2643,2647,2632,2648,2647,2639,2638,2627,2648,2645,2649,2647,2649,2645,2650,2637,2647,2650,2650,2639,2648,2650,2638,2644,2645,2651,2651,2650,2660,2650,2658,2652,2653,2646,2646,2642,2648,2649,2638,2650,2649,2636,2640,2659,2651,2651,2662,2651,2645,2640,2631,2651,2655,2661,2646,2642,2663,2653,2664,2652,2662,2651,2652,2660,2657,2657,2652,2654,2652,2654,2660,2663,2663,2661,2648,2656,2656,2640,2651,2657,2654,2652,2660,2659,2671,2664,2653,2661,2659,2661,2657,2650,2651,2647,2663,2660,2650,2662,2659,2663,2656,2671,2656,2650,2653,2655,2659,2657,2661,2659,2667,2670,2667,2668,2662,2656,2660,2664,2674,2665,2664,2654,2669,2673,2671,2668,2661,2651,2662,2668,2667,2664,2664,2679,2666,2665,2680,2667,2665,2687,2684,2676,2662,2676,2677,2673,2677,2675,2667,2676,2678,2683,2690,2671,2678,2680,2682,2678,2669,2666,2679,2677,2681,2668,2678,2694,2670,2669,2680,2667,2675,2683,2684,2676,2674,2684,2684,2663,2666,2688,2681,2692,2679,2695,2681,2689,2686,2687,2675,2680,2687,2674,2692,2688,2693,2688,2674,2695,2692,2672,2692,2696,2692,2694,2679,2687,2687,2691,2684,2685,2685,2679,2684,2682,2688,2697,2695,2702,2681,2687,2693,2694,2695,2695,2678,2696,2682,2687,2677,2697,2689,2702,2689,2685,2693,2698,2686,2697,2702,2691,2682,2691,2692,2694,2691,2697,2700,2693,2693,2700,2695,2700,2697,2691,2694,2694,2686,2700,2693,2688,2700,2705,2704,2702,2702,2702,2697,2708,2701,2697,2703,2701,2695,2696,2708,2709,2704,2698,2717,2701,2694,2695,2713,2714,2714,2713,2701,2703,2708,2709,2697,2712,2706,2715,2710,2702,2715,2710,2715,2696,2713,2710]}]]}","md5hash":"5858c9bbc61bb2284f5c69b55afe2e89","created_at":"2016-03-20T19:11:02.681Z","updated_at":"2016-03-20T19:53:16.473Z","is_deleted":false,"creator":{"name":"Rodrigo Gomez","id":767,"email":"rgomez@ibr-conicet.gov.ar","bio":"","institute":"IBR","profile_url":"https://photosynq.org/users/rodrigo-gomez","contributions":1001,"projects":16,"collaborations":0,"avatar":{"original":"https://photosynq.org/users/rodrigo-gomez/default_avatar.png","thumb":"https://photosynq.org/users/rodrigo-gomez/default_avatar.png","medium":"https://photosynq.org/users/rodrigo-gomez/default_avatar.png"},"latest_activity":"2016-10-18T19:51:09.536Z","badges":[{"name":"","url":""}]}},"creator":{"name":"Rodrigo Gomez","id":767,"email":"rgomez@ibr-conicet.gov.ar","bio":"","institute":"IBR","profile_url":"https://photosynq.org/users/rodrigo-gomez","contributions":1001,"projects":16,"collaborations":0,"avatar":{"original":"https://photosynq.org/users/rodrigo-gomez/default_avatar.png","thumb":"https://photosynq.org/users/rodrigo-gomez/default_avatar.png","medium":"https://photosynq.org/users/rodrigo-gomez/default_avatar.png"},"latest_activity":"2016-10-18T19:51:09.536Z","badges":[{"name":"","url":""}]}},{"id":465,"name":"MultispeQ v1.0 - Photosynthesis II (ECS, Phi(PSII), Phi(NPQ), Phi(NO))","slug":"multispeq-v1-0-photosynthesis-ii-ecs-phi-psii-phi-npq-phi-no","description":"Photosynthesis protocol which includes ECS, Phi2, and other similar protocols.  Now properly calls using the \"recall\" function","pre_selected":false,"macro_id":170,"protocol_json":{"recall":["colorcal_blank1[1]","colorcal_blank1[2]","colorcal_blank1[3]","colorcal_blank1[4]","colorcal_blank1[6]","colorcal_blank1[8]","colorcal_blank1[9]","colorcal_blank1[10]","colorcal_blank2[1]","colorcal_blank2[2]","colorcal_blank2[3]","colorcal_blank2[4]","colorcal_blank2[6]","colorcal_blank2[8]","colorcal_blank2[9]","colorcal_blank2[10]","colorcal_blank3[1]","colorcal_blank3[2]","colorcal_blank3[3]","colorcal_blank3[4]","colorcal_blank3[6]","colorcal_blank3[8]","colorcal_blank3[9]","colorcal_blank3[10]"],"environmental":[["light_intensity",0],["temperature_humidity_pressure1",0],["temperature_humidity_pressure2",0],["contactless_temp",0],["thickness_raw",0],["compass_and_angle",0]],"pulses":[4000,300,300,300,100,20,30,10,10,10,30,20,400,150,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"a_lights":[[2],[2],[0],[2],[2],[2],[2],[2],[2],[2],[2],[2],[9],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"a_intensities":[["light_intensity"],["light_intensity"],[0],["light_intensity"],["light_intensity"],["light_intensity"],[4500],[4050],[3600],[3150],[4500],["light_intensity"],[400],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"pulsedistance":[1000,1000,1000,1000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000],"m_intensities":[[0],[2000],[2000],[2000],[0],[2000],[2000],[2000],[2000],[2000],[2000],[2000],[0],[2000],[300],[5000],[500],[550],[175],[150],[500],[600],[300],[5000],[500],[550],[175],[150],[350],[450],[850],[5500],[1500],[1950],[275],[250],[500],[2000]],"pulsesize":[2,2,2,2,30,30,30,30,30,30,30,30,30,30,2,2,2,2,2,2,2,6,20,20,20,20,20,20,20,60,60,60,60,60,60,60,60,60],"detectors":[[0],[3],[3],[3],[0],[1],[1],[1],[1],[1],[1],[1],[0],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1]],"meas_lights":[[0],[1],[1],[1],[0],[3],[3],[3],[3],[3],[3],[3],[0],[3],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10]],"averages":1,"protocol_id":465},"created_at":"2016-05-06T14:40:09.599Z","updated_at":"2016-06-29T11:26:07.937Z","is_deleted":false,"md5hash":"2d2985a320a16c313e5030ee9a3c2187","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqproduction.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":170,"name":"v1.0 PhotosynthesisII (ECS, Phi(PSII), Phi(NPQ), Phi(NO))","slug":"v1-0-photosynthesisii-ecs-phi-psii-phi-npq-phi-no","description":"Photosynthesis protocol which includes ECS, Phi2, and other similar protocols","default_y_axis":"PhiNPQ","default_x_axis":"Phi2","javascript_code":"// CALCULATIONS FOR PROTON MOTIVE FORCE VIA ECS PORTION OF THE TRACE\n//----------------------------\n\nvar output = {};\nvar spad;\nvar data = json.data_raw;\nvar vhplus;\nvar tau;\nvar ECSt;\nvar quality_flag = 0;\nvar i = 0;\nvar j = 0;\nvar h = 0;\nvar k = 0;\n\nvar smooth1 = data.slice(300,600);\nvar smooth0 = data.slice(300,600);\n\n// points 300 and 301 can be affected by electronic blips, so we set them == to the average of the previous 'on' values\n//----------------------------\nvar fixit = MathMEAN(json.data_raw.slice(230,290));\nsmooth1[0] = fixit;\nsmooth1[1] = fixit;\nsmooth0[0] = fixit;\nsmooth0[1] = fixit;\n\n// create an rolling average for every 2 measurements.  Then repeat with ever 3.  Then 4, etc.  Then repeat that process 5 times.\n//----------------------------\n\nvar tbsmooth = 0;\n\n// first just smooth out the big bumps\n//----------------------------\nfor (k=0;k\u003c15;k++) {\n  for (h=2;h\u003c3;h++) {\n    for (j=1;j\u003c296;j++) {\n      tbsmooth = 0;\n      for (i=0;i\u003ch;i++) {\n        tbsmooth += smooth1[i+j];  // sum current point + next point\n      }\n      smooth1[j] = MathROUND(tbsmooth/h,0);\n    }\n  }\n}\n\n// then roll out the kinks\n//----------------------------\nfor (k=0;k\u003c7;k++) {\n  for (h=2;h\u003c5;h++) {\n    for (j=1;j\u003c296;j++) {\n      tbsmooth = 0;\n      for (i=0;i\u003ch;i++) {\n        tbsmooth += smooth1[i-1+j];  // sum previous 1 point + next h-1 point(s)\n      }\n      smooth1[j] = MathROUND(tbsmooth/h,0);\n    }\n  }\n}\n\n// calculate ECSt\nmax = MathMEAN(smooth1.sort().slice(10,299));\nvar min = smooth1[0];\nECSt = max - min;\n\n// Calculate GH+ by finding the 1/e point in the dark period\n//----------------------------\nvar tmpval;\nvar howclose_e = 1;\nvar tmpslope = 0;\nvar close_e = [];\nvar slope_e = [];\nfor (k=0;k\u003c299;k++) {\n  tmpval = (smooth1[k]-min)/(max-min);\n  howclose_e = (1/Math.E - tmpval);\n  close_e[k] = MathROUND((1/Math.E - tmpval),3);\n  // if slope is largest, then choose it for vhplus up to tau\n  if (((smooth1[k+1]-min)/(max-min) - tmpval) \u003e tmpslope) {\n    vhplus = (smooth1[k+1]-min)/(max-min) - tmpval;\n  }\n  tmpslope = (smooth1[k+1]-min)/(max-min) - tmpval;\n  slope_e[k] = MathROUND((smooth1[k+1]-min)/(max-min) - tmpval,4);\n  // once you hit tau, then stop iterating\n  if (howclose_e \u003c 0) {\n    tau = (smooth1[k]-min)/(max-min);\n    break;\n  }\n}\n\n// Check for data quality issues and add warning or danger flags\n//----------------------------\nvar st_dev_on = MathSTDEV(json.data_raw.slice(20,290));\nif (st_dev_on \u003e 50) {\n\tdanger('noisy data when calculating ECSt, vhplus and ghplus',output);\n}\nif (vhplus \u003c 0 || tau \u003c 0 || ECSt \u003c 0) {\n\twarning('vhplus, ghplus, or ECSt are negative, which is the opposite of the expected response.  Please check the raw trace and seriously consider excluding this point.',output);\n}\n\noutput [\"ECSt\"] = MathROUND(ECSt,2);\noutput [\"vhplus\"] = MathROUND(vhplus,3);\noutput [\"ghplus\"] = MathROUND(1/tau,4);\n//output [\"close_e\"] = close_e;\n//output [\"slope_e\"] = slope_e;\n//output [\"smooth1\"] = smooth1;\n//output [\"smooth0\"] = smooth0;\n\n\n// CALCULATIONS FOR ABSORBANCE / SPAD PORTION OF THE TRACE\n//----------------------------\n\nvar abs_starts = 1180; // when does the Phi2 measurement start\nvar data = json.data_raw;\nvar lights = [1,2,3,4,6,8,9,10];// define the lights to have absorbance measured\nvar raw_at_blank1 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank2 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank3 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank1 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank2 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank3 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank1 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank2 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank3 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank1 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank2 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank3 = [0,0,0,0,0,0,0,0];\nvar minolta_spad1 = 0;\nvar minolta_spad2 = 0;\nvar minolta_spad3 = 0;\nvar minolta_spad = 0;\nvar minolta_spad_averages = 0;\nvar choose = 0;\nvar light;\nvar pulses = 10;// number of pulses in a cycle\n\n/* // this is what the recall object looks like --\u003e \n\"recall\":{\"colorcal_blank1[1]\":0.000000,\"colorcal_blank1[2]\":0.000000,\"colorcal_blank1[3]\":0.000000,\"colorcal_blank1[4]\":0.00000\n0,\"colorcal_blank1[6]\":0.000000,\"colorcal_blank1[8]\":0.000000,\"colorcal_blank1[9]\":0.000000,\"colorcal_blank1[10]\":0.000000,\"colo\nrcal_blank2[1]\":0.000000,\"colorcal_blank2[2]\":0.000000,\"colorcal_blank2[3]\":0.000000,\"colorcal_blank2[4]\":0.000000,\"colorcal_bla\nnk2[6]\":0.000000,\"colorcal_blank2[8]\":0.000000,\"colorcal_blank2[9]\":0.000000,\"colorcal_blank2[10]\":0.000000,\"colorcal_blank3[1]\"\n:0.000000,\"colorcal_blank3[2]\":0.000000,\"colorcal_blank3[3]\":0.000000,\"colorcal_blank3[4]\":0.000000,\"colorcal_blank3[6]\":0.00000\n0,\"colorcal_blank3[8]\":0.000000,\"colorcal_blank3[9]\":0.000000,\"colorcal_blank3[10]\":0.000000},\n*/\n\n/*\n** Loop through the lights.  If it's zero, skip it.  If it's not in the acceptable range (\u003e500 but \u003c65534 (max)) skip it.\n** Then choose the first blank (starting with 1 moving to 3) which fulfills this criteria\n** Otherwise, calculate absorbance and transmittance and a 'spad'-like value using LED 6 (940 on clamp) to calibrate thickness\n*/\n//----------------------------\n\nfor (var i = 0;i\u003clights.length;i++) { // loop through and save one averaged 'point' for each of the cycles\n  light = lights[i];\n  raw_at_blank1[light] = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+2),(abs_starts + i*pulses+8)));\n  raw_at_blank2[light] = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+82),(abs_starts + i*pulses+88)));\n  raw_at_blank3[light] = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+162),(abs_starts + i*pulses+168)));\n  if (json.recall[\"colorcal_blank1[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 500 \u0026\u0026 raw_at_blank1[light] \u003c 65534) {\n    abs_at_blank1[light] = MathROUND(-1*MathLOG(raw_at_blank1[light]/json.recall[\"colorcal_blank1[\"+light+\"]\"]),3);\n//    trans_at_blank1[light] = MathROUND(raw_at_blank1[light]/json.recall[\"colorcal_blank1[\"+light+\"]\"],3);\n//\toutput [\"light\".concat(light.toString(),\"_transmittance\")]  = trans_at_blank1[light];\n    output [\"light\".concat(light.toString(),\"_absorbance\")]  = abs_at_blank1[light];\n//\toutput [\"light\".concat(light.toString(),\"_raw1\")]  = raw_at_blank1[light];\n//\toutput [\"light\".concat(light.toString(),\"_blank1\")]  = json.recall[\"colorcal_blank1[\"+light+\"]\"];\n  }\n}\n\n\n\n// ok so we need to also include the 940 signal requirements here, like --\u003e\n\n//  if (json.recall[\"colorcal_blank1[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 500 \u0026\u0026 raw_at_blank1[light] \u003c 65534\n//\t\t\u0026\u0026 raw_at_blank1[6] \u003e 500 \u0026\u0026 raw_at_blank1[6] \u003c 65534 ) {\n\n\n// so the raw value needs to be \u003e2000, while the 940 needs to be greater than 5000, otherwise it's out of range\n// may need to include an out of range flag high and low here.\n// maybe set this up so it chooses the best one (optimal range), and includes an output stating the quality of the range fit... (?)\n\nfor (var i = 0;i\u003c4;i++) { // loop through and save one averaged SPAD value for each of the cycles.  If we have additional calibration values (like minolta spad) use those and output that value\n  light = lights[i];\n  var averages = 0;\n  if (json.recall[\"colorcal_blank2[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank2[light] \u003e 750 \u0026\u0026 raw_at_blank2[light] \u003c 65534 \n    \u0026\u0026 raw_at_blank2[6] \u003e 3000 \u0026\u0026 raw_at_blank2[6] \u003c 65534) {\n\tspad_at_blank2[light] = MathROUND(100*MathLOG((raw_at_blank2[6] / json.recall[\"colorcal_blank2[6]\"])/(raw_at_blank2[light] / json.recall[\"colorcal_blank2[\"+light+\"]\"])),2);\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad2 = (spad_at_blank2[2] - json.recall[\"colorcal_intensity2_yint[2]\"]) / json.recall[\"colorcal_intensity2_slope[2]\"];\n      output [\"light\".concat(light.toString(),\"_minolta_spad2\")]  = MathROUND(minolta_spad2,2);\n//      minolta_spad = minolta_spad + minolta_spad2;\n      choose = 2;\n    }\n    else {\n      output [\"light\".concat(light.toString(),\"_spad2\")]  = MathROUND(spad_at_blank2[light],2);\n    }\n    averages++;\n  }\n  else if (json.recall[\"colorcal_blank1[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 2000 \u0026\u0026 raw_at_blank1[light] \u003c 65534 \n    \u0026\u0026 raw_at_blank1[6] \u003e 5000 \u0026\u0026 raw_at_blank1[6] \u003c 65534) {\n\tspad_at_blank1[light] = MathROUND(100*MathLOG((raw_at_blank1[6] / json.recall[\"colorcal_blank1[6]\"])/(raw_at_blank1[light] / json.recall[\"colorcal_blank1[\"+light+\"]\"])),2);\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad1 = (spad_at_blank1[2] - json.recall[\"colorcal_intensity1_yint[2]\"]) / json.recall[\"colorcal_intensity1_slope[2]\"];\t\n      output [\"light\".concat(light.toString(),\"_minolta_spad1\")]  = MathROUND(minolta_spad1,2);\n//      minolta_spad = minolta_spad + minolta_spad1;\n      choose = 1;\n    }\n    else {\n      output [\"light\".concat(light.toString(),\"_spad1\")]  = MathROUND(spad_at_blank1[light],2);\n    }\n    averages++;\n  }\n  else if (json.recall[\"colorcal_blank3[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank3[light] \u003e 750 \u0026\u0026 raw_at_blank3[light] \u003c 65534 \n    \u0026\u0026 raw_at_blank3[6] \u003e 3000 \u0026\u0026 raw_at_blank3[6] \u003c 65534) {\n\tspad_at_blank3[light] = MathROUND(100*MathLOG((raw_at_blank3[6] / json.recall[\"colorcal_blank3[6]\"])/(raw_at_blank3[light] / json.recall[\"colorcal_blank3[\"+light+\"]\"])),2);\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad3 = (spad_at_blank3[2] - json.recall[\"colorcal_intensity3_yint[2]\"]) / json.recall[\"colorcal_intensity3_slope[2]\"];\n      output [\"light\".concat(light.toString(),\"_minolta_spad3\")]  = MathROUND(minolta_spad3,2);\n//      minolta_spad = minolta_spad + minolta_spad3;\n//      minolta_spad_averages = averages + 1;\t\t\t\t\t\t\t// need a global variable for SPAD to output the averaged value\n\tchoose = 3;\n    }\n    else {\n      output [\"light\".concat(light.toString(),\"_spad3\")]  = MathROUND(spad_at_blank3[light],2);\n    }\n    averages++;\n  }\n  output [\"light\".concat(light.toString(),\"_spad\")]  = MathROUND((spad_at_blank1[light] + spad_at_blank2[light] + spad_at_blank3[light])/averages,2);\n}\n\n// calculate chlorophyll content SPAD values with Minolta SPAD calibration --\u003e\n\n\nif (choose == 0) {\n    output [\"SPAD\"]  = 0;\n    output [\"SPAD intensity\"]  = 0;\n  \t\n\tdanger(\"Chlorophyll content SPAD is outside the acceptable range.  The leaf may be too thick, too thin, or have holes in it.\", output);\n}\nelse if (choose == 1) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad1,2);\n    output [\"SPAD intensity\"]  = 1;\n    if (minolta_spad1 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad1 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\nelse if (choose == 2) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad2,2);\n    output [\"SPAD intensity\"]  = 2;\n\tif (minolta_spad2 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad2 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\nelse if (choose == 3) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad3,2);\n    output [\"SPAD intensity\"]  = 3;\n\tif (minolta_spad3 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad3 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\n\n// consider adding some warnings here... could be noisy, but also if the signal is \u003e blank (suggest to recalibate?)\n\n\n// CALCULATIONS FOR PHI2 PORTION OF THE TRACE\n//----------------------------\n\n// calculate the ir baseline for LED 3 which is used as the measuring light.  This subtract IR generated by the LED from the IR generated by the plant\n//----------------------------\nvar sample_cal = json.detector_read1;\n\nvar shinyness = (sample_cal-json.recall[\"ir_baseline_yint[5]\"])/json.recall[\"ir_baseline_slope[5]\"]; // where 0 is dull black electrical tape, and 1 is shiny aluminum\nvar baseline = json.recall[\"ir_baseline_slope[3]\"]*shinyness+json.recall[\"ir_baseline_yint[3]\"];\n\nif (!baseline || !json.recall[\"ir_baseline_yint[5]\"] || sample_cal == 65535) {\t\t\t\t\t\t// if it hasn't been calibrated or there's an error or it's maxed, set baseline == 0\n  baseline = 0;\n}\n\n/*\noutput[\"shinyness\"] = shinyness;\noutput[\"baseline\"] = baseline;\noutput[\"recall led slope\"] = json.recall[\"ir_baseline_slope[3]\"];\noutput[\"recall led yint\"] = json.recall[\"ir_baseline_yint[3]\"];\noutput[\"recall cal slope\"] = json.recall[\"ir_baseline_slope[5]\"];\noutput[\"recall cal yint\"] = json.recall[\"ir_baseline_yint[5]\"];\noutput[\"sample led\"] = json.detector_read1;\n*/\n\n//var sample_cal = MathMEAN(data.slice(2,18));\n\nvar inverse_intensity = [1/4500,1/4050,1/3600,1/3150];\nvar ps2_starts = 900; // when does the Phi2 measurement start\n\n// Set our Apparent FmPrime, 3 FmPrime steps, and Fs to calculate both traditional fv/fm and new Multi-phase flash fv/fm\n//----------------------------\nvar Fs = MathMEAN(data.slice(ps2_starts + 1,ps2_starts + 4)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar Fs_std = MathSTDEV(data.slice(ps2_starts + 1,ps2_starts + 4)); // create standard deviation for this value for error checking\n\nvar sat_vals = data.slice(ps2_starts + 25,ps2_starts + 48).sort();  // sort the saturating light values from low to high\nvar AFmP = MathMEAN(sat_vals.slice(2,20)) - baseline; // take the 18 largest values and average them\nvar AFmP_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checkingjson.data_raw.slice(953,955)\n\nsat_vals = data.slice(ps2_starts + 84,ps2_starts + 110).sort();  // sort the saturating light values from low to high\nvar FmP_end = MathMEAN(sat_vals.slice(2,23)) - baseline; // take the 21 largest values and average them\nvar FmP_end_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 52,ps2_starts + 60).sort();  // sort the saturating light values from low to high\nvar FmP_step1 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step1_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 62,ps2_starts + 70).sort();  // sort the saturating light values from low to high\nvar FmP_step2 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step2_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 72,ps2_starts + 80).sort();  // sort the saturating light values from low to high\nvar FmP_step3 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step3_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\n// Calculations for F0'\n// ----------------------------\nvar FoPrime_values = json.data_raw.slice(ps2_starts + 160,ps2_starts + 270).sort();\nvar FoPrime = MathMEAN(FoPrime_values.slice(5,10)) - baseline;\nvar FoPrime_std = MathSTDEV(FoPrime_values); // create standard deviation for this value for error checking\n\n// Calculations for corrected FmPrime using multi-phase flash\n// ----------------------------\nvar reg = MathLINREG(inverse_intensity, [AFmP,FmP_step1,FmP_step2,FmP_step3]);\n\n// Calculate Phi2 w/ and w/out multi-phase flash\n// ----------------------------\nvar fvfm_noMPF = (AFmP-Fs)/AFmP;\nvar fvfm_MPF = (reg.b-Fs)/reg.b;\n\n\n// Calculate NPQt, PhiNPQ, PhiNO, qL w/ and w/out multi-phase flash\n// ----------------------------\nvar npqt_MPF = (4.88 / ((reg.b / FoPrime) -1) )-1;\nvar npqt_noMPF = (4.88 / ((AFmP / FoPrime) -1) )-1;\nvar qL_MPF = ((reg.b - Fs)*FoPrime)/((reg.b-FoPrime)*Fs);\nvar qL_noMPF = ((AFmP - Fs)*FoPrime)/((AFmP-FoPrime)*Fs);\nvar PhiNO_MPF = 1/(npqt_MPF + 1 + qL_MPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNO_noMPF = 1/(npqt_noMPF + 1 + qL_noMPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNPQ_MPF = 1-fvfm_MPF-PhiNO_MPF; //based on equation 53 in Kramer et al., 2004 PRES \nvar PhiNPQ_noMPF = 1-fvfm_noMPF-PhiNO_noMPF; //based on equation 53 in Kramer et al., 2004 PRES \n\n// Create the variables to be printed (assume to use the MPF values unless there is a good reason not to)\n// ----------------------------\nvar fvfm = fvfm_MPF;\nvar npqt = npqt_MPF;\nvar PhiNO = PhiNO_MPF;\nvar PhiNPQ = PhiNPQ_MPF;\nvar qL = qL_MPF;\nvar FmPrime = reg.b;\n\n/****************OUTPUT VALUES FROM MACRO *******************/\n\n// If multi-phase flash steps are flat or positive slope, then just use the normal Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nif (reg.m \u003e 0) {\n  fvfm = fvfm_noMPF;\n  npqt = npqt_noMPF;\n  PhiNO = PhiNO_noMPF;\n  PhiNPQ = PhiNPQ_noMPF;\n  qL = qL_noMPF;\n  FmPrime = AFmP;\n  \n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n\twarning('Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_noMPF variable',output);\n\toutput[\"Phi2_noMPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n    output[\"Phi2\"] \t\t\t= -1;\n\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n\n  }\n  else {\n\t  output[\"Phi2\"] \t\t= MathROUND(fvfm,3);\n  }\n  \n  if (npqt \u003c= 0) {\n\toutput[\"PhiNPQ\"]\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n\twarning(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_noMPF and PhiNPQ_noMPF variable\",output);\n\toutput[\"PhiNPQ_noMPF\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_noMPF\"]\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput[\"PhiNPQ\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt\"]\t\t= MathROUND(npqt,3);\n  }\n\toutput[\"PhiNO\"]\t\t= MathROUND(PhiNO,3);\n\toutput[\"qL\"]\t\t= MathROUND(qL,3);\n}\n\n// Otherwise, use the multi-phase flash calculation for Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nelse {\n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n\twarning(\"Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_MPF variable\",output);\n\toutput[\"Phi2_MPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n    output[\"Phi2\"] \t\t\t= -1;\n\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n  }\n  else {\n    output[\"Phi2\"]\t\t\t= MathROUND(fvfm,3);\n  }\n  if (npqt \u003c= 0) {\n\toutput[\"PhiNPQ\"]\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n\twarning(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_MPF and PhiNPQ_MPF variables\",output);\n\toutput[\"PhiNPQ_MPF\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_MPF\"]\t\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput[\"PhiNPQ\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt\"]\t\t= MathROUND(npqt,3);\n  }\n\toutput[\"PhiNO\"]\t\t= MathROUND(PhiNO,3);\n\toutput[\"qL\"]\t\t\t= MathROUND(qL,3);\n}\n\n// only display LEF if there is a light intensity measurement \u003e 0 \n// ----------------------------\nif (typeof json.light_intensity != \"undefined\" \u0026\u0026 json.light_intensity \u003e 0) {\n\toutput[\"LEF\"] \t\t= MathROUND((fvfm  * 0.45 * json.light_intensity),3);\n}\n\nif (Fs_std \u003e 100) {\n\tdanger(\"noisy Fs\", output);\n}\nif (AFmP_std \u003e 300) {\n\tdanger(\"noisy FmPrime\", output);\n}\nif (FmP_step1_std \u003e 120 | FmP_step2_std \u003e 120 | FmP_step3_std \u003e 120 | FmP_end_std \u003e 300) {\n\tdanger(\"noisy  multi-phase flash steps\",output);\n}\nif (FoPrime_std \u003e 250) {\n\tdanger(\"noisy FoPrime\", output);\n}\nif (reg.m \u003e 0) {\n\tinfo(\"Used Phi2 and not Phi2 MPF - ambient light level was too low to apply MPF calculation\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003e .1) {\t\n\tinfo(\"FmPrime slopes down.  This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating light on these samples\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\n\tinfo(\"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\",output);\n}\n\noutput[\"FmPrime\"] \t\t= MathROUND(FmPrime,3);\noutput[\"Fs\"] \t\t\t= MathROUND(Fs,1);\noutput['FoPrime']\t\t= MathROUND(FoPrime,0);\noutput[\"RFd\"]           = Number(MathROUND(((FmPrime/Fs)-1),3));\noutput[\"ratio MPF/noMPF, Phi2\"] = MathROUND(fvfm_MPF / fvfm_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNPQ\"] = MathROUND(PhiNPQ_MPF / PhiNPQ_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNO\"] = MathROUND(PhiNO_MPF / PhiNO_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNO\"] = MathROUND(npqt_MPF / npqt_noMPF,5);\noutput[\"MPF_slope\"] \t= MathROUND(reg.m,3);\noutput[\"MPF_rsquared\"] \t= MathROUND(reg.r,3);\n/*\noutput[\"Phi2_MPF\"] \t\t= MathROUND(fvfm_MPF,3);\noutput[\"Phi2_noMPF\"] \t= MathROUND(fvfm,3);\noutput[\"FmPrime_MPF\"] \t= MathROUND(reg.b,3);\noutput[\"FmPrime_noMPF\"] = MathROUND(AFmP,1);\noutput['qL_MPF']\t\t= MathROUND(qL_MPF,3);\noutput['qL_noMPF']      = MathROUND(qL,3);\noutput['PhiNPQ_MPF']    = MathROUND(PhiNPQ_MPF,3);\noutput['PhiNPQ_noMPF']  = MathROUND(PhiNPQ,3);\noutput['PhiNO_MPF']\t\t= MathROUND(PhiNO_MPF,3);\noutput['PhiNO_noMPF']\t= MathROUND(PhiNO,3);\noutput[\"Fs_std\"] \t\t\t= MathROUND(Fs_std,1);\noutput[\"AFmP_std\"] \t\t\t= MathROUND(AFmP_std,1);\noutput[\"FmP_step1_std\"] \t= MathROUND(FmP_step1_std,1);\noutput[\"FmP_step2_std\"] \t= MathROUND(FmP_step2_std,1);\noutput[\"FmP_step3_std\"] \t= MathROUND(FmP_step3_std,1);\noutput[\"FmP_end_std\"] \t\t= MathROUND(FmP_end_std,1);\noutput[\"FoPrime_std\"] \t\t\t= MathROUND(FoPrime_std,1);\n*/\n\n//output[\"FmP_step1\"] = MathROUND(FmP_step1,3);\n//output[\"FmP_step2\"] = MathROUND(FmP_step2,3);\n//output[\"FmP_step3\"] = MathROUND(FmP_step3,3);\n//output[\"intensity inverse\"] = inverse_intensity;\n//output[\"steps\"] = [AFmP,FmP_step1,FmP_step2,FmP_step3];\n//output[\"slopey\"] = FmP_end/AFmP - AFmP/AFmP ;\n\n  output[\"baseline\"] \t= baseline;\n\n// Check for data quality issues and add warning or danger flags\n//----------------------------\n\n// Finally, use the \"order\" object to define the order of the outputs (focus on the top 6 most important for the user to see)\n//----------------------------\noutput[\"order\"] = [\"Phi2\",\"PhiNPQ\",\"PhiNO\",\"SPAD\",\"ECSt\", \"vhplus\"];\n\nmaxvalue = MathMAX([json.r,json.g,json.b]);\n//output[\"r\"] = json.r;\n//output[\"g\"] = json.g;\n//output[\"b\"] = json.b;\n//output[\"rval\"] = json.r*(255/maxvalue);\n//output[\"gval\"] = json.g*(255/maxvalue);\n//output[\"bval\"] = json.b*(255/maxvalue);\n\noutput[\"Color\"] = [json.r*(255/maxvalue),json.g*(255/maxvalue),json.b*(255/maxvalue)];\n\nreturn output;","json_data":"{\"time_offset\":240,\"time\":1465304477230,\"device_version\":\"1\",\"device_id\":\"d4:f5:7f:ff:ff:ff\",\"device_battery\":97,\"device_firmware\":\"1.05\",\"firmware_version\":\"1.05\",\"device_time\":1464861671,\"sample\":[[{\"time\":1465304477253,\"protocol_id\":1,\"detector_read1\":65535,\"light_intensity\":10,\"r\":24,\"g\":12,\"b\":6,\"light_intensity_raw\":43,\"temperature\":22.77,\"humidity\":66,\"pressure\":668.909973,\"temperature2\":23.42,\"humidity2\":64,\"pressure2\":709.609985,\"contactless_temp\":26.43,\"thickness_raw\":65535,\"compass_direction\":\"NW\",\"compass\":303.75,\"angle\":4.12,\"angle_direction\":\"SE\",\"pitch\":0.41,\"roll\":-4.1,\"recall\":{\"time\":1465304490313,\"colorcal_blank1[1]\":23042.5,\"colorcal_blank1[2]\":23061,\"colorcal_blank1[3]\":23022,\"colorcal_blank1[4]\":23069.5,\"colorcal_blank1[6]\":23091,\"colorcal_blank1[8]\":24800,\"colorcal_blank1[9]\":24803,\"colorcal_blank1[10]\":24804.5,\"colorcal_blank2[1]\":24802,\"colorcal_blank2[2]\":24804.5,\"colorcal_blank2[3]\":30548.5,\"colorcal_blank2[4]\":30523,\"colorcal_blank2[6]\":30555.5,\"colorcal_blank2[8]\":30550.5,\"colorcal_blank2[9]\":30543.5,\"colorcal_blank2[10]\":26628.5,\"colorcal_blank3[1]\":26632.5,\"colorcal_blank3[2]\":26608,\"colorcal_blank3[3]\":26589,\"colorcal_blank3[4]\":26580.5,\"colorcal_blank3[6]\":11687.5,\"colorcal_blank3[8]\":11656.5,\"colorcal_blank3[9]\":11642,\"colorcal_blank3[10]\":11653.5,\"colorcal_intensity1_slope[2]\":2.392,\"colorcal_intensity1_yint[2]\":0,\"colorcal_intensity2_slope[2]\":2.495,\"colorcal_intensity2_yint[2]\":-80.699997,\"colorcal_intensity3_slope[2]\":2.429,\"colorcal_intensity3_yint[2]\":7.5,\"ir_baseline_slope[5]\":6156,\"ir_baseline_yint[5]\":8200.5,\"ir_baseline_slope[3]\":472.5,\"ir_baseline_yint[3]\":801},\"data_raw\":[116,125,127,127,122,125,129,126,125,126,130,125,123,125,130,127,123,124,128,129,123,125,129,129,121,127,129,127,122,126,128,127,121,127,129,130,121,127,128,131,122,126,129,128,121,125,127,128,122,126,129,129,120,124,128,131,124,125,127,130,124,128,127,130,123,126,128,130,124,125,127,130,121,126,127,129,122,127,127,130,121,125,127,129,121,124,128,126,125,126,130,126,126,126,129,121,125,127,130,122,126,127,129,121,125,126,130,123,126,128,129,121,127,129,127,121,125,129,127,121,125,129,127,122,127,130,126,122,125,130,124,125,127,130,124,128,128,130,121,126,127,129,121,127,128,127,121,126,128,129,121,127,127,129,120,124,129,127,122,124,127,128,121,125,128,128,123,125,130,129,122,126,129,129,122,126,127,127,121,125,128,126,121,124,128,127,124,125,129,125,126,126,130,126,123,125,128,128,124,125,130,127,123,126,129,125,123,126,128,129,122,126,130,126,125,126,129,129,121,125,129,129,121,125,129,127,122,125,130,124,124,126,131,123,125,127,130,124,126,126,130,125,126,127,129,124,127,126,130,123,125,127,129,122,126,127,129,121,127,127,130,126,122,125,129,128,122,125,129,127,122,125,129,125,123,125,127,127,122,125,128,130,122,126,128,128,121,126,127,130,120,126,127,130,122,126,127,130,123,125,127,130,123,124,127,128,121,125,128,126,123,125,129,122,125,125,128,123,125,125,129,120,126,128,126,121,125,127,129,120,126,128,129,121,123,129,124,125,124,127,126,121,124,128,129,121,124,127,130,121,125,127,129,120,125,128,129,120,125,129,130,120,124,127,131,122,125,125,131,124,125,127,129,122,125,126,129,124,123,126,130,122,124,127,129,123,125,127,129,123,125,126,130,121,125,127,131,122,124,127,129,122,126,129,125,121,125,129,125,123,125,129,125,122,125,129,124,126,125,130,122,125,125,130,125,125,124,128,122,124,126,128,126,124,126,129,123,126,125,129,125,124,126,131,120,126,126,128,120,126,129,125,123,123,129,126,121,125,128,126,121,123,128,127,121,125,126,129,122,125,126,130,121,125,127,127,121,124,128,127,121,123,128,127,122,125,129,125,122,123,128,125,123,126,129,128,122,123,126,128,120,126,126,130,122,126,127,127,121,125,126,129,120,125,127,128,119,126,127,128,121,126,127,129,121,123,127,129,121,124,128,127,122,125,127,130,121,124,127,129,120,125,127,129,122,125,126,130,123,125,126,129,123,124,126,129,124,124,126,128,121,125,127,127,122,124,128,125,120,126,129,129,119,126,127,130,122,124,126,129,122,124,127,129,120,126,126,127,121,125,127,128,121,125,127,130,120,124,128,128,121,127,128,129,122,126,126,129,121,127,127,129,121,126,127,129,121,125,128,130,121,125,128,130,122,126,126,130,124,126,128,129,125,127,127,129,122,126,127,129,124,125,127,129,122,126,127,131,121,126,130,128,122,126,128,128,121,126,128,129,121,125,127,130,121,125,127,130,122,127,128,129,120,125,128,127,122,126,128,128,121,125,128,130,121,126,128,130,121,126,127,127,121,126,127,130,123,126,127,129,123,127,127,131,122,126,128,129,121,126,127,129,120,125,129,128,119,125,129,128,121,125,129,128,122,127,127,129,121,124,130,127,124,126,129,126,120,127,128,129,121,126,129,130,123,126,126,129,124,126,127,131,121,125,129,127,122,126,130,126,122,124,127,126,122,126,129,126,123,126,129,126,124,126,130,124,125,126,131,124,124,127,130,120,125,126,129,124,123,126,130,125,126,127,129,122,126,127,129,123,126,127,129,123,124,127,130,122,126,129,129,122,127,128,130,121,125,128,130,122,126,127,130,120,127,127,127,122,127,129,126,122,126,130,125,122,127,129,126,123,125,130,127,125,127,129,125,125,127,129,121,125,127,128,122,126,127,129,121,125,128,128,122,125,129,125,123,125,128,126,122,124,128,127,122,125,129,125,122,126,128,127,122,124,129,127,121,126,129,129,121,125,128,128,121,126,127,129,122,127,337,341,341,335,343,341,334,339,338,332,349,339,333,345,339,334,347,339,331,346,339,352,351,355,351,352,355,352,353,354,350,356,351,356,349,356,349,356,350,356,351,356,351,356,351,355,352,350,355,350,350,355,349,354,355,350,354,348,355,349,349,350,349,353,346,351,344,350,345,351,345,354,348,343,350,344,349,343,354,347,351,346,355,350,354,352,349,353,354,353,348,355,351,353,349,355,349,355,351,353,349,356,351,349,348,353,351,352,352,349,353,333,335,341,329,335,339,333,337,336,330,344,335,331,340,342,337,336,331,337,334,341,340,339,339,337,334,335,341,343,343,339,334,331,345,340,333,331,343,340,338,339,340,335,335,334,340,338,339,343,339,343,341,339,338,337,333,328,335,342,341,339,342,343,339,345,343,337,330,336,342,341,345,341,342,345,339,336,336,333,333,340,340,341,337,341,342,339,336,338,336,327,337,342,341,339,331,333,338,341,342,341,342,336,330,340,335,330,339,339,338,337,329,332,342,339,337,337,335,334,331,331,337,331,333,342,334,335,328,334,339,340,340,343,339,342,342,343,338,335,330,342,337,335,336,331,336,338,331,331,343,342,343,340,342,345,336,338,335,335,330,334,341,341,340,337,334,334,331,328,75,52,51,47,47,51,49,44,47,50,54,54,59,56,55,55,59,59,55,53,266,62,55,57,57,58,55,57,58,57,33,47,50,46,47,55,50,45,46,51,287,28,25,26,27,24,28,25,27,25,943,67,42,40,39,39,39,40,41,38,97,49,48,46,49,47,49,46,46,46,111,44,44,42,42,43,42,41,40,43,199,228,227,229,229,230,226,229,229,229,236,292,295,290,291,291,294,290,291,292,205,244,246,249,246,243,246,249,245,244,138,160,159,161,159,161,159,160,161,161,71,94,93,93,90,94,95,90,90,94,59,68,68,69,70,71,69,69,70,68,87,100,100,101,101,102,100,100,100,97,93,112,112,111,112,112,110,108,111,110,769,933,937,942,934,936,939,941,934,937,294,292,289,291,293,289,291,293,295,287,588,749,751,746,747,756,747,745,750,754,452,591,595,595,589,594,599,590,591,595,217,262,264,269,267,263,265,268,265,263,167,227,221,221,225,226,221,224,228,224,291,376,377,375,375,376,382,375,380,375,167,193,191,192,195,195,191,194,195,191]}]],\"app_os\":\"linux\",\"app_name\":\"PhotosynQ\",\"app_version\":\"0.3.3\",\"app_device\":\"x86-64\",\"location\":[\"42.7369792\",\"-84.4838654\"]}","md5hash":"57b6fe69138196bdd303df9c558d2af3","created_at":"2016-05-06T15:23:45.139Z","updated_at":"2016-06-09T14:55:50.717Z","is_deleted":false,"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}},"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}},{"id":449,"name":"Field Leaf Test_Simple","slug":"field-leaf-test_simple","description":"Protocol test, combining _The One v3_ and _Chlorophyll content_only simple output","pre_selected":false,"macro_id":159,"protocol_json":{"pulses":[20,200,20,30,10,10,10,30,20,400,150,100,100,100,100,100,100],"environmental":[["light_intensity",0],["relative_humidity",0],["temperature",0]],"get_ir_baseline":[15,14],"get_blank_cal":[12,20],"act_background_light":20,"tcs_to_act":100,"act1_lights":[0,20,20,20,20,20,20,20,20,11,0],"act_intensities":[0,-1,-1,692,614,537,460,692,-1,0,0,0,125,0,750,0,3000],"cal_intensities":[4095,0,0,0,0,0,0,0,0,0,0],"meas_intensities":[0,0,4095,4095,4095,4095,4095,4095,4095,4095,4095,2265,0,2900,0,3800,0],"pulsedistance":10000,"pulsesize":10,"detectors":[[34],[0],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[35],[34],[35],[34],[35]],"meas_lights":[[14],[0],[15],[15],[15],[15],[15],[15],[15],[0],[15],[12],[20],[12],[20],[12],[20]],"get_userdef0":1,"get_userdef1":1,"get_userdef2":1,"get_userdef3":1,"get_userdef4":1,"get_userdef5":1,"protocol_id":449},"created_at":"2016-04-15T20:00:04.585Z","updated_at":"2016-05-16T16:46:04.678Z","is_deleted":false,"md5hash":"ae4b36858aeae4ce84c6c98427b117d1","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqproduction.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":159,"name":"Field Leaf Test_simple","slug":"field-leaf-test_simple","description":"Protocol test, combining _The One v3_ and _Chlorophyll content_output only main values","default_y_axis":"ΦNPQ","default_x_axis":"ΦII","javascript_code":"//============================================\r\n// Macro for data evaluation on PhotosynQ.org\r\n// created: 2/24/2016\r\n//============================================\r\n\r\nvar data = json.data_raw;\r\n\r\nvar output = {};\r\n\r\n//output[\"flag\"] = {\"info\":[],\"warning\":[],\"danger\":[]};\r\nvar sample_cal = MathMEAN(data.slice(2,18));\r\n\r\nvar inverse_intensity = [1/692,1/614,1/537,1/460];\r\n\r\n// retrieve the baseline information from the data JSON and save (using measuring light 15, calibrating light 14)\r\n//----------------------------\r\nfor (i in json.get_ir_baseline) {\t\r\n\tif (json.get_ir_baseline[i][0] == 15) {\r\n\t\tvar slope_light = json.get_ir_baseline[i][1];\r\n\t\tvar yint_light = json.get_ir_baseline[i][2];\r\n\t}\r\n\tif (json.get_ir_baseline[i][0] == 14) {\r\n\t\tvar slope_cal = json.get_ir_baseline[i][1];\r\n\t\tvar yint_cal = json.get_ir_baseline[i][2];\r\n\t}\r\n}\r\n\r\n// calculate the baseline\r\n//----------------------------\r\nvar shinyness = (sample_cal-yint_cal)/slope_cal; // where 0 is dull black electrical tape, and 1 is shiny aluminum\r\nvar baseline = slope_light*shinyness+yint_light;\r\n\r\nif (!baseline) {\r\n  baseline = 0;\r\n}\r\n\r\n// Set our Apparent FmPrime, 3 FmPrime steps, and Fs to calculate both traditional fv/fm and new Multi-phase flash fv/fm\r\n//----------------------------\r\nvar Fs = MathMEAN(data.slice(21,24)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\r\nvar Fs_std = MathSTDEV(data.slice(21,24)); // create standard deviation for this value for error checking\r\n\r\nvar sat_vals = data.slice(45,68).sort();  // sort the saturating light values from low to high\r\nvar AFmP = MathMEAN(sat_vals.slice(2,20)) - baseline; // take the 18 largest values and average them\r\nvar AFmP_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\r\n\r\nsat_vals = data.slice(104,130).sort();  // sort the saturating light values from low to high\r\nvar FmP_end = MathMEAN(sat_vals.slice(2,23)) - baseline; // take the 21 largest values and average them\r\nvar FmP_end_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\r\n\r\nsat_vals = data.slice(72,80).sort();  // sort the saturating light values from low to high\r\nvar FmP_step1 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\r\nvar FmP_step1_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\r\n\r\nsat_vals = data.slice(82,90).sort();  // sort the saturating light values from low to high\r\nvar FmP_step2 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\r\nvar FmP_step2_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\r\n\r\nsat_vals = data.slice(92,100).sort();  // sort the saturating light values from low to high\r\nvar FmP_step3 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\r\nvar FmP_step3_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\r\n\r\n// Calculations for F0'\r\n// ----------------------------\r\nvar FoPrime_values = json.data_raw.slice(180,290).sort();\r\nvar FoPrime = MathMEAN(FoPrime_values.slice(5,10)) - baseline;\r\nvar FoPrime_std = MathSTDEV(FoPrime_values); // create standard deviation for this value for error checking\r\n\r\n// Calculations for corrected FmPrime using multi-phase flash\r\n// ----------------------------\r\nvar reg = MathLINREG(inverse_intensity, [AFmP,FmP_step1,FmP_step2,FmP_step3]);\r\n\r\n// Calculate Phi2 w/ and w/out multi-phase flash\r\n// ----------------------------\r\nvar fvfm_noMPF = (AFmP-Fs)/AFmP;\r\nvar fvfm_MPF = (reg.b-Fs)/reg.b;\r\n\r\n\r\n// Calculate NPQt, PhiNPQ, PhiNO, qL w/ and w/out multi-phase flash\r\n// ----------------------------\r\nvar npqt_MPF = (4.88 / ((reg.b / FoPrime) -1) )-1;\r\nvar npqt_noMPF = (4.88 / ((AFmP / FoPrime) -1) )-1;\r\nvar qL_MPF = ((reg.b - Fs)*FoPrime)/((reg.b-FoPrime)*Fs)\r\nvar qL_noMPF = ((AFmP - Fs)*FoPrime)/((AFmP-FoPrime)*Fs)\r\nvar PhiNO_MPF = 1/(npqt_MPF + 1 + qL_MPF*4.88) //based on equation 52 in Kramer et al., 2004 PRES\r\nvar PhiNO_noMPF = 1/(npqt_noMPF + 1 + qL_noMPF*4.88) //based on equation 52 in Kramer et al., 2004 PRES\r\nvar PhiNPQ_MPF = 1-fvfm_MPF-PhiNO_MPF //based on equation 53 in Kramer et al., 2004 PRES \r\nvar PhiNPQ_noMPF = 1-fvfm_noMPF-PhiNO_noMPF //based on equation 53 in Kramer et al., 2004 PRES \r\n\r\n// Create the variables to be printed (assume to use the MPF values unless there is a good reason not to)\r\n// ----------------------------\r\nvar fvfm = fvfm_MPF\r\nvar npqt = npqt_MPF\r\nvar PhiNO = PhiNO_MPF\r\nvar PhiNPQ = PhiNPQ_MPF\r\nvar qL = qL_MPF\r\nvar FmPrime = reg.b\r\n/****************OUTPUT VALUES FROM MACRO *******************/\r\n\r\n// if any of the flag conditions are true, then create the 'flag' object.  Otherwise, do not create the flag object.\r\n// for now since flag system isn't fully implemented, also create as separate objects so they will be displayed\r\n// ----------------------------\r\n\r\n// If multi-phase flash steps are flat or positive slope, then just use the normal Phi2, NPQt, PhiNPQ, PhiNO... etc.\r\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\r\n// ----------------------------\r\nif (reg.m \u003e 0) {\r\n  fvfm = fvfm_noMPF\r\n  npqt = npqt_noMPF\r\n  PhiNO = PhiNO_noMPF\r\n  PhiNPQ = PhiNPQ_noMPF\r\n  qL = qL_noMPF\r\n  FmPrime = AFmP\r\n  \r\n  if (fvfm \u003c= 0) {\r\n    output[\"ΦII\"] \t\t\t= 0;\r\n  //  \toutput.flag.warning.push(\"ΦII is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see ΦII variable\");\r\n    output[\"warning 2\"] = \"ΦII is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see ΦII variable\";\r\n  }\r\n  if (fvfm \u003e=.85) {\r\n//  \toutput.flag.danger.push(\"ΦII above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\");\r\n\toutput[\"danger 5\"] = \"ΦII above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\";\r\n  }\r\n  else {\r\n\t  output[\"ΦII\"] \t\t= MathROUND(fvfm,3);\r\n  }\r\n  \r\n  if (npqt \u003c= 0) {\r\n    output[\"NPQt\"] \t\t\t= 0;\r\n//  \toutput.flag.warning.push(\"NPQt is negative (should be positive)!  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative NPQt value, see NPQt variable\");\r\n\toutput[\"warning 1\"] = \"NPQt is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt variable\";\r\n  }\r\n  else {\r\n\t  output['NPQt']\t\t= MathROUND(npqt,3);\r\n  }\r\n\t  output['qL']\t\t    = MathROUND(qL,3);\r\n\t  output['ΦNPQ']\t\t= MathROUND(PhiNPQ,3);\r\n\t  output['ΦNO']\t\t= MathROUND(PhiNO,3);\r\n}\r\n\r\n// Otherwise, use the multi-phase flash calculation for Phi2, NPQt, PhiNPQ, PhiNO... etc.\r\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\r\n// ----------------------------\r\nelse {\r\n  if (fvfm \u003c= 0) {\r\n    output[\"ΦII\"] \t\t\t= 0;\r\n//  \toutput.flag.warning.push(\"ΦII is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see ΦII (MPF) variable\");\r\n\toutput[\"warning 2\"] = \"ΦII is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see ΦII (MPF) variable\";\r\n  }\r\n  if (fvfm \u003e=.85) {\r\n//  \toutput.flag.danger.push(\"ΦII above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\");\r\n\toutput[\"danger 5\"] = \"ΦII above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\";\r\n  }\r\n  else {\r\n  \toutput[\"ΦII\"] \t\t\t= MathROUND(fvfm,3);\r\n  }\r\n  if (npqt \u003c= 0) {\r\n    output[\"NPQt\"] \t\t\t= 0;\r\n//  \toutput.flag.warning.push(\"NPQt is negative (should be positive)!  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative NPQt value, see NPQt (MPF) variable\");\r\n\toutput[\"warning 3\"] = \"NPQt value is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt (MPF) variable\";\r\n  }\r\n  else {\r\n\t  output['NPQt']\t\t= MathROUND(npqt,3);\r\n  }\r\n\t  output['qL']\t\t= MathROUND(qL,3);\r\n\t  output['PhiNPQ']\t\t= MathROUND(PhiNPQ,3);\r\n\t  output['PhiNO']\t\t= MathROUND(PhiNO,3);\r\n}\r\n\r\n// only display LEF if there is a light intensity measurement \u003e 0 \r\n// ----------------------------\r\nif (typeof json.light_intensity != \"undefined\" \u0026\u0026 json.light_intensity \u003e 0) {\r\n\toutput[\"LEF\"] \t\t= MathROUND((fvfm  * 0.45 * json.light_intensity),3);\r\n}\r\n\r\n//output[\"FmPrime\"] \t\t= MathROUND(FmPrime,3);\r\n//output[\"Fs\"] \t\t\t= MathROUND(Fs,1);\r\n//output['FoPrime']\t\t= MathROUND(FoPrime,0);\r\noutput[\"ΦII (MPF)\"] \t\t= MathROUND(fvfm_MPF,3);\r\noutput[\"ΦII\"] \t= MathROUND(fvfm,3);\r\n//output['ratio adjusted to regular ΦII'] = MathROUND(fvfm_MPF / fvfm,5);\r\noutput['NPQt (MPF)']\t\t\t= MathROUND(npqt_MPF,3);\r\noutput[\"NPQt\"] \t= MathROUND(npqt,3);\r\n//output['ratio adjusted to regular NPQt'] = MathROUND(npqt_MPF / npqt,5);\r\n//output[\"FmPrime (MPF)\"] \t= MathROUND(reg.b,3);\r\n//output[\"FmPrime\"] = MathROUND(AFmP,1);\r\n//output['qL (MPF)']\t\t= MathROUND(qL_MPF,3);\r\n//output['qL']      = MathROUND(qL,3);\r\noutput['ΦNPQ (MPF)']    = MathROUND(PhiNPQ_MPF,3);\r\noutput['ΦNPQ']  = MathROUND(PhiNPQ,3);\r\noutput['ΦNO (MPF)']\t\t= MathROUND(PhiNO_MPF,3);\r\noutput['ΦNO']\t= MathROUND(PhiNO,3);\r\n\r\n\r\n\r\n//output[\"MPF_slope\"] \t= MathROUND(reg.m,3);\r\n//output[\"MPF_rsquared\"] \t= MathROUND(reg.r,3);\r\n\r\n//output[\"Fs_std\"] \t\t\t= MathROUND(Fs_std,1);\r\n//output[\"AFmP_std\"] \t\t\t= MathROUND(AFmP_std,1);\r\n//output[\"FmP_step1_std\"] \t= MathROUND(FmP_step1_std,1);\r\n//output[\"FmP_step2_std\"] \t= MathROUND(FmP_step2_std,1);\r\n//output[\"FmP_step3_std\"] \t= MathROUND(FmP_step3_std,1);\r\n//output[\"FmP_end_std\"] \t\t= MathROUND(FmP_end_std,1);\r\n//output[\"FoPrime_std\"] \t\t\t= MathROUND(FoPrime_std,1);\r\n\r\n\r\n//output[\"FmP_step1\"] = MathROUND(FmP_step1,3);\r\n//output[\"FmP_step2\"] = MathROUND(FmP_step2,3);\r\n//output[\"FmP_step3\"] = MathROUND(FmP_step3,3);\r\n//output[\"intensity inverse\"] = inverse_intensity;\r\n//output[\"steps\"] = [AFmP,FmP_step1,FmP_step2,FmP_step3];\r\n//output[\"slopey\"] = FmP_end/AFmP - AFmP/AFmP ;\r\n\r\n//if (baseline != 0) {\r\n//  output[\"baseline\"] \t= baseline;\r\n//}\r\n//else {\r\n//  output[\"baseline\"] \t= 0;\r\n//}\r\n\r\n//if (reg.m \u003e 0 | FmP_end/AFmP - AFmP/AFmP \u003e .1 | FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\r\n//}\r\n\r\n// Calculate Standard Deviation for Warning or Danger flags (out of bounds measurement)\r\n// ----------------------------\r\n\r\nif (Fs_std \u003e 100\t) {\r\n//  \toutput.flag.danger.push(\"noisy Fs\");\r\n\toutput[\"danger 1\"] = \"noisy Fs\";\r\n}\r\nif (AFmP_std \u003e 200) {\r\n//  \toutput.flag.danger.push(\"noisy FmPrime\");\r\n\toutput[\"danger 2\"] = \"noisy FmPrime\";\r\n}\r\nif (FmP_step1_std \u003e 60 | FmP_step2_std \u003e 60 | FmP_step3_std \u003e 60 | FmP_end_std \u003e 200) {\r\n//  \toutput.flag.danger.push(\"noisy multi-phase flash steps\");\r\n\toutput[\"danger 3\"] = \"noisy  multi-phase flash steps\";\r\n}\r\nif (FoPrime_std \u003e 150) {\r\n//  \toutput.flag.danger.push(\"noisy FoPrime\");\r\n\toutput[\"danger 4\"] = \"noisy FoPrime\";\r\n}\r\n\r\nif (reg.m \u003e 0) {\r\n//\toutput.flag.info.push(\"Used ΦII and not ΦII (MPF) - ambient light level was too low to apply MPF calculation\");\r\n\toutput[\"info 1\"] = \"Used ΦII and not ΦII (MPF) - ambient light level was too low to apply MPF calculation\";\r\n}\r\n\r\nif (FmP_end/AFmP - AFmP/AFmP \u003e .1) {\r\n//\toutput.flag.info.push(\"FmPrime slopes down.  This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating lightf on these samples\");\r\n\toutput[\"info 2\"] = \"FmPrime slopes down. This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating light on these samples\";\r\n}\r\n\r\nif (FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\r\n//\toutput.flag.info.push(\"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\");\r\n\toutput[\"info 3\"] = \"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\";\r\n}\r\n\r\n\r\n//----------------------------\r\n// SPAD calculation starts here\r\n//----------------------------\r\n\r\n\r\nvar minolta_spad = 0;\r\nvar averages = 0;\r\nvar offset = 300\r\n\r\n// get sample blank data for each leaf thickness level\r\nvar calibration_940_1 = json.get_userdef3[0];\r\nvar calibration_940_2 = json.get_userdef4[0];\r\nvar calibration_940_3 = json.get_userdef5[0];\r\nvar calibration_650_1 = json.get_userdef3[1];\r\nvar calibration_650_2 = json.get_userdef4[1];\r\nvar calibration_650_3 = json.get_userdef5[1];\r\n\r\n// get calibration data to convert to Minolta SPAD for each leaf thickness level\r\nvar slope_spad1 = json.get_userdef0[0];\r\nvar yint_spad1 = json.get_userdef0[1];\r\nvar slope_spad2 = json.get_userdef1[0];\r\nvar yint_spad2 = json.get_userdef1[1];\r\nvar slope_spad3 = json.get_userdef2[0];\r\nvar yint_spad3 = json.get_userdef2[1];\r\n\r\n// now get the sample 650 and 940 values averaged\r\nvar sample_940_1 = MathMEAN(json.data_raw.slice((offset + 20),(offset + 90)));\r\nvar sample_940_2 = MathMEAN(json.data_raw.slice((offset + 220),(offset + 290)));\r\nvar sample_940_3 = MathMEAN(json.data_raw.slice((offset + 420),(offset + 490)));\r\nvar sample_650_1 = MathMEAN(json.data_raw.slice((offset + 120),(offset + 190)));\r\nvar sample_650_2 = MathMEAN(json.data_raw.slice((offset + 320),(offset + 390)));\r\nvar sample_650_3 = MathMEAN(json.data_raw.slice((offset + 520),(offset + 590)));\r\n\r\nvar spad1 = MathLOG((sample_940_1 / calibration_940_1) / (sample_650_1 / calibration_650_1))*100;\r\nvar spad2 = MathLOG((sample_940_2 / calibration_940_2) / (sample_650_2 / calibration_650_2))*100;\r\nvar spad3 = MathLOG((sample_940_3 / calibration_940_3) / (sample_650_3 / calibration_650_3))*100;\r\n//spad = ((sample_940 / calibration_940) / (sample_650 / calibration_650))*100;\r\n\r\nvar minolta_spad1 = (spad1-yint_spad1)/slope_spad1;\r\nvar minolta_spad2 = (spad2-yint_spad2)/slope_spad2;\r\nvar minolta_spad3 = (spad3-yint_spad3)/slope_spad3;\r\n\r\n//output [\"get\"] = MathROUND(spad,2);\r\n//output [\"spad\"] = MathROUND(spad,2);\r\n\r\n//output[\"calibration values\"] = json.get_userdef3;\r\n//output[\"spad values\"] = json.get_userdef0;\r\n\r\n// determine the final SPAD to choose\r\n// rules: either values has to be \u003e500\r\n\r\nif ((sample_940_1 \u003e500 \u0026 sample_940_1 \u003c64000) \u0026 (sample_650_1 \u003e500 \u0026 sample_650_1 \u003c64000)) {\r\n  minolta_spad = minolta_spad + minolta_spad1;\r\n  averages++;\r\n}\r\nif ((sample_940_2 \u003e500 \u0026 sample_940_2 \u003c64000) \u0026 (sample_650_2 \u003e500 \u0026 sample_650_2 \u003c64000)) {\r\n  minolta_spad = minolta_spad + minolta_spad2;\r\n  averages++;\r\n}\r\nif ((sample_940_3 \u003e500 \u0026 sample_940_3 \u003c64000) \u0026 (sample_650_3 \u003e500 \u0026 sample_650_3 \u003c64000)) {\r\n  minolta_spad = minolta_spad + minolta_spad3;\r\n  averages++;\r\n}\r\n\r\nminolta_spad = minolta_spad/averages;  \r\n\r\noutput [\"PQ SPAD\"] = MathROUND(minolta_spad,1);\r\n//output[\"averages\"] = averages;\r\n//output [\"PQ SPAD 1\"] = MathROUND(minolta_spad1,1);\r\n//output [\"PQ SPAD 2\"] = MathROUND(minolta_spad2,1);\r\n//output [\"PQ SPAD 3\"] = MathROUND(minolta_spad3,1);\r\n//output[\"raw SPAD 1\"] = MathROUND(spad1,2);\r\n//output[\"raw SPAD 2\"] = MathROUND(spad2,2);\r\n//output[\"raw SPAD 3\"] = MathROUND(spad3,2);\r\n//output [\"Minolta SPAD\"] = Number(json.message[0][2]);\r\n//output [\"AtLEAF SPAD\"] = Number(json.message[1][2]);\r\n//output [\"sample 940\"] = MathROUND(sample_940,2);\r\n//output [\"cal 940\"] = MathROUND(calibration_940,2);\r\n//output [\"sample 650\"] = MathROUND(sample_650,2);\r\n//output [\"cal 650\"] = MathROUND(calibration_650,2);\r\n//output [\"sample 650\"] = MathROUND(sample_650,2);[\r\n\r\n//----------------------------\r\n// Now we add the Index of Plant Happiness (IPH) here\r\n//----------------------------\r\nvar iph = (output [\"PQ SPAD\"] / 100) * ((output[\"ΦII\"] + output['ΦNPQ']) / output['ΦNO'])\r\noutput [\"IPH\"] = MathROUND(iph,2);\r\n\r\nreturn output;","json_data":"{\"time_offset\":300,\"time\":1456330944919,\"device_id\":82,\"firmware_version\":\"0.410\",\"sample\":[[null]],\"app_os\":\"mac\",\"app_name\":\"PhotosynQ\",\"app_version\":\"0.3.2\",\"ConsoleMacro\":\"129\"}","md5hash":"4307127c6eef78d6a76fcab290976a13","created_at":"2016-04-15T19:58:14.075Z","updated_at":"2016-04-15T19:58:14.075Z","is_deleted":false,"creator":{"name":"Stefanie Tietz","id":78,"email":"stietz@msu.edu","bio":"","institute":"MSU DOE-Plant Research Laboratories","profile_url":"https://photosynq.org/users/stefanie-tietz","contributions":3702,"projects":19,"collaborations":8,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/IMG_20140926_135621.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/thumb_IMG_20140926_135621.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/medium_IMG_20140926_135621.jpg"},"latest_activity":"2016-08-22T12:34:56.346Z","badges":[{"name":"","url":""}]}},"creator":{"name":"Stefanie Tietz","id":78,"email":"stietz@msu.edu","bio":"","institute":"MSU DOE-Plant Research Laboratories","profile_url":"https://photosynq.org/users/stefanie-tietz","contributions":3702,"projects":19,"collaborations":8,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/IMG_20140926_135621.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/thumb_IMG_20140926_135621.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/medium_IMG_20140926_135621.jpg"},"latest_activity":"2016-08-22T12:34:56.346Z","badges":[{"name":"","url":""}]}},{"id":83,"name":"NPQ / NPQt correlation","slug":"npq-npqt-correlation-protocol","description":"Correlation of NPQ and NPQt, written by Stefanie Tietz","pre_selected":false,"macro_id":89,"protocol_json":{"pulses":[20,20,50,20,500,200,40000,20,50,20,500,200,40000,20,50,20,500,200,40000,20,50,20,500,200,40000,20,50,20,500,200,20000,20,50,20,500,200,20000,20,50,20,500,200,20000,20,50,20,500,200,20000,20,50,20,500,200],"environmental":[["light_intensity",0],["relative_humidity",0],["temperature",0]],"get_ir_baseline":[15,14],"act1_lights":[0,20,20,20,11,0,20,20,20,20,11,0,20,20,20,20,11,0,20,20,20,20,11,0,20,20,20,20,11,0,20,20,20,20,11,0,20,20,20,20,11,0,20,20,20,20,11,0,20,20,20,20,11,0],"act_intensities":[0,0,692,0,0,0,32,32,692,0,0,0,62,62,692,0,0,0,122,122,692,0,0,0,182,182,692,0,0,0,0,0,692,0,0,0,0,0,692,0,0,0,0,0,692,0,0,0,0,0,692,0,0,0],"cal_intensities":[4095],"meas_intensities":[0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095,0,4095,4095,4095,4095,4095],"pulsedistance":10000,"pulsesize":10,"detectors":[[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34],[34]],"meas_lights":[[14],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15],[0],[15],[15],[15],[15],[15]],"protocol_id":83},"created_at":"2014-12-04T18:40:10.873Z","updated_at":"2016-05-16T16:39:13.604Z","is_deleted":null,"md5hash":"b0a0cb14b20964f1ff18eddead598bf0","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqproduction.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":89,"name":"NPQ / NPQt correlation using actual Fv/Fm","slug":"npq-npqt-correlation-in-loops-using-actual-fv-fm","description":"Correlation of NPQ and NPQt, test macro for NPQt with real Fv/Fm","default_y_axis":"","default_x_axis":"","javascript_code":"var data = json.data_raw;\nvar output = {};\nvar sample_cal = MathMEAN(data.slice(2,18));\n\n// retrieve the baseline information from the data JSON and save (using measuring light 15, calibrating light 14)\nfor (i in json.get_ir_baseline) {\t\n\tif (json.get_ir_baseline[i][0] == 15) {\n\t\tvar slope_light = json.get_ir_baseline[i][1];\n\t\tvar yint_light = json.get_ir_baseline[i][2];\n\t}\n\tif (json.get_ir_baseline[i][0] == 14) {\n\t\tvar slope_cal = json.get_ir_baseline[i][1];\n\t\tvar yint_cal = json.get_ir_baseline[i][2];\n\t}\n}\n\n// Fixed variables\nvar offset = 20;\nvar shinyness = (sample_cal-yint_cal)/slope_cal; // where 0 is dull black electrical tape, and 1 is shiny aluminum\nvar baseline = slope_light*shinyness+yint_light;\n\n\nvar light_int = [0, 250, 500, 1000, 1500, 0, 0, 0];\n\n// Start output\noutput[\"baseline\"] = MathROUND(baseline,1);\n\nfor(i=0;i\u003c8;i++){\n\t//\n\tvar counter = \" (\"+(i+1)+\")\";\n\t//----------------------------\n  \tvar Fo = MathMEAN(data.slice(20,22)) - baseline;\n\t//----------------------------\n\tvar nFs = offset + 4\n\tvar Fs = MathMEAN(data.slice(nFs,(nFs+20))) - baseline; // take only the first 4 values in the Fs range, excluding the very first\n\t// ----------------------------\n\tvar nsat_vals = offset + 22\n\tvar sat_vals = data.slice(nsat_vals,(nsat_vals+42)).sort();  // sort the saturating light values from low to high\n\t// ----------------------------\n        var Fm = MathMEAN(sat_vals.slice(41,45)) - baseline;\n\tvar FmP = MathMEAN(sat_vals.slice(41,45)) - baseline; // take the 4 largest values and average them\n\t// ----------------------------\n\tvar nFoPrime = offset + 720\n\tvar FoPrime = MathMEAN(data.slice(nFoPrime,(nFoPrime+29))) - baseline;\n\t// ----------------------------\n\tvar fvfm = (FmP-Fo)/FmP;\n\n\n\tif(i == 0){\n\t\toutput[\"fv/fm\"] = MathROUND(fvfm,3);\t\n\t\toutput[\"Fo\"] = MathROUND(Fo,0)\n                output[\"FmP\"+counter] = MathROUND(FmP,0);\n                output[\"Fm\"] = MathROUND(Fm,0)\n\t}\n\telse{\n\t\toutput[\"Phi2\"+counter] = MathROUND(fvfm,3);\t\t\n\t\toutput[\"Fs\"+counter] = MathROUND(Fs,0);\t\t\n\t\toutput[\"FmP\"+counter] = MathROUND(FmP,0);\n\t}\n\n\toutput[\"FoPrime\"+counter] = MathROUND(FoPrime,0);\n\toutput[\"NPQ\"+counter] = MathROUND((output[\"Fm\"] - FmP)/ FmP,3);\n\toutput[\"NPQt\"+counter] = MathROUND((((output[\"Fm\"]/output[\"Fo\"])-1)/((FmP/FoPrime)-1))-1,3);\n\t// output[\"NPQf\"+counter] = MathROUND(((Fs/0.17)-FmP)/FmP,3);\n\t// output[\"qP\"+counter] = MathROUND((FmP-Fs)/(FmP-FoPrime),3)\n\t// output[\"qL\"+counter] = MathROUND(((FmP-Fs)/(FmP-FoPrime))*(FoPrime/Fs),3)\n\t// output[\"ETR\"+counter] = MathROUND(light_int[i] * 0.84 * 0.5 * output[\"fv/fm\"],3)\n\n\n\t// Add offset for aditional pulsset\n\toffset += 790;\n}\n\t// only for development\n   keys = Object.keys(output),\n   keys.sort();\nvar tmp = {}\nfor (i in keys){\n\ttmp[keys[i]] = output[keys[i]]\n}\n\noutput = tmp;\n\nreturn output;","json_data":"{\"time_offset\":300,\"time\":1417633261954,\"device_id\":49,\"firmware_version\":\"0.340\",\"sample\":[[{\"time\":1417633261963,\"protocol_id\":1,\"get_ir_baseline\":[[15,148.43,92.74],[14,3183.41,3771.16]],\"light_intensity\":34,\"r\":31,\"g\":30,\"b\":29,\"relative_humidity\":24.67,\"temperature\":28.67,\"data_raw\":[2269,2285,2307,2254,2298,2260,2310,2307,2275,2298,2259,2312,2256,2224,2255,2259,2246,2253,2234,2289,1932,1947,1965,1996,2015,2023,2021,2025,2031,2043,2050,2063,2047,2053,2023,2061,2053,2093,2066,2080,2089,7465,8698,9069,9279,9413,9586,9737,9870,9962,10065,10169,10208,10256,10310,10325,10336,10335,10320,10285,10315,10352,10392,10346,10377,10413,10370,10386,10373,10349,10398,10365,10375,10387,10389,10333,10324,10318,10292,10318,10318,10354,10373,10318,10313,10320,10283,10275,10293,10292,10267,7605,6614,6106,5744,5519,5364,5207,5106,4991,4882,4832,4768,4676,4623,4558,4521,4490,4447,4402,4344,4400,4065,3727,3548,3373,3229,3138,3078,3050,2983,2931,2889,2890,2856,2836,2840,2821,2783,2758,2768,2766,2766,2728,2755,2715,2717,2713,2733,2730,2686,2683,2696,2705,2697,2680,2675,2672,2699,2690,2707,2713,2694,2714,2711,2666,2698,2663,2670,2587,2683,2678,2667,2683,2687,2685,2678,2727,2645,2627,2595,2612,2607,2603,2619,2634,2635,2605,2610,2627,2665,2655,2648,2639,2630,2666,2638,2623,2656,2612,2627,2619,2606,2635,2617,2639,2647,2620,2618,2637,2599,2623,2643,2602,2627,2567,2626,2609,2611,2602,2599,2612,2631,2613,2601,2599,2571,2599,2595,2638,2629,2623,2621,2604,2595,2610,2600,2606,2619,2594,2585,2622,2580,2618,2574,2582,2611,2597,2603,2561,2586,2588,2551,2570,2538,2571,2559,2599,2590,2587,2583,2597,2590,2580,2560,2575,2592,2579,2585,2581,2595,2598,2562,2581,2540,2585,2558,2573,2565,2558,2574,2564,2572,2562,2552,2545,2565,2553,2573,2586,2566,2574,2570,2556,2567,2563,2556,2549,2532,2555,2570,2567,2571,2548,2554,2575,2580,2580,2549,2542,2575,2549,2585,2561,2533,2556,2532,2567,2539,2572,2565,2559,2534,2551,2545,2548,2541,2549,2549,2572,2580,2561,2565,2543,2569,2559,2567,2579,2563,2590,2559,2583,2562,2570,2549,2562,2568,2562,2540,2544,2549,2557,2572,2523,2543,2526,2559,2547,2550,2575,2563,2555,2561,2554,2572,2595,2551,2544,2564,2564,2563,2571,2584,2575,2594,2554,2543,2558,2558,2556,2534,2491,2452,2462,2455,2487,2480,2467,2521,2522,2511,2535,2551,2532,2526,2535,2551,2546,2552,2564,2564,2550,2549,2557,2530,2535,2569,2535,2555,2553,2552,2543,2584,2565,2563,2553,2548,2551,2555,2546,2562,2551,2578,2549,2548,2569,2539,2554,2563,2557,2554,2569,2562,2611,2602,2579,2562,2576,2573,2592,2587,2585,2555,2561,2552,2551,2578,2568,2567,2581,2558,2554,2559,2609,2564,2563,2572,2563,2565,2596,2533,2582,2564,2602,2564,2603,2568,2550,2586,2575,2603,2562,2650,2570,2564,2571,2591,2590,2576,2583,2581,2579,2577,2594,2569,2590,2574,2557,2589,2590,2553,2563,2554,2596,2564,2566,2563,2573,2587,2576,2597,2552,2585,2596,2575,2581,2618,2579,2571,2586,2583,2619,2612,2583,2601,2616,2619,2622,2597,2620,2607,2557,2627,2522,2631,2582,2569,2603,2609,2587,2579,2584,2611,2594,2607,2608,2609,2604,2609,2637,2621,2616,2644,2632,2654,2627,2621,2623,2643,2618,2624,2610,2619,2636,2643,2609,2632,2634,2639,2627,2616,2655,2625,2645,2619,2639,2613,2598,2628,2647,2646,2642,2631,2639,2643,2675,2646,2627,2630,2604,2640,2623,2592,2552,2595,2588,2570,2587,2563,2599,2562,2595,2593,2655,2611,2642,2657,2615,2646,2664,2640,2657,2623,2639,2648,2628,2647,2644,2660,2634,2667,2661,2670,2627,2647,2643,2629,2661,2660,2681,2644,2591,2541,2524,2502,2496,2434,2419,2419,2404,2396,2383,2364,2343,2326,2335,2346,2335,2349,2339,2331,2347,2335,2337,2332,2323,2331,2327,2304,2347,2302,2300,2312,2332,2339,2318,2312,2330,2339,2350,2337,2335,2311,2311,2315,2319,2328,2325,2344,2340,2337,2342,2309,2330,2253,2350,2355,2351,2356,2355,2326,2329,2324,2337,2326,2353,2330,2360,2342,2383,2349,2373,2353,2334,2324,2307,2316,2320,2336,2319,2305,2307,2319,2313,2332,2319,2307,2316,2330,2315,2340,2328,2321,2305,2319,2319,2309,2334,2314,2323,2320,2317,2346,2339,2323,2351,2334,2315,2289,2312,2319,2317,2295,2305,2353,2365,2339,2330,2343,2346,2356,2349,2361,2347,2380,2378,2358,2358,2348,2325,2340,2361,2359,2351,2349,2371,2355,2351,2381,2343,2342,2345,2340,2320,2322,2313,2323,2313,2328,2321,2317,2327,2319,2327,2330,2361,2336,2340,2337,2371,2343,2313,2330,2301,2311,2309,2319,2324,2310,2327,2301,2317,2303,2300,2322,2330,2298,2331,2324,2348,2321,2332,2334,2330,2317,2317,2331,2325,2311,2327,2331,2340,2346,2317,2335,2342,2323,2320,2319,2293,7539,7567,7573,7538,7554,7578,7538,7527,7557,7532,7556,7532,7542,7531,7534,7522,7525,7530,7516,7516,7628,7651,7659,7679,7681,7637,7639,7627,7633,7635,7599,7597,7616,7596,7611,7580,7587,7597,7583,7595,7568,7569,7626,7564,7576,7562,7555,7566,7518,7520,7504,7517,7561,7510,7554,7497,7531,7538,7564,7578,7505,7528,7559,7494,7516,7530,7516,7512,7481,7508,7497,6441,5779,5321,5001,4796,4687,4576,4508,4480,4473,4470,4465,4461,4467,4442,4469,4428,4457,4450,4438,4424,4180,3941,3796,3672,3606,3506,3477,3463,3426,3406,3370,3380,3358,3308,3323,3298,3283,3267,3271,3248,3278,3250,3250,3221,3230,3204,3183,3171,3165,3182,3157,3152,3151,3113,3127,3135,3109,3138,3139,3103,3088,3072,3059,3038,3022,3038,3032,2999,3004,3033,3003,3022,3003,2964,2981,3007,2967,2964,2958,2959,2965,2942,2924,2908,2905,2909,2946,2901,2795,2792,2880,2850,2775,2772,2881,2813,2822,2800,2790,2787,2782,2774,2802,2792,2782,2751,2774,2664,2704,2691,2668,2684,2667,2688,2684,2695,2648,2690,2700,2708,2655,2692,2679,2674,2662,2669,2675,2674,2666,2661,2647,2645,2627,2636,2606,2623,2593,2643,2595,2634,2612,2602,2578,2617,2570,2595,2590,2589,2575,2585,2588,2566,2563,2550,2535,2550,2538,2564,2536,2549,2532,2534,2531,2526,2493,2510,2503,2502,2495,2501,2490,2475,2504,2499,2507,2484,2477,2515,2477,2495,2411,2495,2484,2488,2497,2462,2455,2462,2493,2463,2431,2435,2459,2502,2469,2427,2457,2492,2442,2427,2445,2421,2431,2424,2414,2412,2405,2385,2407,2404,2402,2404,2410,2397,2407,2415,2379,2391,2395,2360,2386,2369,2376,2394,2363,2370,2363,2373,2382,2371,2359,2367,2383,2364,2375,2355,2355,2364,2350,2345,2366,2352,2342,2357,2369,2338,2371,2342,2364,2369,2355,2353,2357,2362,2334,2371,2342,2323,2344,2316,2329,2325,2363,2351,2344,2373,2341,2347,2328,2309,2299,2354,2339,2324,2312,2298,2318,2325,2335,2316,2349,2332,2343,2320,2335,2321,2329,2338,2331,2333,2314,2317,2302,2329,2307,2308,2313,2318,2323,2271,2320,2297,2310,2310,2305,2301,2321,2314,2268,2211,2259,2206,2243,2247,2273,2277,2281,2300,2289,2294,2284,2283,2287,2291,2284,2301,2292,2263,2273,2267,2305,2279,2279,2283,2269,2288,2291,2267,2295,2283,2283,2278,2268,2273,2277,2264,2271,2265,2277,2265,2284,2278,2288,2265,2266,2270,2283,2276,2252,2264,2284,2275,2268,2239,2290,2281,2252,2287,2269,2307,2275,2302,2273,2270,2271,2244,2211,2265,2272,2243,2256,2250,2242,2263,2257,2251,2243,2279,2274,2286,2282,2271,2269,2284,2277,2251,2287,2273,2222,2224,2229,2249,2251,2275,2272,2244,2281,2277,2271,2239,2219,2222,2228,2241,2263,2229,2245,2243,2235,2227,2230,2257,2210,2251,2242,2237,2232,2250,2252,2216,2251,2260,2231,2238,2220,2260,2245,2259,2259,2248,2253,2249,2238,2254,2245,2233,2265,2259,2242,2245,2242,2249,2222,2219,2252,2263,2241,2259,2270,2231,2255,2236,2237,2251,2277,2269,2250,2252,2225,2234,2240,2241,2246,2227,2247,2249,2255,2235,2254,2226,2267,2217,2239,2247,2237,2226,2211,2245,2219,2229,2244,2221,2259,2245,2240,2246,2231,2250,2259,2239,2222,2125,2200,2246,2200,2210,2234,2240,2227,2241,2225,2193,2154,2120,2149,2201,2188,2203,2203,2147,2134,2117,2101,2069,2083,2047,2013,2028,2027,2019,2006,2009,2011,2006,2005,2016,2006,2023,2010,2008,2016,1990,2009,1999,2011,2006,2005,2014,2002,2004,1988,2007,1992,1978,2012,2017,1988,1993,1989,2001,2026,2025,2023,2014,2028,1997,1969,1991,2001,2011,1996,2008,2005,2028,2025,1988,1986,2021,2016,1991,1994,1995,2010,2001,1986,1998,1995,2012,1997,2019,2014,2013,1907,2020,2019,2022,1999,2028,2028,2038,2015,2022,2032,1995,2007,1990,1997,2021,2009,2034,2049,2024,2012,2008,2016,2015,1998,2015,2018,1991,2006,2007,2009,2012,2023,2021,2002,2009,2003,2017,2010,2027,2022,2041,2028,2019,2046,2025,2035,2050,2042,2056,2044,2030,2028,2039,2027,2051,2050,2027,2051,2054,2054,2056,2063,2051,2011,2034,2055,2043,2071,2051,2051,2070,2062,2066,2066,2075,2073,2077,2072,2066,2077,2061,2071,2080,2061,2081,2088,2073,2075,2052,2063,2082,1982,2059,2087,2079,2064,2070,2073,2073,2071,2086,2085,2118,2136,2139,2118,2099,2108,2086,2111,2102,2097,2109,2089,2108,2113,2115,2126,2111,2115,2099,2092,2092,2114,2098,6210,6228,6220,6238,6236,6238,6219,6199,6246,6228,6218,6209,6218,6212,6176,6173,6175,6178,6199,6202,6432,6443,6431,6427,6451,6456,6442,6445,6471,6434,6452,6471,6471,6439,6434,6377,6387,6430,6428,6380,6411,6383,6334,6406,6318,6408,6365,6397,6427,6364,6393,6378,6410,6398,6361,6402,6350,6362,6402,6359,6393,6330,6367,6383,6316,6359,6370,6364,6371,6347,6360,5256,4606,4132,3882,3750,3666,3637,3624,3638,3649,3667,3675,3674,3678,3677,3678,3707,3718,3700,3694,3722,3521,3286,3145,3011,2915,2883,2834,2804,2773,2732,2738,2716,2693,2694,2645,2643,2659,2626,2623,2601,2597,2579,2551,2562,2546,2568,2539,2531,2494,2478,2495,2388,2446,2452,2456,2427,2428,2420,2419,2388,2388,2393,2363,2389,2343,2342,2342,2331,2285,2321,2301,2303,2282,2275,2306,2268,2270,2275,2243,2299,2256,2211,2215,2225,2243,2241,2218,2232,2182,2224,2191,2180,2205,2200,2162,2159,2191,2161,2142,2163,2171,2150,2173,2144,2159,2151,2162,2155,2171,2168,2138,2166,2147,2136,2146,2136,2129,2095,2154,2157,2160,2147,2127,2157,2127,2142,2151,2100,2124,2122,2106,2133,2131,2117,2105,2117,2092,2027,2033,2040,2072,2100,2095,2076,2081,2095,2118,2130,2113,2141,2178,2140,2181,2176,2179,2098,2147,2152,2132,2095,2112,2093,2126,2081,2115,2096,2120,2116,2112,2090,2093,2103,2085,2083,2103,2104,2141,2104,2083,2083,2109,2091,2072,2083,2094,2100,2108,2112,2103,2076,2098,2095,2116,2114,2086,2105,2098,2109,2090,2103,2124,2099,2116,2093,2109,2117,2104,2125,2135,2088,2116,2126,2106,2097,2135,2105,2079,2095,2083,2099,2101,2085,2111,2091,2102,2091,2105,2099,2102,2049,2097,2075,2073,2099,2123,2052,2077,2105,2059,2088,2092,2173,2090,2087,2068,2075,2072,2092,2090,2113,2059,2083,2112,2068,2080,2068,2088,2089,2096,2095,2079,2057,2072,2075,2091,2063,2059,2058,2060,2069,2082,2100,2087,2091,2060,2080,2076,2048,2084,2052,2094,2078,2074,2070,2075,2083,2090,2079,2080,2050,2096,2111,2091,2084,2097,2115,2108,2080,2086,2061,2082,2078,2073,2078,2074,2056,2069,2115,2083,2103,2106,2090,2094,2116,2101,2083,2069,2095,2099,2106,2079,2089,2083,2107,2104,2101,2100,2062,2078,2087,2079,2088,2059,2081,2065,2079,2072,2067,2039,2024,2015,2025,2050,2067,2073,2029,2059,2068,2061,2078,2085,2068,2094,2090,2103,2115,2067,2089,2108,2114,2067,2059,2103,2068,2091,2088,2061,2068,2092,2067,2076,2067,2055,2082,2109,2062,2069,2094,2095,2075,2074,2084,2077,2099,2095,2087,2069,2097,2087,2073,2090,2073,2060,2092,2076,2107,2075,2078,2081,2074,2096,2092,2053,2086,2099,2103,2103,2059,2101,2108,2101,2117,2112,2100,2069,2111,2111,2084,2091,2088,2068,2073,2101,2107,2054,2070,2085,2083,2068,2100,2101,2083,2080,2078,2087,2098,2091,2101,2081,2093,2112,2081,2118,2119,2119,2098,2094,1979,2120,1995,2046,2120,2096,2090,2116,2106,2121,2102,2103,2141,2069,2107,2106,2089,2101,2126,2095,2104,2113,2077,2115,2104,2071,2118,2069,2111,2087,2103,2106,2105,2124,2088,2135,2102,2106,2087,2104,2103,2097,2106,2121,2107,2111,2115,2104,2115,2105,2098,2098,2100,2107,2093,2082,2099,2101,2103,2122,2103,2133,2131,2066,2107,2099,2115,2129,2131,2104,2108,2144,2089,2060,2081,2065,2021,2044,2033,2016,2027,2008,2019,2001,2013,2017,2007,2028,2030,2014,2002,1998,2001,2015,1994,2007,1976,1977,1966,1997,1970,1992,2008,2007,2010,1977,1991,1990,1973,2002,1998,1999,1990,1995,1989,1981,2012,2006,1996,1990,2004,1973,1992,2004,1979,2026,2033,2034,2010,2007,2016,2018,2005,2014,1999,2003,2023,1995,2014,2002,2024,2033,2009,2014,2006,2009,2003,2011,1997,2017,1996,1982,2011,2007,2015,1995,2004,1995,1985,2006,2012,2028,2026,2018,2017,2005,2009,2023,2034,2006,2043,2029,1999,2001,2039,2004,2006,1991,2003,2000,2003,2015,2011,2016,2020,1999,1997,1995,2019,2034,2043,2039,2038,2035,2039,2035,2032,2031,2045,2052,2053,2040,2051,2046,2037,2014,2039,2023,2031,2050,2029,2035,2046,2042,2030,2039,2034,2055,2024,2052,2039,2032,2043,2029,2067,2034,2032,2036,2028,2039,2037,2047,2052,2038,2031,2040,2052,2051,2043,2059,2023,2024,2037,2051,2053,2059,2042,2043,2057,2069,2062,2071,2067,2059,2080,2078,2085,2082,2106,2089,2095,2082,2111,2099,2093,2092,2117,2112,2098,2096,2115,3790,3782,3772,3772,3804,3774,3792,3774,3773,3811,3772,3755,3788,3788,3791,3793,3762,3801,3821,3766,4088,4135,4167,4173,4174,4150,4178,4160,4194,4198,4192,4168,4190,4184,4185,4186,4177,4177,4182,4190,4184,4238,4197,4178,4165,4165,4145,4150,4156,4146,4127,4146,4169,4153,4121,4137,4141,4181,4178,4194,4158,4134,4153,4136,4186,4182,4144,4194,4176,4170,4176,3296,2835,2613,2515,2457,2435,2427,2404,2367,2390,2378,2392,2385,2363,2366,2347,2367,2347,2349,2341,2275,2280,2222,2180,2197,2166,2154,2136,2111,2095,2075,2083,2065,2033,2026,1971,1991,1984,1988,1980,1972,1971,1947,1947,1956,1911,1960,1943,1911,1922,1954,1910,1922,1911,1906,1913,1914,1895,1899,1886,1907,1895,1914,1939,1929,1891,1901,1887,1899,1912,1900,1906,1908,1873,1874,1899,1876,1865,1889,1888,1871,1859,1875,1869,1875,1898,1883,1884,1870,1903,1891,1885,1892,1896,1883,1887,1901,1881,1843,1896,1888,1895,1854,1886,1881,1896,1882,1870,1862,1858,1871,1839,1869,1871,1869,1867,1873,1873,1856,1867,1877,1861,1873,1859,1874,1865,1870,1893,1877,1846,1896,1878,1852,1892,1886,1896,1853,1876,1884,1905,1860,1897,1892,1892,1877,1884,1895,1874,1863,1862,1865,1886,1895,1893,1877,1883,1878,1851,1873,1883,1865,1893,1892,1890,1906,1881,1888,1887,1867,1866,1887,1895,1914,1902,1871,1877,1906,1872,1877,1887,1854,1897,1895,1867,1878,1877,1899,1906,1898,1889,1901,1895,1903,1904,1883,1899,1868,1905,1881,1882,1883,1906,1896,1895,1894,1890,1869,1890,1893,1900,1873,1925,1894,1909,1909,1899,1789,1832,1834,1821,1814,1807,1815,1862,1849,1878,1914,1911,1914,1881,1895,1915,1890,1907,1876,1903,1902,1891,1900,1887,1913,1917,1915,1928,1870,1898,1917,1929,1931,1933,1914,1914,1919,1881,1904,1906,1891,1903,1896,1903,1907,1939,1912,1868,1925,1914,1941,1921,1936,1901,1927,1928,1928,1934,1939,1930,1905,1944,1921,1939,1915,1916,1918,1936,1927,1918,1922,1910,1958,1907,1909,1913,1958,1923,1923,1913,1938,1946,1921,1945,1924,1955,1923,1944,1937,1918,1943,1937,1928,1919,1958,1914,1941,1936,1948,1923,1943,1937,1919,1950,1951,1919,1968,1948,1918,1934,1944,1940,1926,1951,1940,1920,1939,1916,1915,1951,1945,1943,1947,1924,1947,1937,1932,1941,1932,1921,1958,1949,1935,1939,1958,1962,1955,1955,1940,1964,1965,2004,1977,1949,1956,1936,1941,1949,1950,1966,1937,1950,1945,1955,1968,1979,1965,1955,1964,1923,1987,1973,1960,1955,1965,1974,1969,1957,1942,1987,1988,1976,1969,1958,1967,1969,1978,1972,2003,1968,1959,1977,1936,1958,1977,1981,2005,1987,1972,1993,1981,1979,1988,1990,1972,1990,1991,1987,1991,1979,1981,1977,1985,1878,1893,1911,1904,1947,1957,1970,1971,1963,1965,2002,1983,2012,2006,2002,1990,2012,1992,1988,1991,2011,1989,1989,1992,1990,1983,1999,1980,1984,2012,2002,1986,1981,2004,2079,2077,2083,2048,2422,2416,2387,2285,2250,2134,2076,2015,2039,1999,2020,2011,2032,2028,2034,2033,2028,2024,2034,2028,2037,2046,2036,2048,2025,2031,2028,2060,2038,2039,2051,2045,2018,2041,2034,2063,2042,2028,1678,1673,1710,1779,1883,1938,2001,2042,2033,2032,2017,2024,2047,2050,2055,2041,2029,2025,2051,2024,2049,1992,1999,2004,2019,2051,2020,2055,2001,1991,1997,1987,1990,2016,1994,2003,2015,2003,1997,1984,1947,1979,1989,1976,1976,1985,1986,1994,1967,1989,1968,1982,2003,1980,1981,1967,1981,1966,1980,1977,1975,1972,1974,1985,1988,2013,2017,2030,1992,1982,1975,2038,1975,1979,1979,1999,1977,1991,1981,1966,1996,1988,1991,1978,1979,1982,1974,1972,1980,1978,1986,1990,1981,1979,1971,1975,1985,1978,1977,1982,1986,1979,1974,1983,2003,1994,1995,1971,1989,1968,1988,1969,1982,1979,1967,1997,1983,2008,1999,2012,1991,1989,2006,1993,1997,1980,1943,1928,1972,1959,1966,1949,1946,1972,1956,1959,1973,1991,1999,2007,1980,1975,2003,1998,1987,1991,1995,2007,1997,1987,1996,1980,1979,1975,1987,1974,1983,1990,1992,2002,2006,1992,1975,1977,1991,1983,2032,2000,2005,2018,2050,1982,1986,2002,2061,2001,1993,1990,1999,1993,2011,1991,2006,1993,2006,2009,2000,1976,2007,2002,2016,1987,2007,2023,2014,2044,2033,2011,2022,2019,1995,1989,1997,2000,2009,1991,2013,2011,1994,2022,2023,2022,1991,1992,2012,2007,2027,2006,2029,2023,1996,2029,2022,2025,3861,3894,3865,3861,3892,3850,3870,3883,3862,3856,3871,3862,3877,3849,3884,3854,3877,3865,3873,3871,4210,4284,4328,4306,4306,4307,4302,4327,4286,4292,4276,4334,4274,4261,4289,4280,4279,4297,4308,4305,4306,4313,4305,4299,4252,4265,4245,4258,4282,4273,4277,4278,4274,4255,4247,4238,4254,4242,4225,4233,4253,4238,4256,4249,4267,4219,4269,4285,4273,4266,4298,3317,2908,2699,2575,2645,2632,2611,2672,2577,2567,2600,2601,2596,2587,2639,2604,2624,2639,2643,2624,2613,2560,2474,2428,2380,2321,2278,2243,2205,2188,2173,2159,2150,2116,2098,2072,2094,2059,2049,2058,2040,2040,2021,2029,1970,1947,1923,1923,1934,1917,1933,1967,1936,1953,1931,1954,1976,1935,1939,1940,1933,1912,1911,1909,1924,1919,1927,1911,1926,1927,1893,1865,1899,1908,1919,1901,1906,1902,1890,1914,1909,1906,1887,1871,1903,1905,1875,1875,1859,1876,1890,1875,1857,1901,1883,1875,1904,1895,1894,1868,1875,1894,1881,1899,1893,1905,1886,1905,1899,1898,1876,1883,1892,1859,1886,1895,1862,1892,1887,1868,1850,1871,1881,1883,1848,1879,1868,1851,1865,1872,1878,1845,1875,1883,1860,1881,1881,1879,1854,1864,1854,1881,1895,1898,1887,1898,1892,1888,1875,1891,1903,1901,1885,1901,1870,1910,1880,1909,1891,1870,1861,1907,1896,1877,1884,1861,1770,1862,1875,1893,1878,1917,1901,1902,1895,1896,1915,1908,1875,1892,1873,1882,1895,1889,1903,1906,1866,1903,1911,1894,1903,1915,1892,1902,1897,1904,1910,1883,1901,1900,1903,1798,1918,1907,1896,1926,1910,1951,1869,1940,1859,1904,1894,1922,1931,1937,1881,1880,1855,1885,1891,1898,1902,1908,1892,1879,1908,1903,1906,1888,1900,1910,1938,1917,1901,1896,1903,1902,1918,1927,1927,1912,1894,1923,1923,1897,1856,1828,1867,1832,1873,1866,1898,1900,1867,1905,1912,1932,1914,1915,1923,1916,1897,1898,1914,1888,1904,1914,1916,1944,1933,1918,1923,1926,1927,1909,1920,1923,1931,1934,1938,1950,1932,1928,1930,1938,1907,1928,1905,1908,1914,1926,1936,1940,1923,1946,1933,1930,1934,1948,1954,1967,1914,1946,1819,1922,1967,1954,1952,1930,1957,1947,1944,1930,1904,1948,1961,1961,1920,1935,1939,1938,1962,1983,1949,1944,1927,1938,1944,1923,1931,1939,1968,1912,1941,1971,1942,1929,1973,1931,1926,1951,1955,1953,1927,1944,1954,1967,1923,1945,1946,1964,1933,1970,1952,1931,1931,1961,1971,1949,1952,1958,1966,1964,1932,1950,1947,1925,1955,1971,1977,1966,1985,1976,2001,1975,1985,1963,1990,1990,1976,1963,1953,1979,1980,1958,1978,1972,1980,1927,1984,1980,1960,2006,1949,1977,1961,1962,1960,1976,1971,2011,1973,1955,1850,1998,1959,1990,1979,2001,2010,1982,1962,1995,1971,1981,1977,1979,1973,1958,1961,2008,2000,1976,1995,1987,1974,2009,1970,1985,1978,1992,1964,1980,1995,2004,1987,1993,1983,1983,1993,1982,2001,2009,1956,1987,1997,1982,1900,1938,1925,1933,1945,1947,1963,1958,1962,1975,1993,1998,1976,2005,1979,2003,1993,1991,2015,2013,1979,2003,2021,2043,2039,2025,2039,2007,2038,2009,2015,2003,2025,2037,1994,1999,2060,2040,2016,1991,2014,2021,1991,1997,2012,2007,2003,1979,2039,2043,2019,2041,2019,2041,2048,2020,2039,2026,2029,2015,2043,2029,2032,2039,2005,2019,2022,2024,2010,2027,2011,2022,2038,2029,1994,2019,1996,2004,2014,2054,2000,1991,1990,1983,1962,1967,1966,1974,1965,1972,1972,1959,1974,1972,1976,1965,1946,1981,1957,1983,1976,1977,1987,1972,1972,1983,1975,1983,1984,2007,1983,1983,1983,1993,1979,1971,1963,2005,1978,1977,1977,1991,1975,1998,2000,2022,1983,1985,1986,1972,1972,1988,1995,1982,2007,1986,1977,1989,1960,1977,1965,1987,1947,1975,1979,1963,1978,1989,2001,1995,1988,1999,2019,2013,2003,1992,1970,2007,2014,2019,2001,2006,1991,1986,1993,2002,1985,2000,1997,2019,2016,2011,2007,2022,2007,2009,2017,2006,2014,2014,1998,2021,2003,1993,1980,1979,1993,2010,1988,1994,1993,1982,2006,1992,1991,1982,1987,2015,2004,1982,1993,2017,1997,1981,1978,1979,1983,2011,1974,1962,1985,1998,1981,1984,2006,2002,1986,2012,1995,1995,1997,1994,2020,2003,2009,2030,2019,2032,2019,1997,2023,2014,2017,2023,2037,2026,2021,2004,2012,2030,2010,2017,2028,2019,2028,2020,2020,2035,2031,2042,2034,2037,2035,2023,2019,2016,2040,1953,2049,2038,2025,2049,2034,2025,2011,1998,2064,2008,2016,2027,2014,2101,2115,2138,2175,2173,2196,2195,2233,2225,2272,2266,2281,2288,2323,2319,2307,2344,2367,2335,2370,2378,7717,8194,8413,8576,8649,8711,8725,8763,8773,8800,8805,8770,8814,8829,8789,8785,8789,8855,8829,8801,8815,8806,8805,8736,8789,8785,8800,8792,8800,8788,8772,8781,8766,8761,8765,8739,8741,8753,8723,8722,8718,8744,8752,8843,8848,8854,8814,8824,8813,8777,5154,3813,3304,3087,3005,2984,2952,2988,2900,2874,2873,2850,2828,2825,2814,2801,2769,2726,2773,2776,2822,2749,2704,2628,2597,2516,2493,2474,2443,2447,2397,2383,2376,2378,2359,2344,2343,2381,2357,2361,2336,2336,2351,2307,2334,2320,2326,2326,2339,2328,2309,2337,2334,2339,2357,2316,2337,2320,2301,2311,2338,2331,2350,2342,2347,2351,2344,2330,2339,2320,2305,2334,2331,2316,2321,2336,2334,2335,2325,2331,2327,2331,2315,2334,2350,2329,2333,2346,2347,2340,2321,2336,2339,2316,2332,2315,2331,2323,2350,2303,2343,2367,2339,2342,2355,2336,2335,2346,2355,2337,2365,2342,2335,2346,2341,2326,2342,2307,2336,2328,2334,2334,2341,2316,2323,2335,2337,2317,2318,2317,2323,2373,2340,2362,2315,2347,2325,2326,2331,2335,2333,2343,2303,2343,2333,2320,2328,2341,2312,2315,2313,2302,2349,2353,2319,2322,2344,2341,2316,2310,2326,2337,2346,2326,2310,2351,2289,2340,2303,2342,2364,2335,2325,2373,2333,2300,2351,2335,2354,2304,2367,2336,2329,2319,2329,2335,2363,2339,2347,2324,2343,2361,2349,2338,2338,2273,2258,2285,2283,2307,2314,2317,2324,2324,2330,2346,2349,2345,2307,2308,2331,2353,2319,2361,2357,2347,2358,2348,2326,2316,2346,2330,2344,2370,2343,2333,2318,2359,2331,2356,2325,2335,2333,2313,2328,2313,2306,2353,2323,2351,2352,2329,2334,2328,2328,2323,2327,2336,2333,2313,2331,2326,2333,2337,2322,2331,2348,2339,2295,2339,2349,2331,2356,2364,2362,2342,2318,2328,2321,2362,2339,2351,2332,2357,2340,2308,2350,2353,2324,2333,2333,2312,2344,2359,2347,2342,2342,2338,2344,2375,2298,2346,2331,2340,2347,2340,2339,2347,2335,2323,2337,2324,2356,2361,2322,2338,2353,2376,2374,2333,2354,2359,2348,2347,2315,2347,2356,2350,2343,2333,2353,2330,2341,2308,2329,2307,2335,2343,2329,2333,2352,2331,2322,2343,2334,2307,2328,2346,2344,2350,2339,2343,2339,2337,2345,2321,2350,2334,2332,2339,2339,2325,2305,2322,2347,2312,2311,2343,2340,2330,2338,2339,2331,2310,2339,2326,2292,2353,2321,2315,2335,2337,2331,2371,2331,2324,2330,2341,2323,2339,2355,2298,2322,2336,2335,2334,2373,2328,2329,2335,2315,2343,2351,2342,2313,2311,2301,2299,2254,2256,2250,2280,2285,2302,2268,2257,2304,2331,2327,2322,2326,2336,2343,2316,2329,2323,2319,2349,2341,2314,2347,2365,2359,2339,2336,2316,2326,2327,2338,2355,2354,2409,2357,2336,2326,2359,2343,2319,2343,2317,2346,2354,2341,2338,2310,2322,2313,2332,2325,2331,2329,2316,2315,2334,2328,2343,2339,2332,2296,2347,2343,2318,2313,2339,2328,2356,2355,2323,2366,2341,2344,2341,2341,2344,2306,2331,2350,2351,2323,2355,2339,2354,2331,2335,2326,2329,2325,2326,2327,2302,2308,2344,2333,2339,2341,2363,2342,2339,2326,2334,2339,2343,2354,2343,2341,2323,2326,2331,2317,2323,2312,2311,2339,2340,2349,2337,2346,2285,2351,2356,2330,2304,2292,2317,2295,2272,2285,2271,2290,2244,2259,2257,2245,2262,2240,2254,2245,2249,2249,2253,2247,2230,2231,2238,2235,2229,2237,2233,2232,2244,2225,2234,2245,2209,2220,2212,2231,2215,2241,2228,2230,2239,2218,2244,2235,2238,2232,2241,2210,2227,2238,2251,2251,2242,2208,2210,2230,2232,2228,2222,2222,2223,2222,2233,2228,2227,2236,2245,2251,2248,2231,2225,2257,2251,2218,2244,2249,2236,2222,2212,2207,2207,2193,2203,2211,2240,2181,2233,2227,2223,2231,2231,2223,2246,2229,2250,2239,2234,2243,2234,2256,2227,2222,2228,2283,2222,2238,2194,2236,2223,2241,2229,2257,2242,2262,2228,2244,2228,2231,2168,2227,2243,2223,2219,2196,2221,2219,2215,2219,2217,2214,2231,2245,2220,2209,2215,2234,2217,2205,2210,2224,2227,2235,2204,2235,2212,2200,2213,2209,2213,2200,2217,2159,2214,2228,2204,2231,2235,2214,2244,2243,2220,2195,2219,2247,2236,2241,2232,2232,2251,2240,2200,2218,2213,2221,2220,2219,2223,2198,2215,2231,2221,2234,2224,2224,2224,2215,2226,2220,2245,2242,2239,2234,2218,2215,2227,2221,2227,2219,2013,2050,2097,2117,2129,2122,2125,2141,2165,2164,2176,2179,2179,2162,2187,2211,2227,2207,2218,2211,2229,7240,8144,8440,8666,8829,8937,9000,9058,9076,9146,9144,9150,9216,9221,9236,9185,9187,9186,9231,9242,9168,9221,9189,9191,9187,9194,9213,9187,9206,9211,9182,9211,9226,9189,9193,9230,9265,9226,9266,9241,9224,9247,9226,9221,9241,9246,9251,9224,9242,9285,6208,5123,4579,4334,4174,4078,4026,3944,3922,3877,3864,3818,3776,3748,3738,3717,3676,3660,3641,3624,3643,3452,3251,3080,2999,2896,2840,2808,2743,2720,2661,2643,2620,2613,2640,2577,2537,2548,2544,2503,2542,2499,2522,2468,2485,2462,2461,2494,2499,2460,2466,2484,2440,2471,2462,2415,2459,2437,2431,2447,2447,2451,2462,2436,2445,2466,2415,2441,2428,2446,2433,2449,2459,2435,2442,2435,2434,2431,2467,2441,2448,2459,2446,2457,2429,2452,2465,2413,2427,2410,2427,2419,2436,2416,2423,2421,2411,2420,2450,2444,2445,2431,2403,2423,2397,2416,2413,2409,2420,2447,2428,2426,2413,2435,2446,2423,2409,2409,2411,2405,2414,2451,2427,2421,2427,2439,2401,2435,2443,2410,2423,2424,2497,2464,2453,2419,2403,2419,2375,2414,2413,2398,2401,2373,2339,2339,2342,2345,2362,2377,2379,2391,2389,2384,2385,2387,2365,2428,2406,2370,2404,2399,2384,2370,2423,2366,2403,2399,2404,2387,2403,2404,2416,2377,2419,2398,2411,2421,2391,2403,2404,2417,2420,2429,2410,2415,2398,2407,2422,2392,2418,2400,2395,2404,2395,2384,2390,2420,2444,2425,2435,2438,2440,2404,2397,2424,2428,2433,2438,2426,2445,2437,2422,2403,2426,2417,2388,2382,2397,2398,2424,2419,2412,2406,2394,2395,2435,2386,2394,2383,2409,2423,2386,2381,2416,2406,2414,2406,2403,2377,2395,2389,2401,2383,2397,2397,2384,2387,2405,2409,2409,2405,2397,2394,2397,2401,2408,2390,2406,2387,2390,2404,2412,2389,2371,2387,2396,2391,2411,2400,2383,2415,2414,2406,2402,2403,2410,2407,2391,2390,2435,2389,2428,2387,2399,2416,2417,2408,2409,2380,2383,2397,2388,2404,2411,2388,2403,2389,2398,2411,2423,2399,2421,2428,2428,2415,2404,2407,2414,2415,2430,2425,2424,2403,2421,2390,2404,2405,2391,2384,2388,2391,2389,2408,2403,2427,2392,2411,2416,2382,2387,2396,2414,2441,2415,2404,2427,2403,2384,2387,2405,2402,2407,2393,2409,2351,2272,2309,2316,2287,2297,2364,2349,2346,2363,2375,2378,2372,2383,2399,2399,2388,2416,2405,2399,2414,2405,2371,2382,2381,2361,2401,2366,2382,2405,2392,2403,2400,2412,2407,2376,2401,2394,2379,2408,2415,2369,2415,2366,2407,2381,2385,2371,2428,2401,2393,2394,2406,2417,2420,2405,2415,2416,2427,2393,2426,2408,2388,2404,2394,2367,2388,2397,2379,2387,2403,2384,2357,2391,2388,2303,2404,2417,2416,2402,2309,2401,2410,2424,2398,2393,2371,2399,2416,2396,2422,2404,2397,2399,2386,2377,2399,2365,2410,2404,2411,2414,2372,2403,2408,2406,2386,2387,2388,2394,2389,2420,2395,2381,2394,2385,2384,2389,2382,2418,2396,2394,2399,2409,2405,2400,2406,2419,2374,2400,2407,2393,2410,2405,2397,2410,2408,2412,2413,2392,2419,2399,2381,2397,2419,2393,2397,2391,2373,2399,2395,2416,2385,2415,2412,2404,2378,2427,2399,2401,2401,2405,2415,2417,2420,2401,2396,2376,2392,2402,2384,2390,2395,2398,2393,2360,2356,2372,2357,2315,2334,2325,2300,2310,2293,2304,2303,2299,2289,2277,2283,2296,2284,2269,2274,2268,2266,2280,2264,2261,2234,2259,2270,2266,2251,2230,2250,2287,2253,2259,2220,2261,2247,2238,2258,2249,2252,2263,2263,2260,2273,2230,2247,2262,2261,2259,2264,2271,2246,2249,2261,2244,2269,2251,2261,2257,2263,2265,2273,2255,2247,2283,2268,2219,2242,2242,2246,2251,2237,2254,2249,2246,2258,2252,2259,2245,2267,2246,2237,2243,2268,2268,2261,2279,2257,2250,2256,2251,2243,2240,2250,2227,2279,2257,2259,2271,2253,2252,2249,2271,2253,2246,2220,2248,2248,2272,2236,2276,2267,2291,2274,2277,2272,2280,2266,2259,2263,2249,2245,2275,2248,2276,2253,2258,2264,2254,2256,2268,2254,2269,2260,2281,2254,2253,2251,2248,2243,2237,2256,2255,2245,2242,2246,2242,2247,2230,2243,2244,2225,2245,2247,2233,2245,2259,2253,2250,2266,2291,2256,2256,2241,2243,2227,2243,2281,2228,2266,2271,2262,2233,2254,2245,2262,2266,2243,2246,2267,2236,2270,2269,2271,2283,2256,2294,2243,2259,2259,2262,2267,2266,2259,2272,2266,2269,1784,1891,1952,2009,2062,2082,2081,2090,2083,2104,2101,2107,2169,2163,2166,2173,2207,2204,2202,2216,2200,7126,8045,8494,8725,8882,9018,9121,9202,9256,9344,9399,9424,9442,9453,9498,9519,9558,9589,9587,9593,9617,9642,9683,9661,9685,9690,9703,9700,9687,9689,9678,9693,9712,9733,9719,9718,9737,9747,9716,9738,9713,9759,9635,9745,9756,9778,9795,9766,9749,9712,7452,6764,6339,6114,5953,5856,5720,5659,5575,5513,5442,5385,5334,5289,5252,5196,5166,5155,5122,5079,4977,4505,4063,3801,3594,3459,3361,3285,3225,3162,3148,3144,3074,3091,3073,3054,3062,3026,3047,3025,3071,3024,3019,3008,3000,3012,3002,3004,2990,3022,3019,3013,2996,3016,2995,2990,3015,2988,2993,3014,2967,2990,2983,3009,3016,2976,3011,3030,3033,3022,3042,3044,3022,3070,3032,3058,3034,3031,3019,3043,3037,3032,3040,3051,3029,3032,3022,3036,3022,2996,3014,3017,2959,2938,2902,2945,2974,2972,2979,2917,2933,2955,2951,2944,2947,2914,2931,2953,2899,2881,2887,2908,2882,2884,2869,2853,2863,2863,2853,2845,2835,2812,2824,2820,2823,2807,2825,2798,2819,2814,2758,2779,2794,2774,2750,2773,2749,2748,2745,2764,2728,2723,2713,2739,2745,2732,2720,2723,2731,2709,2727,2699,2696,2698,2697,2694,2685,2679,2712,2675,2676,2687,2661,2702,2689,2685,2652,2690,2655,2672,2722,2659,2646,2667,2669,2663,2656,2638,2654,2611,2627,2607,2601,2637,2649,2636,2628,2615,2633,2602,2610,2599,2602,2624,2594,2635,2605,2624,2635,2611,2656,2617,2575,2602,2600,2611,2603,2584,2623,2588,2623,2609,2607,2587,2597,2583,2608,2567,2577,2583,2580,2583,2578,2578,2559,2586,2589,2572,2581,2576,2577,2579,2574,2578,2563,2584,2584,2564,2562,2590,2560,2565,2598,2553,2572,2567,2562,2554,2564,2552,2558,2550,2579,2566,2580,2557,2563,2536,2561,2531,2558,2575,2574,2560,2559,2579,2543,2527,2582,2525,2549,2567,2556,2556,2565,2559,2550,2540,2538,2563,2556,2541,2515,2565,2541,2544,2541,2528,2574,2535,2554,2567,2547,2541,2451,2452,2449,2442,2482,2451,2501,2531,2543,2478,2530,2543,2605,2518,2534,2526,2531,2558,2528,2540,2547,2536,2547,2553,2542,2520,2527,2538,2562,2525,2537,2535,2525,2513,2554,2530,2526,2549,2533,2537,2543,2535,2524,2520,2526,2543,2530,2543,2527,2536,2552,2527,2546,2543,2532,2511,2529,2562,2539,2561,2540,2535,2511,2518,2508,2511,2535,2522,2535,2528,2507,2514,2514,2552,2542,2558,2527,2530,2531,2503,2523,2549,2557,2535,2494,2525,2491,2536,2498,2489,2516,2523,2515,2513,2423,2539,2532,2550,2543,2537,2526,2548,2559,2525,2524,2534,2526,2526,2535,2523,2510,2522,2520,2542,2521,2574,2495,2545,2517,2511,2540,2513,2525,2528,2520,2518,2517,2509,2521,2535,2543,2517,2529,2491,2490,2523,2511,2532,2483,2503,2500,2483,2512,2489,2480,2501,2513,2495,2525,2495,2505,2499,2518,2480,2495,2517,2489,2491,2514,2538,2515,2531,2509,2507,2526,2518,2511,2494,2506,2511,2531,2523,2498,2501,2528,2535,2527,2506,2509,2554,2522,2482,2512,2521,2513,2505,2488,2493,2497,2498,2523,2523,2507,2504,2488,2504,2531,2521,2511,2516,2494,2486,2479,2463,2430,2437,2461,2422,2495,2471,2524,2459,2490,2508,2487,2533,2512,2532,2529,2459,2515,2495,2515,2529,2479,2489,2458,2447,2419,2403,2381,2381,2363,2358,2358,2341,2362,2344,2352,2324,2324,2307,2330,2321,2323,2331,2333,2315,2301,2317,2301,2299,2294,2293,2310,2311,2304,2308,2289,2296,2289,2301,2297,2294,2308,2270,2274,2296,2322,2276,2294,2258,2293,2290,2298,2294,2313,2275,2250,2299,2265,2266,2281,2295,2279,2278,2288,2277,2304,2288,2279,2290,2270,2272,2280,2280,2292,2289,2299,2276,2297,2274,2284,2256,2284,2265,2267,2259,2292,2279,2259,2273,2246,2265,2268,2279,2286,2263,2263,2248,2273,2261,2271,2275,2246,2261,2259,2253,2264,2260,2276,2264,2264,2279,2260,2303,2275,2275,2278,2275,2260,2265,2261,2255,2263,2270,2256,2254,2274,2268,2275,2286,2259,2284,2301,2288,2268,2260,2251,2275,2268,2264,2267,2268,2277,2281,2282,2273,2252,2251,2270,2259,2283,2275,2287,2299,2269,2271,2282,2280,2275,2279,2285,2260,2252,2250,2269,2257,2277,2274,2268,2252,2259,2246,2268,2276,2243,2289,2279,2267,2263,2255,2279,2292,2249,2251,2258,2261,2255,2282,2233,2280,2296,2232,2259,2260,2258,2267,2254,2241,2265,2293,2289,2278,2275,1974,1995,2046,2038,2034,2046,2077,2098,2092,2099,2109,2141,2133,2145,2145,2170,2179,2182,2187,2187,2219,2222,2219,2271,2232,2252,2270,2260,2244,2276,2265,2290,2283,2309,2283,2276,2285,2298,2319,2321,2301,2327,2343,2344,2336,2338,2332,2347,2307,2345,2328,2337,2343,2347,2348,2350,2333,2340,2336,2330,2339,2365,2354,2355,2327,2359,2375,2360,2375,2371,2364,2350,2373,2350,2371,2371,2396,2380,2391,2373,2342,2367,2335,2364,2425,2356,2363,2386,2428,2362,2371,2379,2355,2380,2391,2370,2369,2377,2371,2359,2356,2360,2375,2360,2382,2372,2387,2394,2381,2402,2394,2365,2346,2344,2337,2364,2327,2357,2347,2397,2362,2364,2369,2383,2365,2373,2377,2372,2403,2412,2386,2354,2388,2404,2396,2366,2366,2383,2391,2373,2381,2363,2356,2368,2381,2362,2356,2409,2370,2395,2381,2383,2395,2379,2407,2371,2362,2401,2390,2388,2384,2384,2375,2352,2376,2364,2381,2430,2376,2391,2405,2372,2418,2394,2397,2411,2398,2410,2382,2374,2381,2371,2416,2403,2397,2391,2441,2429,2389,2376,2378,2364,2369,2371,2379,2387,2346,2393,2395,2411,2384,2359,2367,2376,2389,2367,2377,2392,2395,2380,2396,2385,2390,2398,2418,2412,2384,2401,2403,2401,2400,2395,2402,2369,2411,2399,2405,2387,2413,2396,2404,2419,2411,2416,2421,2416,2404,2450,2417,2403,2403,2385,2392,2419,2386,2396,2399,2400,2392,2411,2394,2409,2403,2422,2424,2421,2413,2412,2397,2416,2413,2410,2427,2420,2409,2420,2395,2425,2403,2407,2415,2408,2379,2384,2399,2397,2411,2413,2418,2431,2419,2438,2420,2447,2437,2408,2423,2418,2438,2454,2486,2471,2449,2417,2422,2441,2425,2434,2442,2425,2400,2405,2404,2423,2405,2442,2415,2414,2416,2431,2417,2415,2428,2417,2400,2419,2402,2459,2389,2423,2390,2429,2379,2402,2405,2415,2421,2413,2417,2437,2426,2418,2411,2432,2413,2404,2418,2446,2411,2417,2419,2430,2441,2435,2449,2461,2464,2458,2429,2435,2445,2425,2454,2436,2423,2442,2423,2436,2448,2464,2467,2465,2449,2428,2449,2442,2443,2428,2451,2454,2451,2430,2443,2451,2461,2446,2441,2452,2427,2454,2435,2430,2435,2434,2449,2445,2443,2436,2411,2435,2451,2467,2444,2510,2419,2439,2445,2427,2431,2444,2449,2443,2451,2480,2460,2453,2451,2483,2464,2464,2470,2464,2459,2445,2456,2437,2464,2469,2461,2437,2446,2455,2466,2474,2479,2459,2453,2452,2461,2457,2486,2470,2483,2480,2483,2448,2457,2479,2457,2478,2491,2491,2493,2476,2485,2489,2494,2497,2492,2497,2484,2491,2489,2484,2481,2495,2499,2455,2497,2494,2477,2476,2459,2499,2475,2479,2478,2493,2492,2485,2489,2497,2475,2490,2457,2476,2497,2501,2511,2504,2467,2494,2490,2471,2483,2499,2474,2474,2474,2479,2503,2466,2454,2471,2485,2487,2420,2497,2499,2515,2495,2473,2482,2487,2483,2485,2489,2508,2486,2487,2493,2476,2493,2480,2479,2480,2459,2475,2472,2484,2467,2486,2475,2463,2480,2472,2466,2504,2475,2515,2506,2506,2479,2491,2483,2502,2485,2486,2511,2491,2489,2505,2499,2477,2515,2523,2533,2508,2541,2539,2514,2505,2517,2516,2498,2527,2510,2517,2522,2523,2524,2520,2503,2488,2504,2505,2488,2497,2509,2499,2496,2505,2549,2535,2525,2522,2543,2502,2530,2514,2495,2490,2508,2540,2524,2529,2517,2531,2531,2517,2506,2511,2532,2563,2519,2539,2521,2478,2511,2548,2523,2539,2520,2508,2547,2555,2539,2527,2517,2549]}]]}","md5hash":"d3d36ee5d76d172200e804909dcb1407","created_at":"2015-04-07T18:59:48.480Z","updated_at":"2016-05-05T14:43:43.826Z","is_deleted":null,"creator":{"name":"Stefanie Tietz","id":78,"email":"stietz@msu.edu","bio":"","institute":"MSU DOE-Plant Research Laboratories","profile_url":"https://photosynq.org/users/stefanie-tietz","contributions":3702,"projects":19,"collaborations":8,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/IMG_20140926_135621.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/thumb_IMG_20140926_135621.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/medium_IMG_20140926_135621.jpg"},"latest_activity":"2016-08-22T12:34:56.346Z","badges":[{"name":"","url":""}]}},"creator":{"name":"Stefanie Tietz","id":78,"email":"stietz@msu.edu","bio":"","institute":"MSU DOE-Plant Research Laboratories","profile_url":"https://photosynq.org/users/stefanie-tietz","contributions":3702,"projects":19,"collaborations":8,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/IMG_20140926_135621.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/thumb_IMG_20140926_135621.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/78/medium_IMG_20140926_135621.jpg"},"latest_activity":"2016-08-22T12:34:56.346Z","badges":[{"name":"","url":""}]}},{"id":455,"name":"v1.0 Photosynthesis (ECS, Phi(PSII), Phi(NPQ), Phi(NO))","slug":"v1-0-photosynthesis-ecs-phi-psii-phi-npq-phi-no","description":"Photosynthesis protocol which includes ECS, Phi2, and other similar protocols","pre_selected":false,"macro_id":165,"protocol_json":{"environmental":[["light_intensity",0],["contactless_temp",0],["temperature_humidity_pressure",0]],"pulses":[4000,300,300,300,100,20,30,10,10,10,30,20,400,150,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"a_lights":[[2],[2],[0],[2],[2],[2],[2],[2],[2],[2],[2],[2],[9],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"a_intensities":[["light_intensity"],["light_intensity"],[0],["light_intensity"],["light_intensity"],["light_intensity"],[4500],[4050],[3600],[3150],[4500],["light_intensity"],[400],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"pulsedistance":[1000,1000,1000,1000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000],"m_intensities":[[0],[2000],[2000],[2000],[0],[2000],[2000],[2000],[2000],[2000],[2000],[2000],[0],[2000],[300],[5000],[500],[550],[175],[150],[500],[600],[300],[5000],[500],[550],[175],[150],[350],[450],[850],[5500],[1500],[1950],[275],[250],[500],[2000]],"pulsesize":[2,2,2,2,30,30,30,30,30,30,30,30,30,30,2,2,2,2,2,2,2,6,20,20,20,20,20,20,20,60,60,60,60,60,60,60,60,60],"detectors":[[0],[3],[3],[3],[0],[1],[1],[1],[1],[1],[1],[1],[0],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1]],"meas_lights":[[0],[1],[1],[1],[0],[3],[3],[3],[3],[3],[3],[3],[0],[3],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10]],"averages":1,"protocol_id":455},"created_at":"2016-04-21T19:55:28.383Z","updated_at":"2016-05-16T16:57:46.875Z","is_deleted":false,"md5hash":"7ac65d512efbce4b2ee1657484f4deb5","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqproduction.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":165,"name":"v1.0 Photosynthesis (ECS, Phi(PSII), Phi(NPQ), Phi(NO))","slug":"v1-0-photosynthesis-ecs-phi-psii-phi-npq-phi-no","description":"Photosynthesis protocol which includes ECS, Phi2, and other similar protocols","default_y_axis":"","default_x_axis":"","javascript_code":"// CALCULATIONS FOR PROTON MOTIVE FORCE VIA ECS PORTION OF THE TRACE\n//----------------------------\n\nvar output = {};\nvar spad;\nvar data = json.data_raw;\nvar vhplus;\nvar tau;\nvar ECSt;\nvar quality_flag = 0;\nvar i = 0;\nvar j = 0;\nvar h = 0;\nvar k = 0;\n\nvar smooth1 = data.slice(300,600);\nvar smooth0 = data.slice(300,600);\n\n// points 300 and 301 can be affected by electronic blips, so we set them == to the average of the previous 'on' values\n//----------------------------\nvar fixit = MathMEAN(json.data_raw.slice(230,290));\nsmooth1[0] = fixit;\nsmooth1[1] = fixit;\nsmooth0[0] = fixit;\nsmooth0[1] = fixit;\n\n// create an rolling average for every 2 measurements.  Then repeat with ever 3.  Then 4, etc.  Then repeat that process 5 times.\n//----------------------------\n\nvar tbsmooth = 0;\n\n// first just smooth out the big bumps\n//----------------------------\nfor (k=0;k\u003c15;k++) {\n  for (h=2;h\u003c3;h++) {\n    for (j=1;j\u003c296;j++) {\n      tbsmooth = 0;\n      for (i=0;i\u003ch;i++) {\n        tbsmooth += smooth1[i+j];  // sum current point + next point\n      }\n      smooth1[j] = MathROUND(tbsmooth/h,0);\n    }\n  }\n}\n\n// then roll out the kinks\n//----------------------------\nfor (k=0;k\u003c7;k++) {\n  for (h=2;h\u003c5;h++) {\n    for (j=1;j\u003c296;j++) {\n      tbsmooth = 0;\n      for (i=0;i\u003ch;i++) {\n        tbsmooth += smooth1[i-1+j];  // sum previous 1 point + next h-1 point(s)\n      }\n      smooth1[j] = MathROUND(tbsmooth/h,0);\n    }\n  }\n}\n\n// calculate ECSt\nmax = MathMEAN(smooth1.sort().slice(10,299));\nvar min = smooth1[0];\nECSt = max - min;\n\n// Calculate GH+ by finding the 1/e point in the dark period\n//----------------------------\nvar tmpval;\nvar howclose_e = 1;\nvar tmpslope = 0;\nvar close_e = [];\nvar slope_e = [];\nfor (k=0;k\u003c299;k++) {\n  tmpval = (smooth1[k]-min)/(max-min);\n  howclose_e = (1/Math.E - tmpval);\n  close_e[k] = MathROUND((1/Math.E - tmpval),3);\n  // if slope is largest, then choose it for vhplus up to tau\n  if (((smooth1[k+1]-min)/(max-min) - tmpval) \u003e tmpslope) {\n    vhplus = (smooth1[k+1]-min)/(max-min) - tmpval;\n  }\n  tmpslope = (smooth1[k+1]-min)/(max-min) - tmpval;\n  slope_e[k] = MathROUND((smooth1[k+1]-min)/(max-min) - tmpval,4);\n  // once you hit tau, then stop iterating\n  if (howclose_e \u003c 0) {\n    tau = (smooth1[k]-min)/(max-min);\n    break;\n  }\n}\n\n// Check for data quality issues and add warning or danger flags\n//----------------------------\nvar st_dev_on = MathSTDEV(json.data_raw.slice(20,290));\nif (st_dev_on \u003e 50) {\n//\tdanger('noisy data when calculating ECSt, vhplus and ghplus',output);\n}\nif (vhplus \u003c 0 || tau \u003c 0 || ECSt \u003c 0) {\n//\twarning('vhplus, ghplus, or ECSt are negative, which is the opposite of the expected response.  Please check the raw trace and seriously consider excluding this point.',output);\n}\n\n\n\n\n\noutput [\"ECSt\"] = MathROUND(ECSt,2);\noutput [\"vhplus\"] = MathROUND(vhplus,3);\noutput [\"ghplus\"] = MathROUND(1/tau,4);\n//output [\"close_e\"] = close_e;\n//output [\"slope_e\"] = slope_e;\n//output [\"smooth1\"] = smooth1;\n//output [\"smooth0\"] = smooth0;\n\n\n// CALCULATIONS FOR ABSORBANCE / SPAD PORTION OF THE TRACE\n//----------------------------\n\nvar abs_starts = 1180; // when does the Phi2 measurement start (sub\nvar data = json.data_raw;\nvar lights = [1,2,3,4,6,8,9,10];// define the lights to have absorbance measured\nvar raw_at_blank1 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank2 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank3 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank1 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank2 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank3 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank1 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank2 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank3 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank1 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank2 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank3 = [0,0,0,0,0,0,0,0];\nvar light;\nvar pulses = 10;// number of pulses in a cycle\n\n/*\n** Loop through the lights.  If it's zero, skip it.  If it's not in the acceptable range (\u003e500 but \u003c65534 (max)) skip it.\n** Then choose the first blank (starting with 1 moving to 3) which fulfills this criteria\n** Otherwise, calculate absorbance and transmittance and a 'spad'-like value using LED 6 (940 on clamp) to calibrate thickness\n*/\n//----------------------------\n\nfor (var i = 0;i\u003clights.length;i++) { // loop through and save one averaged 'point' for each of the cycles\n  light = lights[i];\n  raw_at_blank1[light] = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+2),(abs_starts + i*pulses+8)));\n  raw_at_blank2[light] = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+82),(abs_starts + i*pulses+88)));\n  raw_at_blank3[light] = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+162),(abs_starts + i*pulses+168)));\n  if (json.colorcal_blank1[light] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 500 \u0026\u0026 raw_at_blank1[light] \u003c 65534) {\n    abs_at_blank1[light] = MathROUND(-1*MathLOG(raw_at_blank1[light]/json.colorcal_blank1[light]),3);\n    trans_at_blank1[light] = MathROUND(raw_at_blank1[light]/json.colorcal_blank1[light],3);\n//\toutput [\"light\".concat(light.toString(),\"_transmittance\")]  = trans_at_blank1[light];\n    output [\"light\".concat(light.toString(),\"_absorbance\")]  = abs_at_blank1[light];\n//\toutput [\"light\".concat(light.toString(),\"_raw1\")]  = raw_at_blank1[light];\n//\toutput [\"light\".concat(light.toString(),\"_blank1\")]  = json.colorcal_blank1[light];\n  }\n/*\n  if (json.colorcal_blank2[light] != 0 \u0026\u0026 raw_at_blank2[light] \u003e 500 \u0026\u0026 raw_at_blank2[light] \u003c 65534) {\n    abs_at_blank2[light] = MathROUND(-1*MathLOG(raw_at_blank2[light]/json.colorcal_blank2[light]),3);\n    trans_at_blank2[light] = MathROUND(raw_at_blank2[light]/json.colorcal_blank2[light],3);\n    output [\"light\".concat(light.toString(),\"_absorbance2\")]  = abs_at_blank2[light];\n//    output [\"light\".concat(light.toString(),\"_transmittance2\")]  = trans_at_blank2[light];\n//\toutput [\"light\".concat(light.toString(),\"_raw2\")]  = raw_at_blank2[light];\n//\toutput [\"light\".concat(light.toString(),\"_blank2\")]  = json.colorcal_blank2[light];\n  }\n  if (json.colorcal_blank3[light] != 0 \u0026\u0026 raw_at_blank3[light] \u003e 500 \u0026\u0026 raw_at_blank3[light] \u003c 65534) {\n    abs_at_blank3[light] = MathROUND(-1*MathLOG(raw_at_blank3[light]/json.colorcal_blank3[light]),3);\n    trans_at_blank3[light] = MathROUND(raw_at_blank3[light]/json.colorcal_blank3[light],3);\n    output [\"light\".concat(light.toString(),\"_absorbance3\")]  = abs_at_blank3[light];\n//    output [\"light\".concat(light.toString(),\"_transmittance3\")]  = trans_at_blank3[light];\n//\toutput [\"light\".concat(light.toString(),\"_raw3\")]  = raw_at_blank3[light];\n//\toutput [\"light\".concat(light.toString(),\"_blank3\")]  = json.colorcal_blank3[light];\n  }\n  */\n}\n\nfor (var i = 0;i\u003c4;i++) { // loop through and save one averaged 'point' for each of the cycles\n  light = lights[i];\n  var averages = 0;\n  if (json.colorcal_blank1[light] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 500 \u0026\u0026 raw_at_blank1[light] \u003c 65534) {\n\tspad_at_blank1[light] = MathROUND(100*MathLOG((raw_at_blank1[6] / json.colorcal_blank1[6])/(raw_at_blank1[light] / json.colorcal_blank1[light])),2);\n\toutput [\"light\".concat(light.toString(),\"_spad1\")]  = spad_at_blank1[light];\n    averages++;\n  }\n  if (json.colorcal_blank2[light] != 0 \u0026\u0026 raw_at_blank2[light] \u003e 500 \u0026\u0026 raw_at_blank2[light] \u003c 65534) {\n\tspad_at_blank2[light] = MathROUND(100*MathLOG((raw_at_blank2[6] / json.colorcal_blank2[6])/(raw_at_blank2[light] / json.colorcal_blank2[light])),2);\n\toutput [\"light\".concat(light.toString(),\"_spad2\")]  = spad_at_blank2[light];\n    averages++;\n  }\n  if (json.colorcal_blank3[light] != 0 \u0026\u0026 raw_at_blank3[light] \u003e 500 \u0026\u0026 raw_at_blank3[light] \u003c 65534) {\n\tspad_at_blank3[light] = MathROUND(100*MathLOG((raw_at_blank3[6] / json.colorcal_blank3[6])/(raw_at_blank3[light] / json.colorcal_blank3[light])),2);\n\toutput [\"light\".concat(light.toString(),\"_spad3\")]  = spad_at_blank3[light];\n    averages++;\n  }\n  output [\"light\".concat(light.toString(),\"_spad\")]  = MathROUND((spad_at_blank1[light] + spad_at_blank2[light] + spad_at_blank3[light])/averages,2);\n}\n\n//output [\"colorcal_blank1\"]  = json.colorcal_blank1;\n//output [\"colorcal_blank2\"]  = json.colorcal_blank2;\n//output [\"colorcal_blank3\"]  = json.colorcal_blank3;\n\n// consider adding some warnings here... could be noisy, but also if the signal is \u003e blank (suggest to recalibate?)\n\n\n// CALCULATIONS FOR PHI2 PORTION OF THE TRACE\n//----------------------------\n\n\n//var sample_cal = MathMEAN(data.slice(2,18));\n\nvar inverse_intensity = [1/4500,1/4050,1/3600,1/3150];\nvar ps2_starts = 900; // when does the Phi2 measurement start (sub\n\n/*\n// retrieve the baseline information from the data JSON and save (using measuring light 15, calibrating light 14)\n//----------------------------\nfor (i in json.get_ir_baseline) {\t\n\tif (json.get_ir_baseline[i][0] == 15) {\n\t\tvar slope_light = json.get_ir_baseline[i][1];\n\t\tvar yint_light = json.get_ir_baseline[i][2];\n\t}\n\tif (json.get_ir_baseline[i][0] == 14) {\n\t\tvar slope_cal = json.get_ir_baseline[i][1];\n\t\tvar yint_cal = json.get_ir_baseline[i][2];\n\t}\n}\n\n// calculate the baseline\n//----------------------------\nvar shinyness = (sample_cal-yint_cal)/slope_cal; // where 0 is dull black electrical tape, and 1 is shiny aluminum\nvar baseline = slope_light*shinyness+yint_light;\nif (!baseline) {\n  baseline = 0;\n}\n*/\n\nvar baseline = 0;\n\n// Set our Apparent FmPrime, 3 FmPrime steps, and Fs to calculate both traditional fv/fm and new Multi-phase flash fv/fm\n//----------------------------\nvar Fs = MathMEAN(data.slice(ps2_starts + 1,ps2_starts + 4)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar Fs_std = MathSTDEV(data.slice(ps2_starts + 1,ps2_starts + 4)); // create standard deviation for this value for error checking\n\nvar sat_vals = data.slice(ps2_starts + 25,ps2_starts + 48).sort();  // sort the saturating light values from low to high\nvar AFmP = MathMEAN(sat_vals.slice(2,20)) - baseline; // take the 18 largest values and average them\nvar AFmP_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checkingjson.data_raw.slice(953,955)\n\nsat_vals = data.slice(ps2_starts + 84,ps2_starts + 110).sort();  // sort the saturating light values from low to high\nvar FmP_end = MathMEAN(sat_vals.slice(2,23)) - baseline; // take the 21 largest values and average them\nvar FmP_end_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 52,ps2_starts + 60).sort();  // sort the saturating light values from low to high\nvar FmP_step1 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step1_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 62,ps2_starts + 70).sort();  // sort the saturating light values from low to high\nvar FmP_step2 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step2_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 72,ps2_starts + 80).sort();  // sort the saturating light values from low to high\nvar FmP_step3 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step3_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\n// Calculations for F0'\n// ----------------------------\nvar FoPrime_values = json.data_raw.slice(ps2_starts + 160,ps2_starts + 270).sort();\nvar FoPrime = MathMEAN(FoPrime_values.slice(5,10)) - baseline;\nvar FoPrime_std = MathSTDEV(FoPrime_values); // create standard deviation for this value for error checking\n\n// Calculations for corrected FmPrime using multi-phase flash\n// ----------------------------\nvar reg = MathLINREG(inverse_intensity, [AFmP,FmP_step1,FmP_step2,FmP_step3]);\n\n// Calculate Phi2 w/ and w/out multi-phase flash\n// ----------------------------\nvar fvfm_noMPF = (AFmP-Fs)/AFmP;\nvar fvfm_MPF = (reg.b-Fs)/reg.b;\n\n\n// Calculate NPQt, PhiNPQ, PhiNO, qL w/ and w/out multi-phase flash\n// ----------------------------\nvar npqt_MPF = (4.88 / ((reg.b / FoPrime) -1) )-1;\nvar npqt_noMPF = (4.88 / ((AFmP / FoPrime) -1) )-1;\nvar qL_MPF = ((reg.b - Fs)*FoPrime)/((reg.b-FoPrime)*Fs);\nvar qL_noMPF = ((AFmP - Fs)*FoPrime)/((AFmP-FoPrime)*Fs);\nvar PhiNO_MPF = 1/(npqt_MPF + 1 + qL_MPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNO_noMPF = 1/(npqt_noMPF + 1 + qL_noMPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNPQ_MPF = 1-fvfm_MPF-PhiNO_MPF; //based on equation 53 in Kramer et al., 2004 PRES \nvar PhiNPQ_noMPF = 1-fvfm_noMPF-PhiNO_noMPF; //based on equation 53 in Kramer et al., 2004 PRES \n\n// Create the variables to be printed (assume to use the MPF values unless there is a good reason not to)\n// ----------------------------\nvar fvfm = fvfm_MPF;\nvar npqt = npqt_MPF;\nvar PhiNO = PhiNO_MPF;\nvar PhiNPQ = PhiNPQ_MPF;\nvar qL = qL_MPF;\nvar FmPrime = reg.b;\n\n/****************OUTPUT VALUES FROM MACRO *******************/\n\n// If multi-phase flash steps are flat or positive slope, then just use the normal Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nif (reg.m \u003e 0) {\n  fvfm = fvfm_noMPF;\n  npqt = npqt_noMPF;\n  PhiNO = PhiNO_noMPF;\n  PhiNPQ = PhiNPQ_noMPF;\n  qL = qL_noMPF;\n  FmPrime = AFmP;\n  \n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n//\twarning('Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_noMPF variable',output);\n\toutput[\"Phi2_noMPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n//\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n\n  }\n  else {\n\t  output[\"Phi2\"] \t\t= MathROUND(fvfm,3);\n  }\n  \n  if (npqt \u003c= 0) {\n\toutput['PhiNPQ']\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n//\twarning(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_noMPF and PhiNPQ_noMPF variable\",output);\n\toutput['PhiNPQ_noMPF']  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_noMPF\"]\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput['PhiNPQ']  = MathROUND(PhiNPQ,3);\n\toutput['NPQt']\t\t= MathROUND(npqt,3);\n  }\n\toutput['PhiNO']\t\t= MathROUND(PhiNO,3);\n\toutput['qL']\t\t= MathROUND(qL,3);\n}\n\n// Otherwise, use the multi-phase flash calculation for Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nelse {\n  if (fvfm \u003c= 0) {\n//\twarning('Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_MPF variable',output);\n\toutput[\"Phi2_MPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n//\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n  }\n  else {\n    output[\"Phi2\"]\t\t\t= MathROUND(fvfm,3);\n  }\n  if (npqt \u003c= 0) {\n\toutput['PhiNPQ']\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n//\twarning(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_MPF and PhiNPQ_MPF variables\",output);\n\toutput['PhiNPQ_MPF']  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_MPF\"]\t\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput['PhiNPQ']  = MathROUND(PhiNPQ,3);\n\toutput['NPQt']\t\t= MathROUND(npqt,3);\n  }\n\toutput['PhiNO']\t\t= MathROUND(PhiNO,3);\n\toutput['qL']\t\t\t= MathROUND(qL,3);\n}\n\n// only display LEF if there is a light intensity measurement \u003e 0 \n// ----------------------------\nif (typeof json.light_intensity != \"undefined\" \u0026\u0026 json.light_intensity \u003e 0) {\n\toutput[\"LEF\"] \t\t= MathROUND((fvfm  * 0.45 * json.light_intensity),3);\n}\n\noutput[\"FmPrime\"] \t\t= MathROUND(FmPrime,3);\noutput[\"Fs\"] \t\t\t= MathROUND(Fs,1);\noutput['FoPrime']\t\t= MathROUND(FoPrime,0);\noutput[\"RFd\"]           = Number(MathROUND(((FmPrime/Fs)-1),3));\noutput['ratio MPF/noMPF, Phi2 '] = MathROUND(fvfm_MPF / fvfm_noMPF,5);\noutput['ratio MPF/noMPF, PhiNPQ '] = MathROUND(PhiNPQ_MPF / PhiNPQ_noMPF,5);\noutput['ratio MPF/noMPF, PhiNO '] = MathROUND(PhiNO_MPF / PhiNO_noMPF,5);\noutput['ratio MPF/noMPF, PhiNO '] = MathROUND(npqt_MPF / npqt_noMPF,5);\noutput[\"MPF_slope\"] \t= MathROUND(reg.m,3);\noutput[\"MPF_rsquared\"] \t= MathROUND(reg.r,3);\n/*\noutput[\"Phi2_MPF\"] \t\t= MathROUND(fvfm_MPF,3);\noutput[\"Phi2_noMPF\"] \t= MathROUND(fvfm,3);\noutput[\"FmPrime_MPF\"] \t= MathROUND(reg.b,3);\noutput[\"FmPrime_noMPF\"] = MathROUND(AFmP,1);\noutput['qL_MPF']\t\t= MathROUND(qL_MPF,3);\noutput['qL_noMPF']      = MathROUND(qL,3);\noutput['PhiNPQ_MPF']    = MathROUND(PhiNPQ_MPF,3);\noutput['PhiNPQ_noMPF']  = MathROUND(PhiNPQ,3);\noutput['PhiNO_MPF']\t\t= MathROUND(PhiNO_MPF,3);\noutput['PhiNO_noMPF']\t= MathROUND(PhiNO,3);\noutput[\"Fs_std\"] \t\t\t= MathROUND(Fs_std,1);\noutput[\"AFmP_std\"] \t\t\t= MathROUND(AFmP_std,1);\noutput[\"FmP_step1_std\"] \t= MathROUND(FmP_step1_std,1);\noutput[\"FmP_step2_std\"] \t= MathROUND(FmP_step2_std,1);\noutput[\"FmP_step3_std\"] \t= MathROUND(FmP_step3_std,1);\noutput[\"FmP_end_std\"] \t\t= MathROUND(FmP_end_std,1);\noutput[\"FoPrime_std\"] \t\t\t= MathROUND(FoPrime_std,1);\n*/\n\n//output[\"FmP_step1\"] = MathROUND(FmP_step1,3);\n//output[\"FmP_step2\"] = MathROUND(FmP_step2,3);\n//output[\"FmP_step3\"] = MathROUND(FmP_step3,3);\n//output[\"intensity inverse\"] = inverse_intensity;\n//output[\"steps\"] = [AFmP,FmP_step1,FmP_step2,FmP_step3];\n//output[\"slopey\"] = FmP_end/AFmP - AFmP/AFmP ;\n\nif (baseline != 0) {\n  output[\"baseline\"] \t= baseline;\n}\nelse {\n  output[\"baseline\"] \t= 0;\n}\n\n// Check for data quality issues and add warning or danger flags\n//----------------------------\n\nif (Fs_std \u003e 100\t) {\n//\tdanger(\"noisy Fs\", output);\n}\nif (AFmP_std \u003e 200) {\n//\tdanger(\"noisy FmPrime\", output);\n}\nif (FmP_step1_std \u003e 60 | FmP_step2_std \u003e 60 | FmP_step3_std \u003e 60 | FmP_end_std \u003e 200) {\n//\tdanger(\"noisy  multi-phase flash steps\",output);\n}\nif (FoPrime_std \u003e 150) {\n//\tdanger(\"noisy FoPrime\", output);\n}\nif (reg.m \u003e 0) {\n//\tinfo(\"Used Phi2 and not Phi2 MPF - ambient light level was too low to apply MPF calculation\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003e .1) {\t\n//  info(\"FmPrime slopes down.  This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating light on these samples\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\n//\tinfo(\"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\",output);\n}\n\n// Finally, use the \"order\" object to define the order of the outputs (focus on the top 6 most important for the user to see)\n//----------------------------\noutput[\"order\"] = [\"Phi2\",\"PhiNPQ\",\"PhiNO\",\"ECSt\", \"vhplus\", \"light1_spad\"];\n\nreturn output;","json_data":"{\"id\":268186,\"user_id\":322,\"status\":\"submitted\",\"api_version\":\"3\",\"location\":[\"42.72261350\",\"-84.47478990\"],\"user_answers\":{\"11170\":\"cowpea\",\"11171\":\"watering\",\"11172\":\"YL\"},\"sample\":[[{\"time\":1462481576182,\"protocol_id\":1,\"light_intensity\":134,\"r\":189,\"g\":91,\"b\":51,\"contactless_temp\":23.05,\"thickness_raw\":42864,\"x_tilt_raw\":-585,\"y_tilt_raw\":164,\"z_tilt_raw\":-750,\"x_cardinal_raw\":-329,\"y_cardinal_raw\":-251,\"z_cardinal_raw\":1056,\"colorcal_blank1\":[\"0.000000\",\"20894.500000\",\"33188.500000\",\"24382.500000\",\"28304.500000\",\"0.000000\",\"35158.500000\",\"0.000000\",\"34442.000000\",\"32102.000000\",\"34924.500000\"],\"colorcal_blank2\":[\"0.000000\",\"20206.000000\",\"33826.000000\",\"22745.500000\",\"28212.000000\",\"0.000000\",\"34476.000000\",\"0.000000\",\"36581.500000\",\"41532.000000\",\"18949.500000\"],\"colorcal_blank3\":[\"0.000000\",\"23062.000000\",\"19946.500000\",\"27572.000000\",\"29149.500000\",\"0.000000\",\"40950.000000\",\"0.000000\",\"44904.500000\",\"40271.500000\",\"16734.000000\"],\"data_raw\":[5547,5681,5684,5681,5687,5684,5679,5679,5682,5681,5679,5677,5678,5683,5684,5685,5689,5686,5684,5687,5686,5685,5683,5685,5681,5683,5681,5682,5686,5681,5683,5682,5682,5682,5679,5682,5679,5678,5679,5679,5679,5679,5681,5682,5685,5679,5683,5685,5687,5683,5682,5685,5684,5680,5682,5682,5683,5683,5684,5683,5677,5680,5680,5679,5676,5676,5682,5682,5682,5684,5687,5684,5683,5683,5685,5682,5679,5683,5679,5679,5681,5682,5683,5685,5685,5682,5681,5687,5682,5686,5686,5685,5683,5683,5685,5681,5683,5684,5686,5682,5683,5680,5675,5685,5686,5688,5684,5682,5683,5683,5681,5679,5678,5684,5680,5685,5686,5687,5686,5683,5682,5682,5683,5681,5683,5681,5676,5682,5678,5682,5683,5690,5690,5680,5685,5683,5687,5682,5683,5684,5679,5677,5675,5681,5683,5683,5686,5687,5683,5684,5685,5679,5679,5677,5684,5689,5683,5683,5679,5683,5682,5683,5680,5679,5680,5676,5684,5687,5681,5683,5683,5683,5686,5683,5684,5681,5680,5679,5681,5676,5676,5683,5682,5688,5682,5683,5682,5681,5682,5682,5683,5681,5679,5683,5680,5679,5678,5681,5679,5679,5679,5679,5678,5677,5680,5678,5677,5678,5681,5685,5681,5686,5686,5686,5686,5684,5685,5684,5685,5684,5683,5683,5683,5683,5683,5681,5679,5680,5682,5682,5678,5678,5679,5679,5677,5678,5681,5683,5684,5687,5688,5684,5683,5685,5681,5680,5682,5683,5682,5683,5682,5682,5679,5681,5676,5680,5684,5685,5686,5685,5682,5683,5683,5683,5680,5677,5679,5680,5679,5678,5684,5682,5679,5681,5679,5686,5683,5684,5683,5683,5681,5682,5683,5683,5680,5681,5678,5679,5674,5678,5678,5678,5679,5680,5683,5681,5683,5683,5687,5684,5684,5686,5685,5683,5681,5687,5684,5681,5685,5681,5685,5687,5692,5690,5685,5687,5690,5687,5687,5687,5688,5686,5682,5682,5686,5686,5686,5686,5686,5693,5691,5695,5693,5693,5687,5687,5694,5688,5695,5693,5688,5687,5685,5690,5691,5693,5692,5695,5694,5689,5689,5691,5693,5690,5687,5687,5688,5685,5686,5689,5688,5692,5694,5695,5697,5692,5695,5695,5696,5694,5696,5693,5694,5692,5693,5691,5687,5689,5697,5699,5696,5698,5695,5694,5691,5693,5696,5695,5693,5690,5690,5687,5689,5691,5691,5696,5695,5698,5696,5694,5693,5693,5694,5692,5695,5691,5691,5687,5688,5692,5694,5694,5695,5695,5699,5693,5697,5694,5697,5693,5695,5691,5693,5692,5693,5689,5688,5687,5694,5692,5690,5697,5696,5695,5695,5696,5694,5695,5692,5692,5689,5692,5693,5695,5699,5696,5699,5695,5695,5697,5695,5695,5693,5690,5692,5691,5692,5687,5693,5690,5693,5690,5689,5693,5689,5696,5696,5699,5699,5696,5695,5694,5697,5692,5694,5696,5692,5694,5692,5696,5691,5691,5691,5691,5692,5691,5698,5695,5698,5695,5698,5698,5696,5699,5695,5695,5695,5695,5697,5691,5693,5694,5694,5690,5689,5690,5692,5695,5695,5696,5697,5695,5698,5694,5695,5695,5693,5695,5688,5689,5694,5696,5698,5695,5696,5695,5695,5692,5691,5692,5695,5698,5697,5699,5697,5695,5697,5695,5693,5694,5695,5695,5695,5697,5695,5694,5692,5695,5690,5687,5692,5692,5693,5695,5691,5697,5695,5697,5696,5697,5699,5695,5697,5697,5694,5695,5694,5693,5693,5690,5689,5691,5695,5696,5696,5698,5698,5697,5695,5693,5693,5695,5693,5696,5687,5687,5689,5695,5695,5695,5701,5696,5696,5693,5694,5695,5695,5694,5693,5695,5695,5693,5692,5687,5690,5687,5691,5686,5685,5689,5691,5693,5693,5696,5691,5691,5693,5691,5691,5685,5691,5687,5686,5690,5691,5695,5691,5689,5693,5690,5689,5687,5689,5685,5687,5686,5686,5687,5685,5685,5689,5691,5691,5695,5696,5689,5691,5690,5692,5690,5686,5687,5682,5688,5686,5691,5694,5693,5691,5692,5693,5688,5692,5689,5688,5689,5689,5688,5689,5690,5693,5689,5689,5682,5687,5685,5685,5689,5690,5694,5690,5693,5691,5686,5688,5687,5691,5682,5685,5684,5683,5686,5687,5691,5692,5688,5684,5693,5691,5687,5690,5689,5689,5687,5688,5687,5687,5689,5685,5685,5686,5681,5684,5682,5685,5687,5691,5689,5686,5689,5688,5688,5684,5688,5687,5688,5690,5684,5689,5687,5681,5681,5681,5684,5680,5680,5685,5682,5681,5683,5685,5685,5687,5687,5691,5690,5690,5690,5688,5688,5690,5689,5691,5687,5690,5689,5692,5687,5682,5690,5688,5686,5689,5688,5689,5682,5684,5686,5691,5686,5687,5687,5685,5685,5684,5689,5687,5686,5683,5682,5680,5677,5685,5687,5685,5688,5689,5690,5687,5688,5690,5686,5687,5686,5686,5682,5685,5685,5686,5686,5682,5682,5682,5682,5687,5690,5691,5687,5690,5688,5685,5685,5686,5688,5683,5686,5687,5687,5685,5682,5682,5684,5685,5684,5689,5689,5684,5690,5686,5687,5681,5679,5679,5682,5685,5686,5690,5688,5685,5689,5688,5691,5687,5686,5687,5687,5685,5686,5687,5679,5681,5683,5683,5685,5683,5690,5690,5686,5688,5688,5686,5684,5687,5686,5685,5686,5682,5682,5680,5685,5686,5687,5690,5689,5684,5688,5685,5685,5687,5687,5685,5685,5681,5685,5685,5682,5683,5678,5681,5683,5683,5683,5683,5687,5689,5689,5686,5691,5685,5687,3988,3997,4006,4013,4023,4017,4017,4027,4024,4030,4023,4035,4033,4030,4036,4028,4031,4034,4031,4043,4034,8922,9680,10132,10400,10558,10682,10775,10841,10894,10937,10984,11014,11043,11075,11095,11119,11127,11155,11180,11179,11203,11215,11237,11248,11248,11274,11289,11299,11308,11318,11270,11262,11264,11281,11280,11293,11291,11311,11310,11313,11242,11238,11248,11249,11247,11254,11255,11270,11269,11283,11198,11184,11186,11187,11193,11190,11192,11215,11210,11215,11416,11456,11483,11479,11493,11499,11501,11512,11502,11517,11514,11522,11526,11527,11530,11521,11529,11538,11532,11538,11530,11546,11541,11537,11545,11537,11546,11542,11543,11550,8841,8087,7713,7479,7300,7143,7033,6924,6826,6739,6662,6599,6535,6481,6422,6376,6343,6289,6263,3004,2958,2935,2939,2921,2902,2903,2896,2895,2886,2883,2887,2872,2871,2871,2865,2867,2855,2866,2863,2853,2849,2851,2857,2853,2843,2852,2843,2847,2843,2843,2849,2837,2843,2847,2837,2842,2828,2846,2843,2836,2835,2838,2841,2834,2829,2838,2834,2839,2832,2835,2834,2825,2834,2841,2835,2835,2826,2843,2834,2829,2831,2834,2841,2833,2829,2835,2830,2831,2833,2835,2839,2827,2840,2842,2833,2831,2831,2844,2838,2834,2837,2840,2842,2833,2839,2839,2836,2839,2840,2842,2836,2830,2849,2837,2839,2838,2841,2848,2834,2839,2840,2840,2845,2833,2849,2843,2835,2844,2840,2843,2841,2837,2849,2844,2840,2840,2843,2852,2843,2844,2848,2848,2848,2840,2850,2846,2847,2850,2848,2850,2844,2843,2855,2850,2852,2843,2855,2856,2846,2851,2851,2855,2857,2850,2858,2850,2853,2853,2856,1289,1187,1185,1186,1186,1187,1185,1186,1186,1183,331,376,379,378,377,377,375,377,377,378,1309,871,870,869,869,867,869,869,867,869,118,91,86,93,90,87,89,89,92,86,10772,10194,10181,10185,10181,10187,10181,10184,10186,10184,11569,10330,10321,10313,10310,10310,10314,10323,10317,10315,13767,14263,14269,14265,14273,14260,14259,14255,14253,14257,8807,8461,8444,8432,8422,8419,8414,8413,8419,8414,9298,9297,9303,9297,9301,9296,9299,9298,9297,9299,2862,2862,2862,2864,2864,2861,2863,2862,2863,2862,6817,6813,6814,6813,6812,6814,6812,6814,6812,6813,447,439,439,441,438,440,440,440,439,437,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,45939,45513,45363,45265,45169,45112,45051,45010,44967,44936,50175,58880,58918,58915,58919,58912,58918,58923,58918,58919,7495,7704,7713,7707,7712,7706,7712,7706,7708,7711,40592,53273,53305,53295,53279,53265,53261,53249,53243,53225,2336,3250,3266,3262,3263,3270,3263,3266,3266,3267,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535]}]],\"firmware_version\":\"0.54\",\"device_version\":\"1\",\"device_id\":0,\"time\":1462481576163,\"time_offset\":240}","md5hash":"8b7a38a4bb4fd446a12ff25af7f83837","created_at":"2016-04-28T03:12:30.064Z","updated_at":"2016-05-06T17:25:00.853Z","is_deleted":false,"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}},"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}},{"id":256,"name":"The One v3.0 (Phi2, NPQt, using Multi-Phase Flash)","slug":"the-one-v3-0-phi2-npqt-using-multi-phase-flash","description":"The One Protocol to rule them all!  Phi2, NPQt combined.\r\n\r\nChanges from previous The One protocol:\r\n- Removed the Phi1 measurement, which was producing a lot of invalid data (removed by Dan and Frank)\r\n- Implemented the multi-phase flash protocol created by Tom Avenson","pre_selected":false,"macro_id":129,"protocol_json":{"pulses":[20,200,20,30,10,10,10,30,20,400,150],"environmental":[["light_intensity",0],["relative_humidity",0],["temperature",0]],"get_ir_baseline":[15,14],"act_background_light":20,"tcs_to_act":100,"act1_lights":[0,20,20,20,20,20,20,20,20,11,0],"act_intensities":[0,-1,-1,692,614,537,460,692,-1,0,0],"cal_intensities":[4095,0,0,0,0,0,0,0,0,0,0],"meas_intensities":[0,0,4095,4095,4095,4095,4095,4095,4095,4095,4095],"pulsedistance":10000,"pulsesize":10,"detectors":[[34],[0],[34],[34],[34],[34],[34],[34],[34],[34],[34]],"meas_lights":[[14],[0],[15],[15],[15],[15],[15],[15],[15],[0],[15]],"protocol_id":256},"created_at":"2015-08-13T18:58:11.822Z","updated_at":"2017-01-06T12:22:21.227Z","is_deleted":null,"md5hash":"402d82037037e29fd5161bad0e5978d9","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqproduction.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":129,"name":"The One v3.0 (Phi2, NPQt, using multi-phase flash)","slug":"the-one-v3-0-phi2-npqt-using-multi-phase-flash","description":"The One Protocol to rule them all! Phi2, NPQt combined. Changes from previous The One protocol: - Removed the Phi1 measurement, which was producing a lot of invalid data (removed by Dan and Frank) - Implemented the multi-phase flash protocol created by Tom Avenson","default_y_axis":"LEF","default_x_axis":"light_intensity","javascript_code":"var data = json.data_raw;\nvar output = {};\n//output[\"flag\"] = {\"info\":[],\"warning\":[],\"danger\":[]};\nvar sample_cal = MathMEAN(data.slice(2,18));\n\nvar inverse_intensity = [1/692,1/614,1/537,1/460];\n\n// retrieve the baseline information from the data JSON and save (using measuring light 15, calibrating light 14)\n//----------------------------\nfor (i in json.get_ir_baseline) {\t\n\tif (json.get_ir_baseline[i][0] == 15) {\n\t\tvar slope_light = json.get_ir_baseline[i][1];\n\t\tvar yint_light = json.get_ir_baseline[i][2];\n\t}\n\tif (json.get_ir_baseline[i][0] == 14) {\n\t\tvar slope_cal = json.get_ir_baseline[i][1];\n\t\tvar yint_cal = json.get_ir_baseline[i][2];\n\t}\n}\n\n// calculate the baseline\n//----------------------------\nvar shinyness = (sample_cal-yint_cal)/slope_cal; // where 0 is dull black electrical tape, and 1 is shiny aluminum\nvar baseline = slope_light*shinyness+yint_light;\n\nif (!baseline) {\n  baseline = 0;\n}\n\n// Set our Apparent FmPrime, 3 FmPrime steps, and Fs to calculate both traditional fv/fm and new Multi-phase flash fv/fm\n//----------------------------\nvar Fs = MathMEAN(data.slice(21,24)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar Fs_std = MathSTDEV(data.slice(21,24)); // create standard deviation for this value for error checking\n\nvar sat_vals = data.slice(45,68).sort();  // sort the saturating light values from low to high\nvar AFmP = MathMEAN(sat_vals.slice(2,20)) - baseline; // take the 18 largest values and average them\nvar AFmP_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(104,130).sort();  // sort the saturating light values from low to high\nvar FmP_end = MathMEAN(sat_vals.slice(2,23)) - baseline; // take the 21 largest values and average them\nvar FmP_end_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(72,80).sort();  // sort the saturating light values from low to high\nvar FmP_step1 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step1_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(82,90).sort();  // sort the saturating light values from low to high\nvar FmP_step2 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step2_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(92,100).sort();  // sort the saturating light values from low to high\nvar FmP_step3 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step3_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\n// Calculations for F0'\n// ----------------------------\nvar FoPrime_values = json.data_raw.slice(180,290).sort();\nvar FoPrime = MathMEAN(FoPrime_values.slice(5,10)) - baseline;\nvar FoPrime_std = MathSTDEV(FoPrime_values); // create standard deviation for this value for error checking\n\n// Calculations for corrected FmPrime using multi-phase flash\n// ----------------------------\nvar reg = MathLINREG(inverse_intensity, [AFmP,FmP_step1,FmP_step2,FmP_step3]);\n\n// Calculate Phi2 w/ and w/out multi-phase flash\n// ----------------------------\nvar fvfm_noMPF = (AFmP-Fs)/AFmP;\nvar fvfm_MPF = (reg.b-Fs)/reg.b;\n\n\n// Calculate NPQt, PhiNPQ, PhiNO, qL w/ and w/out multi-phase flash\n// ----------------------------\nvar npqt_MPF = (4.88 / ((reg.b / FoPrime) -1) )-1;\nvar npqt_noMPF = (4.88 / ((AFmP / FoPrime) -1) )-1;\nvar qL_MPF = ((reg.b - Fs)*FoPrime)/((reg.b-FoPrime)*Fs)\nvar qL_noMPF = ((AFmP - Fs)*FoPrime)/((AFmP-FoPrime)*Fs)\nvar PhiNO_MPF = 1/(npqt_MPF + 1 + qL_MPF*4.88) //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNO_noMPF = 1/(npqt_noMPF + 1 + qL_noMPF*4.88) //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNPQ_MPF = 1-fvfm_MPF-PhiNO_MPF //based on equation 53 in Kramer et al., 2004 PRES \nvar PhiNPQ_noMPF = 1-fvfm_noMPF-PhiNO_noMPF //based on equation 53 in Kramer et al., 2004 PRES \nvar qP_MPF = (reg.b - Fs)/(reg.b - FoPrime);\nvar qP_noMPF = (FmPrime - Fs)/(FmPrime - FoPrime);\nvar FvP_FmP_MPF = (reg.b-FoPrime)/reg.b;\nvar FvP_FmP_noMPF = (AFmP-FoPrime)/AFmP;\n\n// Create the variables to be printed (assume to use the MPF values unless there is a good reason not to)\n// ----------------------------\nvar fvfm = fvfm_MPF;\nvar npqt = npqt_MPF;\nvar PhiNO = PhiNO_MPF;\nvar PhiNPQ = PhiNPQ_MPF;\nvar qL = qL_MPF;\nvar FmPrime = reg.b;\nvar qP = qP_MPF;\nvar FvP_FmP = FvP_FmP_MPF;\n\n/****************OUTPUT VALUES FROM MACRO *******************/\n\n// if any of the flag conditions are true, then create the 'flag' object.  Otherwise, do not create the flag object.\n// for now since flag system isn't fully implemented, also create as separate objects so they will be displayed\n// ----------------------------\n\n// If multi-phase flash steps are flat or positive slope, then just use the normal Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nif (reg.m \u003e 0) {\n  fvfm = fvfm_noMPF;\n  npqt = npqt_noMPF;\n  PhiNO = PhiNO_noMPF;\n  PhiNPQ = PhiNPQ_noMPF;\n  qL = qL_noMPF;\n  FmPrime = AFmP;\n  qP = qP_noMPF;\n  FvP_FmP = FvP_FmP_noMPF;\n  \n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n  //  \toutput.flag.warning.push(\"Phi2 is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_noMPF variable\");\n    output[\"warning 2\"] = \"Phi2 is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_noMPF variable\";\n  }\n  if (fvfm \u003e=.85) {\n//  \toutput.flag.danger.push(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\");\n\toutput[\"danger 5\"] = \"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\";\n  }\n  else {\n\t  output[\"Phi2\"] \t\t= MathROUND(fvfm,3);\n  }\n  \n  if (npqt \u003c= 0) {\n    output[\"NPQt\"] \t\t\t= 0;\n//  \toutput.flag.warning.push(\"NPQt is negative (should be positive)!  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative NPQt value, see NPQt_noMPF variable\");\n\toutput[\"warning 1\"] = \"NPQt is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_noMPF variable\";\n  }\n  else {\n\t  output['NPQt']\t\t= MathROUND(npqt,3);\n  }\n\t  output['qL']\t\t    = MathROUND(qL,3);\n\t  output['PhiNPQ']\t\t= MathROUND(PhiNPQ,3);\n\t  output['PhiNO']\t\t= MathROUND(PhiNO,3);\n\t  output['FvP/FmP']\t\t= MathROUND(FvP_FmP,3);\n\t  output['qP']\t\t\t= MathROUND(qP,3);\n}\n\n// Otherwise, use the multi-phase flash calculation for Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nelse {\n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n//  \toutput.flag.warning.push(\"Phi2 is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_MPF variable\");\n\toutput[\"warning 2\"] = \"Phi2 is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_MPF variable\";\n  }\n  if (fvfm \u003e=.85) {\n//  \toutput.flag.danger.push(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\");\n\toutput[\"danger 5\"] = \"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and consider excluding this point.\";\n  }\n  else {\n  \toutput[\"Phi2\"] \t\t\t= MathROUND(fvfm,3);\n  }\n  if (npqt \u003c= 0) {\n    output[\"NPQt\"] \t\t\t= 0;\n//  \toutput.flag.warning.push(\"NPQt is negative (should be positive)!  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative NPQt value, see NPQt_MPF variable\");\n\toutput[\"warning 3\"] = \"NPQt value is negative (should be positive).  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_MPF variable\";\n  }\n  else {\n\t  output['NPQt']\t\t= MathROUND(npqt,3);\n  }\n\t  output['qL']\t\t= MathROUND(qL,3);\n\t  output['PhiNPQ']\t\t= MathROUND(PhiNPQ,3);\n\t  output['PhiNO']\t\t= MathROUND(PhiNO,3);\n\t  output['FvP/FmP']\t\t= MathROUND(FvP_FmP,3);\n\t  output['qP']\t\t\t= MathROUND(qP,3);\n}\n\n// only display LEF if there is a light intensity measurement \u003e 0 \n// ----------------------------\nif (typeof json.light_intensity != \"undefined\" \u0026\u0026 json.light_intensity \u003e 0) {\n\toutput[\"LEF\"] \t\t= MathROUND((fvfm  * 0.45 * json.light_intensity),3);\n}\n\noutput[\"testOutput\"] \t\t= MathROUND(FmPrime,1);\noutput[\"FmPrime\"] \t\t= MathROUND(FmPrime,3);\noutput[\"Fs\"] \t\t\t= MathROUND(Fs,1);\noutput['FoPrime']\t\t= MathROUND(FoPrime,0);\noutput[\"RFd\"]           = Number(MathROUND(((FmPrime/Fs)-1),3));\noutput[\"Phi2_MPF\"] \t\t= MathROUND(fvfm_MPF,3);\noutput[\"Phi2_noMPF\"] \t= MathROUND(fvfm,3);\noutput['ratio adjusted to regular phi2'] = MathROUND(fvfm_MPF / fvfm,5);\noutput['NPQt_MPF']\t\t\t= MathROUND(npqt_MPF,3);\noutput[\"NPQt_noMPF\"] \t= MathROUND(npqt,3);\noutput['ratio adjusted to regular NPQt'] = MathROUND(npqt_MPF / npqt,5);\noutput[\"FmPrime_MPF\"] \t= MathROUND(reg.b,3);\noutput[\"FmPrime_noMPF\"] = MathROUND(AFmP,1);\noutput['qL_MPF']\t\t= MathROUND(qL_MPF,3);\noutput['qL_noMPF']      = MathROUND(qL,3);\noutput['PhiNPQ_MPF']    = MathROUND(PhiNPQ_MPF,3);\noutput['PhiNPQ_noMPF']  = MathROUND(PhiNPQ,3);\noutput['PhiNO_MPF']\t\t= MathROUND(PhiNO_MPF,3);\noutput['PhiNO_noMPF']\t= MathROUND(PhiNO,3);\n\n\n\noutput[\"MPF_slope\"] \t= MathROUND(reg.m,3);\noutput[\"MPF_rsquared\"] \t= MathROUND(reg.r,3);\n\noutput[\"Fs_std\"] \t\t\t= MathROUND(Fs_std,1);\noutput[\"AFmP_std\"] \t\t\t= MathROUND(AFmP_std,1);\noutput[\"FmP_step1_std\"] \t= MathROUND(FmP_step1_std,1);\noutput[\"FmP_step2_std\"] \t= MathROUND(FmP_step2_std,1);\noutput[\"FmP_step3_std\"] \t= MathROUND(FmP_step3_std,1);\noutput[\"FmP_end_std\"] \t\t= MathROUND(FmP_end_std,1);\noutput[\"FoPrime_std\"] \t\t\t= MathROUND(FoPrime_std,1);\n\n\n//output[\"FmP_step1\"] = MathROUND(FmP_step1,3);\n//output[\"FmP_step2\"] = MathROUND(FmP_step2,3);\n//output[\"FmP_step3\"] = MathROUND(FmP_step3,3);\n//output[\"intensity inverse\"] = inverse_intensity;\n//output[\"steps\"] = [AFmP,FmP_step1,FmP_step2,FmP_step3];\n//output[\"slopey\"] = FmP_end/AFmP - AFmP/AFmP ;\n\nif (baseline != 0) {\n  output[\"baseline\"] \t= baseline;\n}\nelse {\n  output[\"baseline\"] \t= 0;\n}\n\n//if (reg.m \u003e 0 | FmP_end/AFmP - AFmP/AFmP \u003e .1 | FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\n//}\n\n// Calculate Standard Deviation for Warning or Danger flags (out of bounds measurement)\n// ----------------------------\n\nif (Fs_std \u003e 100\t) {\n//  \toutput.flag.danger.push(\"noisy Fs\");\n\toutput[\"danger 1\"] = \"noisy Fs\";\n}\nif (AFmP_std \u003e 200) {\n//  \toutput.flag.danger.push(\"noisy FmPrime\");\n\toutput[\"danger 2\"] = \"noisy FmPrime\";\n}\nif (FmP_step1_std \u003e 60 | FmP_step2_std \u003e 60 | FmP_step3_std \u003e 60 | FmP_end_std \u003e 200) {\n//  \toutput.flag.danger.push(\"noisy multi-phase flash steps\");\n\toutput[\"danger 3\"] = \"noisy  multi-phase flash steps\";\n}\nif (FoPrime_std \u003e 150) {\n//  \toutput.flag.danger.push(\"noisy FoPrime\");\n\toutput[\"danger 4\"] = \"noisy FoPrime\";\n}\n\nif (reg.m \u003e 0) {\n//\toutput.flag.info.push(\"Used Phi2 and not Phi2 MPF - ambient light level was too low to apply MPF calculation\");\n\toutput[\"info 1\"] = \"Used Phi2 and not Phi2 MPF - ambient light level was too low to apply MPF calculation\";\n}\n\nif (FmP_end/AFmP - AFmP/AFmP \u003e .1) {\n//\toutput.flag.info.push(\"FmPrime slopes down.  This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating lightf on these samples\");\n\toutput[\"info 2\"] = \"FmPrime slopes down.  This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating light on these samples\";\n}\n\nif (FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\n//\toutput.flag.info.push(\"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\");\n\toutput[\"info 3\"] = \"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\";\n}\n\n\n\nreturn output;","json_data":"{\"sample\":[[{\"protocol_id\":1,\"g\":341,\"get_ir_baseline\":[[15,139.85,233.2],[14,5465.04,6387.31]],\"time\":\"1439974223289\",\"b\":316,\"r\":780,\"relative_humidity\":35.47,\"data_raw\":[4136,4162,4109,4129,4178,4072,4115,4140,4134,4034,4073,4106,4162,4049,4119,4156,4069,4095,4158,4152,4543,4553,4549,4591,4590,4595,4576,4611,4597,4592,4593,4602,4612,4605,4612,4621,4616,4625,4608,4598,12731,14806,15528,15890,16210,16519,16750,16940,17061,17173,17264,17310,17342,17352,17368,17371,17378,17388,17367,17361,17363,17348,17317,17319,17295,17325,17312,17286,17285,17267,17222,17228,17248,17213,17223,17201,17206,17196,17173,17189,17157,17133,17151,17120,17141,17125,17102,17100,17078,17096,17030,17039,17017,17001,17032,17017,17012,17014,17047,16998,17070,17137,17045,17072,17046,17035,17063,17034,16999,17035,17017,17048,16990,16994,17010,16979,16994,16983,16963,16985,16966,16938,16965,16964,16955,16966,16921,16913,16911,16938,16900,11909,9831,8673,7977,7562,7267,7081,6953,6864,6776,6715,6628,6617,6575,6540,6477,6459,6435,6396,6179,4871,4806,4736,4701,4679,4637,4614,4591,4592,4588,4566,4559,4554,4543,4532,4512,4528,4523,4506,4478,4487,4497,4514,4493,4501,4481,4481,4479,4494,4494,4505,4496,4485,4495,4475,4481,4478,4505,4484,4489,4486,4487,4480,4486,4495,4470,4495,4486,4491,4504,4479,4506,4479,4509,4506,4498,4528,4510,4500,4502,4529,4512,4517,4490,4516,4499,4508,4517,4529,4540,4543,4516,4535,4521,4539,4508,4512,4542,4541,4527,4520,4523,4527,4539,4532,4535,4519,4526,4529,4514,4528,4512,4525,4519,4533,4523,4519,4515,4529,4535,4540,4535,4519,4536,4525,4522,4541,4538,4533,4520,4539,4530,4532,4541,4535,4524,4537,4538,4530,4537,4536,4539,4538,4552,4523,4520,4550,4534,4532,4541,4529,4504,4551,4513,4548,4523,4572,4534,4539,4540,4532,4539,4525,4551,4544,4514,4532,4533,4552,4034,4106,4123,4060,4116,4079,4066,4099,4007,4147,4088,4057,4158,4078,4066,4060,4110,4156,4117,4122,3847,3923,3944,3979,3995,4030,4062,4087,4125,4146,4165,4205,4204,4235,4245,4286,4274,4293,4323,4339,4351,13785,14880,15168,15450,15751,16102,16441,16714,16957,17121,17232,17288,17350,17358,17387,17404,17374,17394,17404,17402,17392,17402,17378,17368,17388,17386,17359,17371,17364,17389,17350,17331,17327,17340,17308,17314,17326,17312,17309,17292,17294,17287,17276,17294,17285,17294,17250,17239,17280,17221,17219,17231,17230,17245,17258,17221,17193,17192,17209,17250,17208,17205,17205,17195,17191,17171,17154,17159,17131,17125,17128,17133,17100,17106,17063,17069,17073,17051,17052,17041,17041,17044,17033,17015,17035,17004,17014,17029,17006,16988,12377,10810,9944,9429,9073,8792,8594,8427,8306,8188,8082,7969,7901,7839,7743,7659,7599,7546,7501,7351,4630,4589,4533,4487,4469,4458,4427,4411,4415,4390,4367,4382,4379,4376,4388,4351,4348,4339,4338,4328,4315,4314,4312,4312,4317,4329,4317,4327,4323,4339,4315,4324,4322,4325,4321,4313,4321,4296,4315,4310,4322,4337,4332,4330,4325,4350,4314,4317,4313,4327,4322,4306,4317,4327,4304,4297,4301,4313,4310,4297,4323,4320,4329,4299,4330,4322,4298,4294,4314,4303,4298,4304,4302,4300,4349,4309,4313,4298,4330,4299,4315,4291,4310,4299,4326,4309,4315,4323,4299,4334,4290,4317,4305,4330,4316,4357,4327,4316,4329,4324,4298,4321,4310,4318,4306,4333,4300,4315,4320,4307,4319,4329,4297,4316,4313,4288,4302,4298,4298,4300,4297,4311,4281,4302,4297,4323,4300,4305,4286,4318,4321,4309,4289,4307,4311,4292,4291,4292,4302,4303,4302,4314,4302,4309,4310,4308,4310,4311,4303],\"temperature\":31.31,\"light_intensity\":1201}]],\"location\":\"-14.2599624,34.5787035\",\"firmware_version\":\"0.420\",\"time\":1439974223256,\"device_id\":\"75\"}","md5hash":"cf4c511c03ae48980036efcaa35a135b","created_at":"2015-08-13T19:02:09.599Z","updated_at":"2017-01-06T12:22:16.288Z","is_deleted":null,"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}},"creator":{"name":"Greg Austic","id":3,"email":"gbathree@gmail.com","bio":"Project lead at PhotosynQ!","institute":"Michigan State University","profile_url":"https://photosynq.org/users/greg-austic","contributions":3434,"projects":170,"collaborations":94,"avatar":{"original":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/012409_pbi_160_low_low_res_headshot.jpg","thumb":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/thumb_012409_pbi_160_low_low_res_headshot.jpg","medium":"https://photosynqproduction.s3.amazonaws.com/uploads/user/avatar/3/medium_012409_pbi_160_low_low_res_headshot.jpg"},"latest_activity":"2017-01-20T22:14:52.294Z","badges":[{"name":"","url":""}]}}],"creator":{"name":"Sean Reed","id":1220,"email":"reedsea1@msu.edu","bio":"","institute":"Michigan State","profile_url":"https://photosynq.org/users/sean-reed","contributions":10390,"projects":67,"collaborations":59,"avatar":{"original":"https://photosynq.org/users/sean-reed/default_avatar.png","thumb":"https://photosynq.org/users/sean-reed/default_avatar.png","medium":"https://photosynq.org/users/sean-reed/default_avatar.png"},"latest_activity":"2017-02-07T14:37:08.267Z","badges":[{"name":"","url":""}]},"description":"","directions_to_collaborators":null,"radius":"","project_url":"https://photosynq.org/projects/this-is-working-spad-tree","filters":[{"id":11344,"created_at":"2016-05-16T16:47:24.902Z","updated_at":"2016-05-16T16:49:36.498Z","value_type":1,"sequence":"0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44","is_deleted":false,"value":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45"],"label":"Tree"},{"id":11345,"created_at":"2016-05-16T16:49:36.680Z","updated_at":"2016-05-16T16:50:41.961Z","value_type":1,"sequence":"0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1","is_deleted":false,"value":["Exposed","Shade"],"label":"Leaf"},{"id":11346,"created_at":"2016-05-16T16:50:42.205Z","updated_at":"2016-05-16T16:51:46.930Z","value_type":1,"sequence":"0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3","is_deleted":false,"value":["Cherry","Peach","Apple","Pear"],"label":"Species"},{"id":11418,"created_at":"2016-05-23T16:54:55.768Z","updated_at":"2016-05-23T16:54:55.768Z","value_type":2,"sequence":"","is_deleted":false,"value":[],"label":"Minolta SPAD"}],"is_contributed":false}}