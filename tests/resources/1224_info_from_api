{"status":"success","notice":"Record found","project":{"id":1224,"slug":"this-is-working-spad-tree","name":"This is working! SPAD Tree","disclaimer":null,"views":null,"location":null,"latitude":null,"longitude":null,"start_date":null,"end_date":null,"start_time":null,"end_time":null,"is_open":true,"beta":true,"created_at":"2016-05-16T16:33:59.601Z","updated_at":"2018-01-25T21:41:00.048Z","terms_accepted":false,"tag_list":[],"md5hash":"65af9c37dbe3e17395aab2f407e9b0b2","data_count":86,"project_image":{"large":"https://photosynqprod.s3.amazonaws.com/uploads/project_image/image/28/large_apple-tree.png","small":"https://photosynqprod.s3.amazonaws.com/uploads/project_image/image/28/medium_apple-tree.png","thumb":"https://photosynqprod.s3.amazonaws.com/uploads/project_image/image/28/thumb_apple-tree.png"},"protocol_json":"[{\"pulses\":[4000,300,300,300,100,20,30,10,10,10,30,20,400,150,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],\"nonpulsed_lights\":[[2],[2],[0],[2],[2],[2],[2],[2],[2],[2],[2],[2],[9],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],\"nonpulsed_lights_brightness\":[[\"light_intensity\"],[\"light_intensity\"],[0],[\"light_intensity\"],[\"light_intensity\"],[\"light_intensity\"],[4500],[4050],[3600],[3150],[4500],[\"light_intensity\"],[2090],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],\"pulse_distance\":[1000,1000,1000,1000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000],\"pulsed_lights_brightness\":[[0],[\"150*(40000/detector_read2)\"],[\"150*(40000/detector_read2)\"],[\"150*(40000/detector_read2)\"],[0],[2000],[2000],[2000],[2000],[2000],[2000],[2000],[0],[2000],[30],[450],[75],[80],[700],[700],[700],[700],[375],[3000],[500],[500],[2250],[2250],[2250],[2250],[1800],[7000],[1800],[2000],[2250],[2250],[2250],[2250]],\"pulse_length\":[[\"(-.000093*detector_read2)+13.093\"],[\"(-.000093*detector_read2)+13.093\"],[\"(-.000093*detector_read2)+13.093\"],[\"(-.000093*detector_read2)+13.093\"],[30],[30],[30],[30],[30],[30],[30],[30],[30],[30],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20]],\"detectors\":[[0],[3],[3],[3],[0],[1],[1],[1],[1],[1],[1],[1],[0],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1]],\"pulsed_lights\":[[0],[1],[1],[1],[0],[3],[3],[3],[3],[3],[3],[3],[0],[3],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10]],\"open_close_start\":1,\"recall\":[\"colorcal_blank1[1]\",\"colorcal_blank1[2]\",\"colorcal_blank1[3]\",\"colorcal_blank1[4]\",\"colorcal_blank1[6]\",\"colorcal_blank1[8]\",\"colorcal_blank1[9]\",\"colorcal_blank1[10]\",\"colorcal_blank2[1]\",\"colorcal_blank2[2]\",\"colorcal_blank2[3]\",\"colorcal_blank2[4]\",\"colorcal_blank2[6]\",\"colorcal_blank2[8]\",\"colorcal_blank2[9]\",\"colorcal_blank2[10]\",\"colorcal_blank3[1]\",\"colorcal_blank3[2]\",\"colorcal_blank3[3]\",\"colorcal_blank3[4]\",\"colorcal_blank3[6]\",\"colorcal_blank3[8]\",\"colorcal_blank3[9]\",\"colorcal_blank3[10]\",\"colorcal_intensity1_slope[2]\",\"colorcal_intensity1_yint[2]\",\"colorcal_intensity2_slope[2]\",\"colorcal_intensity2_yint[2]\",\"colorcal_intensity3_slope[2]\",\"colorcal_intensity3_yint[2]\",\"ir_baseline_slope[5]\",\"ir_baseline_yint[5]\",\"ir_baseline_slope[3]\",\"ir_baseline_yint[3]\"],\"environmental\":[[\"detector_read1\",5,700,1,30],[\"detector_read2\",1,150,3,15],[\"light_intensity\"],[\"temperature_humidity_pressure\"],[\"temperature_humidity_pressure2\"],[\"contactless_temp\"],[\"thickness\"],[\"compass_and_angle\"]],\"averages\":1,\"protocol_id\":476}]","protocols":[{"id":476,"name":"Leaf Photosynthesis MultispeQ V1.0","slug":"leaf-photosynthesis-multispeq-v1-0","description":"**Summary**\r\n\r\nMeasures many photosynthesis-related parameters in \u003c15 seconds, including:  \r\n\r\n\r\n\r\n- Chlorophll Fluorescence: Phi2, PhiNPQ, PhiNO, NPQt, qL, LEF\r\n- Relative Chlorophyll: SPAD\r\n- Proton Motive Force: ECSt, vH+, gH+\r\n- Absorbance at: 450, 535, 605, 650, 730, 850, 880, and 940nm.\r\n- Leaf Thickness (in mm), angle, and cardinal direction\r\n- Leaf Temperature and differential from ambient temperature\r\n- Environmental conditions: PAR and ambient temperature/pressure/humidity\r\n\r\n\r\n**Description**\r\n\r\nLeaf Photosynthesis MultispeQ V1.0 is the classic and by far the most utilized PhotosynQ Protocol.\r\n\r\nThis protocol delivers a wide range of plant photosynthetic parameters, a full list can be found [here](https://photosynq.org/faq/photosynthesis)\r\n\r\nIf you want to see the exact calculations for each parameter, please see the associated macro called \"Leaf Photosynthesis MultispeQ V1.0\".\r\n\r\nThere are two publications about the MultispeQ Beta device covering many of parameters and their comparisons to commercial instruments. While the beta was an older model device, the calculations and comparisons are still true for this protocol and V1.0 device. You can find them at the [Royal Society for Open Science](http://rsos.royalsocietypublishing.org/content/3/10/160592), and [Plant, Cell \u0026 Environmental Journal](http://onlinelibrary.wiley.com/journal/10.1111/(ISSN)1365-3040).\r\n\r\nThe Leaf Photosynthesis protocol collects many different measurements from a leaf as quickly as possible. It attempts to be both accurate and fast, so that large amounts of data can be collected quickly.\r\n\r\nClick on this link to see an example measurement - https://photosynq.org/projects/disease-damage-and-drought-impacts-on-photosynthesis/explore/363687\r\n","pre_selected":true,"macro_id":208,"protocol_json":{"pulses":[4000,300,300,300,100,20,30,10,10,10,30,20,400,150,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"nonpulsed_lights":[[2],[2],[0],[2],[2],[2],[2],[2],[2],[2],[2],[2],[9],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"nonpulsed_lights_brightness":[["light_intensity"],["light_intensity"],[0],["light_intensity"],["light_intensity"],["light_intensity"],[4500],[4050],[3600],[3150],[4500],["light_intensity"],[2090],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]],"pulse_distance":[1000,1000,1000,1000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000],"pulsed_lights_brightness":[[0],["150*(40000/detector_read2)"],["150*(40000/detector_read2)"],["150*(40000/detector_read2)"],[0],[2000],[2000],[2000],[2000],[2000],[2000],[2000],[0],[2000],[30],[450],[75],[80],[700],[700],[700],[700],[375],[3000],[500],[500],[2250],[2250],[2250],[2250],[1800],[7000],[1800],[2000],[2250],[2250],[2250],[2250]],"pulse_length":[["(-.000093*detector_read2)+13.093"],["(-.000093*detector_read2)+13.093"],["(-.000093*detector_read2)+13.093"],["(-.000093*detector_read2)+13.093"],[30],[30],[30],[30],[30],[30],[30],[30],[30],[30],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20],[20]],"detectors":[[0],[3],[3],[3],[0],[1],[1],[1],[1],[1],[1],[1],[0],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1],[3],[3],[3],[3],[1],[1],[1],[1]],"pulsed_lights":[[0],[1],[1],[1],[0],[3],[3],[3],[3],[3],[3],[3],[0],[3],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10],[1],[2],[3],[4],[6],[8],[9],[10]],"open_close_start":1,"recall":["colorcal_blank1[1]","colorcal_blank1[2]","colorcal_blank1[3]","colorcal_blank1[4]","colorcal_blank1[6]","colorcal_blank1[8]","colorcal_blank1[9]","colorcal_blank1[10]","colorcal_blank2[1]","colorcal_blank2[2]","colorcal_blank2[3]","colorcal_blank2[4]","colorcal_blank2[6]","colorcal_blank2[8]","colorcal_blank2[9]","colorcal_blank2[10]","colorcal_blank3[1]","colorcal_blank3[2]","colorcal_blank3[3]","colorcal_blank3[4]","colorcal_blank3[6]","colorcal_blank3[8]","colorcal_blank3[9]","colorcal_blank3[10]","colorcal_intensity1_slope[2]","colorcal_intensity1_yint[2]","colorcal_intensity2_slope[2]","colorcal_intensity2_yint[2]","colorcal_intensity3_slope[2]","colorcal_intensity3_yint[2]","ir_baseline_slope[5]","ir_baseline_yint[5]","ir_baseline_slope[3]","ir_baseline_yint[3]"],"environmental":[["detector_read1",5,700,1,30],["detector_read2",1,150,3,15],["light_intensity"],["temperature_humidity_pressure"],["temperature_humidity_pressure2"],["contactless_temp"],["thickness"],["compass_and_angle"]],"averages":1,"protocol_id":476},"created_at":"2016-05-11T20:04:29.410Z","updated_at":"2018-01-25T21:40:45.618Z","is_deleted":false,"md5hash":"1143353720ab500189918d47e4b66f25","protocol_category":{"id":1,"name":"Plants","description":"Plant Related Protocols","image":"https://photosynqprod.s3.amazonaws.com/uploads/protocol_category/image/1/thumb_plants.jpg"},"macro":{"id":208,"name":"Leaf Photosynthesis MultispeQ V1.0","slug":"leaf-photosynthesis-multispeq-v1-0-8a1c1c6b-9b4f-46ed-9c51-2599eba57772","description":"Photosynthesis protocol which includes ECS, Phi2, and other similar protocols.","default_y_axis":"","default_x_axis":"","javascript_code":"// CALCULATIONS FOR PROTON MOTIVE FORCE VIA ECS PORTION OF THE TRACE\n//----------------------------\n\nvar output = {};\nvar spad;\nvar data = json.data_raw;\nvar vhplus;\nvar tau;\nvar ECSt;\nvar quality_flag = 0;\nvar i = 0;\nvar j = 0;\nvar h = 0;\nvar k = 0;\nvar smooth1 = data.slice(300,600);\nvar smooth0 = data.slice(300,600);\n\n///*\n\nvar pulsedistance = 1; // pulse distance for the ECS portion of the trace in seconds\nvar ecsPulses = 300; // pulses during each light cycle duing ECS portion of trace (300 light on, 300 light off, 300 light on)\nvar fit_cutoff = .01; // valueless number indicating what portion of the decay curve to pass to the decay fitting subroutine\nvar hit_cutoff_times = 1;  // this is a counter to ensure we don't just hit a weird portion of the curve and cutoff too soon.   \n\n// we need an array representing the time (in us) and data for each pulse in the ECS trace.  Subtract first and less point so it's 898 points total\n\nvar timeArray = [];\nfor (var i = 1; i \u003c ecsPulses*3+1; i++) {\n  timeArray[i-1] = pulsedistance*i;\n}\nvar ecsArray = data.slice(0,ecsPulses*3);\n\n// the very first pulse is often low.  Just set it to the 2nd pulse by default\necsArray[0] = ecsArray[1];\n// now check for big spikes\nfor (var i = 1; i \u003c ecsArray.length; i++) {\n// this line should be flat, or slightly sloped.  So if there are any big spikes (\u003e 10% of the previous value) then set it equal to the previous value\n  if (ecsArray[i] \u003e 1.10*ecsArray[i-1]) {\n    ecsArray[i] = ecsArray[i-1];\n  }\n}\n\n//output[\"ecsArray raw\"] = data.slice(0,ecsPulses*3);\n// sanity check - do the arrays look as we expect?\n//output[\"all_ecs length\"] = ecsArray.length;\n//output[\"all_time length\"] = timeArray.length;\n//output[\"ecsArray cleaned\"] = ecsArray;\n\n// first lets make the ECS trace flat, in case for some reason it's tilted up or down. Skip first and last point in case there were blips\n\nvar flattenData = ecsArray.slice(0,ecsPulses);\nvar flattenTime = timeArray.slice(0,ecsPulses);\n\n// make some error catching things - standard deviation of the first portion of the trace... etc.\nvar flattenData_std = MathSTDEV(flattenData);\nvar endOfTrace_std =  MathSTDEV(ecsArray.slice(ecsPulses*2,ecsPulses*3));\n//output[\"flattenData_std\"] = flattenData_std;\n//output[\"endOfTrace_std\"] = endOfTrace_std;\n\n// if the standard deviation is too high, then let's not output ECS values\n\n// now let's run a regression to determine the slope\n  \nvar flattenReg = MathLINREG(flattenTime,flattenData);\n\noutput[\"flatten slope\"] = MathROUND(flattenReg.m,4);\n//output[\"flatten y-int\"] = flattenReg.b;\n// sanity check - what does the slope look like before by checking the first and last value in the initial light period?  Compare with after the flattening adjustment\n//output[\"ecsArray pre 0\"] = ecsArray[0];\n//output[\"ecsArray pre 300\"] = ecsArray[300];\n//output[\"ecsArray\"] = ecsArray;\n\n\n// now we assume this slope applies to the whole ECS trace, and subtract off the slope at each point\n\nvar ecsArray_flat = ecsArray.slice(0,ecsPulses*3);\nfor (var i = 0; i \u003c timeArray.length; i++) {\n  var adjustment = flattenReg.m*timeArray[i]; \n  ecsArray_flat[i] = ecsArray_flat[i]-adjustment;\n}\n// now we can calculate the initial and max ecs values to calculate ECSt\n// calculated as the median value within 25 pulses of the light-on phase (minimum) and within 50 pulses of the light off phase (maximum)\necs_initial = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses-25,ecsPulses)),2);\necs_max = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses*2-100,ecsPulses*2)),2);\necst_estimate = ecs_max - ecs_initial;\noutput[\"ecs_initial\"] = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses-25,ecsPulses)),2);\noutput[\"ecs_max\"] = MathROUND(MathMEDIAN(ecsArray_flat.slice(ecsPulses*2-100,ecsPulses*2)),2);\n\n//output[\"ecsArray flattened\"] = ecsArray_flat;\n// sanity check - ok these two numbers should be much closer to each other (slope has moved towards 0), and make sure our flattening worked\n//output[\"ecsArray post 0\"] = ecsArray_flat[0];\n//output[\"ecsArray post 300\"] = ecsArray_flat[300];\n\n// Then convert these values into absorbance in the form abs = -log(Io/I), where we set Io to ecs_initial.  \n// For the decay fitting subroutine, we also try to set the estimated asymptote (ecs_max) to zero - this helps the fitting subroutine reduce iterations to converge to the correct value\necsArray_flat_log = [];\nfor (var i = 0; i \u003c timeArray.length; i++) {\n  var abs = MathLOG(ecs_initial/(ecsArray_flat[i])); \n  ecsArray_flat_log[i] = abs - MathLOG(ecs_initial/ecs_max);\n}\n\n//output[\"ECS full\"] = ecsArray_flat_log;\n\n  output[\"ecs_r_squared\"] = flattenReg.r;\n\nif (ecs_initial \u003c= 8000) {\n  danger(\"There was a technical error with your measurement, please retake the measurement\", output);\n}\n\nelse if (ecs_initial \u003e= 58000) {\n  danger(\"There was a technical error with your measurement, please retake the measurement\", output);\n}\n\nif (ecst_estimate \u003c 2 || json.light_intensity \u003c 50) {\n  output[\"ECSt\"] = 0;\n  output[\"vH+\"] = 0;\n  output[\"gH+\"] = 0;\n  warning(\"proton motive force signal too low.  May be due to low ambient light, or normal biological variation.  ECSt, vH+, and gH+ have been set to zero\", output);\n}\nif (flattenData_std \u003e 25 || endOfTrace_std \u003e 25) {\n  output[\"ECSt\"] = \"NA\";\n  output[\"vH+\"] = \"NA\";\n  output[\"gH+\"] = \"NA\";\n  warning(\"Proton Motive Force too noisy\", output);\n}\nif (!(flattenData_std \u003e 25 || endOfTrace_std \u003e 25 || ecst_estimate \u003c 2 || json.light_intensity \u003c 50)) {\n  // Now we fit a best fit line to the curve.  We need to put our data in the format [[x,y],[x,y]...] first though\n  var expData = ecsArray_flat_log.slice(ecsPulses,ecsPulses+100);\n  var expTime = [];\n  // normalize time to zero for the fit\n  for (var i = 0; i \u003c timeArray.slice(ecsPulses, ecsPulses*2).length; i++) {\n    expTime.push(i);\n  }\n  //output[\"time array\"] = expTime;\n//  output[\"ECS decay\"] = expData;\n\n  var expFitArray = [];\n  for (var i = 0; i \u003c 100; i++) {\n    expFitArray[i] = [expTime[i], expData[i]];\n  }\n  \n  expReg = MathEXPINVREG(expFitArray);\n\n  // questions for kevin - ECSt would be y int + outputted asymptote, correct?\n\n  //output[\"asymptote\"] = expReg.asymptote;\n  output[\"ECSt\"] = MathROUND(expReg.results[0],4);\n  //output[\"expFit slope\"] = expReg.slope;\n  output[\"vH+\"] = MathROUND(expReg.slope,8);\n  //output[\"expFit lifetime\"] = expReg.lifetime;\n  output[\"gH+\"] = MathROUND(expReg.lifetime,4);\n}\n\n// Check to make sure that the detector2 setting which determines the intensity of the green LED is not zero or maxed\nif (json.detector_read2 == 65535 || json.detector_read2 \u003c 1) {\n  danger(\"Something is wrong with the auto-intensity calibration detector_read2.  Make sure device is stable and completely clamped on measurement.  Measure again.\", output);\n}\n\n//*/  \n//*/  \n\n// CALCULATIONS FOR ABSORBANCE / SPAD PORTION OF THE TRACE\n//----------------------------\n\nvar abs_starts = 1180; // when does the Phi2 measurement start\nvar data = json.data_raw;\nvar lights = [1,2,3,4,6,8,9,10];// define the lights to have absorbance measured\nvar wavelengths = [\"530\",\"650\",\"605\",\"420\",\"940\",\"850\",\"730\",\"880\"];// define the lights to have absorbance measured\nvar raw_at_blank1 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank2 = [0,0,0,0,0,0,0,0];\nvar raw_at_blank3 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank1 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank2 = [0,0,0,0,0,0,0,0];\nvar abs_at_blank3 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank1 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank2 = [0,0,0,0,0,0,0,0];\nvar trans_at_blank3 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank1 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank2 = [0,0,0,0,0,0,0,0];\nvar spad_at_blank3 = [0,0,0,0,0,0,0,0];\nvar minolta_spad1 = 0;\nvar minolta_spad2 = 0;\nvar minolta_spad3 = 0;\nvar minolta_spad = 0;\nvar minolta_spad_averages = 0;\nvar choose = 0;\nvar light;\nvar wavelengthString;\nvar pulses = 10;// number of pulses in a cycle\n\n/* // this is what the recall object looks like --\u003e \n\"recall\":{\"colorcal_blank1[1]\":0.000000,\"colorcal_blank1[2]\":0.000000,\"colorcal_blank1[3]\":0.000000,\"colorcal_blank1[4]\":0.00000\n0,\"colorcal_blank1[6]\":0.000000,\"colorcal_blank1[8]\":0.000000,\"colorcal_blank1[9]\":0.000000,\"colorcal_blank1[10]\":0.000000,\"colo\nrcal_blank2[1]\":0.000000,\"colorcal_blank2[2]\":0.000000,\"colorcal_blank2[3]\":0.000000,\"colorcal_blank2[4]\":0.000000,\"colorcal_bla\nnk2[6]\":0.000000,\"colorcal_blank2[8]\":0.000000,\"colorcal_blank2[9]\":0.000000,\"colorcal_blank2[10]\":0.000000,\"colorcal_blank3[1]\"\n:0.000000,\"colorcal_blank3[2]\":0.000000,\"colorcal_blank3[3]\":0.000000,\"colorcal_blank3[4]\":0.000000,\"colorcal_blank3[6]\":0.00000\n0,\"colorcal_blank3[8]\":0.000000,\"colorcal_blank3[9]\":0.000000,\"colorcal_blank3[10]\":0.000000},\n*/\n\n/*\n** Loop through the lights.  If it's zero, skip it.  If it's not in the acceptable range (\u003e500 but \u003c65534 (max)) skip it.\n** Then choose the first blank (starting with 1 moving to 3) which fulfills this criteria\n** Otherwise, calculate absorbance and transmittance and a 'spad'-like value using LED 6 (940 on clamp) to calibrate thickness\n*/\n//----------------------------\n\nfor (var i = 0;i\u003clights.length;i++) { // loop through and save one averaged 'point' for each of the cycles\n  light = lights[i];\n  wavelengthString = wavelengths[i];\n  var value1 = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+2),(abs_starts + i*pulses+8)));\n  var value2 = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+82),(abs_starts + i*pulses+88)));\n  var value3 = MathMEDIAN(json.data_raw.slice((abs_starts + i*pulses+162),(abs_starts + i*pulses+168)));\n  raw_at_blank1[light] = value1;\n  raw_at_blank2[light] = value2;\n  raw_at_blank3[light] = value3;\n  if (json.recall[\"colorcal_blank1[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 500 \u0026\u0026 raw_at_blank1[light] \u003c 65534) {\n    abs_at_blank1[light] = MathROUND(-1*MathLOG(raw_at_blank1[light]/json.recall[\"colorcal_blank1[\"+light+\"]\"]),3);\n//    trans_at_blank1[light] = MathROUND(raw_at_blank1[light]/json.recall[\"colorcal_blank1[\"+light+\"]\"],3);\n//\toutput [\"light\".concat(light.toString(),\"_transmittance\")]  = trans_at_blank1[light];\n    output [\"absorbance_\".concat(wavelengthString)]  = abs_at_blank1[light];\n//\toutput [\"light\".concat(light.toString(),\"_blank1\")]  = json.recall[\"colorcal_blank1[\"+light+\"]\"];\n  }\n}\n\n// so the raw value needs to be \u003e~2000, while the 940 needs to be greater than ~5000, otherwise it's out of range\n// the acceptable range is different for each blank (1,2,3) thus a separate if statement for each blank.\n// once you hit an intensity which is within the acceptable range, then keep that value and skip the rest\n\nfor (var i = 0;i\u003c8;i++) { // loop through and save one averaged SPAD value for each of the cycles.  If we have additional calibration values (like minolta spad) use those and output that value\n  light = lights[i];\n  wavelengthString = wavelengths[i];\n  spad_at_blank2[light] = MathROUND(100*MathLOG((raw_at_blank2[6] / json.recall[\"colorcal_blank2[6]\"])/(raw_at_blank2[light] / json.recall[\"colorcal_blank2[\"+light+\"]\"])),2);\n  spad_at_blank1[light] = MathROUND(100*MathLOG((raw_at_blank1[6] / json.recall[\"colorcal_blank1[6]\"])/(raw_at_blank1[light] / json.recall[\"colorcal_blank1[\"+light+\"]\"])),2);\n  spad_at_blank3[light] = MathROUND(100*MathLOG((raw_at_blank3[6] / json.recall[\"colorcal_blank3[6]\"])/(raw_at_blank3[light] / json.recall[\"colorcal_blank3[\"+light+\"]\"])),2);\n  if (light == 2) { // if it's the red light, the also calculate minolta spad\n    output [\"light\".concat(light.toString(),\"_raw1\")]  = raw_at_blank1[light];\n    output [\"light6_raw1\"]  = raw_at_blank1[6];\n    output [\"spad_raw1\"]  = spad_at_blank1[2];\n    output [\"light\".concat(light.toString(),\"_raw2\")]  = raw_at_blank2[light];\n    output [\"light6_raw2\"]  = raw_at_blank2[6];\n    output [\"spad_raw2\"]  = spad_at_blank2[2];\n    output [\"light\".concat(light.toString(),\"_raw3\")]  = raw_at_blank3[light];\n    output [\"light6_raw3\"]  = raw_at_blank3[6];\n    output [\"spad_raw3\"]  = spad_at_blank3[2];\n  }\n  if (json.recall[\"colorcal_blank1[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank1[light] \u003e 30 \u0026\u0026 raw_at_blank1[light] \u003c 65534 \n      \u0026\u0026 raw_at_blank1[6] \u003e 4500 \u0026\u0026 raw_at_blank1[6] \u003c 65534) {\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad = (spad_at_blank1[2] - json.recall[\"colorcal_intensity1_yint[2]\"]) / json.recall[\"colorcal_intensity1_slope[2]\"];\t\n      output [\"SPAD_\".concat(wavelengthString)]  = MathROUND(minolta_spad,2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")]  = 1;\n        choose = 1;\n      continue;\n    }\n    else if (light != 6) {\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(spad_at_blank1[light],2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 1;\n//      output [\"SPAD1_\".concat(wavelengthString)] = MathROUND(spad_at_blank1[light],2);\n//      output [\"SPAD1_\".concat(wavelengthString,\"_intensity\")] = 1;\n      continue;\n    }\n  }\n  if (json.recall[\"colorcal_blank2[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank2[light] \u003e 500 \u0026\u0026 raw_at_blank2[light] \u003c 65534 \n      \u0026\u0026 raw_at_blank2[6] \u003e 3000 \u0026\u0026 raw_at_blank2[6] \u003c 65534) {\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad = (spad_at_blank2[2] - json.recall[\"colorcal_intensity2_yint[2]\"]) / json.recall[\"colorcal_intensity2_slope[2]\"];\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(minolta_spad,2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 2;\n        choose = 2;\n      continue;\n    }\n    else if (light != 6) {\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(spad_at_blank2[light],2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 2;\n//      output [\"SPAD2_\".concat(wavelengthString)] = MathROUND(spad_at_blank2[light],2);\n//      output [\"SPAD2_\".concat(wavelengthString,\"_intensity\")] = 2;\n      continue;\n    }\n  }\n  if (json.recall[\"colorcal_blank3[\"+light+\"]\"] != 0 \u0026\u0026 raw_at_blank3[light] \u003e 750 \u0026\u0026 raw_at_blank3[light] \u003c 65534 \n      \u0026\u0026 raw_at_blank3[6] \u003e 3000 \u0026\u0026 raw_at_blank3[6] \u003c 65534) {\n    if (light == 2) { // if it's the red light, the also calculate minolta spad\n      minolta_spad = (spad_at_blank3[2] - json.recall[\"colorcal_intensity3_yint[2]\"]) / json.recall[\"colorcal_intensity3_slope[2]\"];\n      output [\"SPAD_\".concat(wavelengthString)]  = MathROUND(minolta_spad,2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")]  = 3;\n      choose = 3;\n      continue;\n    }\n    else if (light != 6) {\n      output [\"SPAD_\".concat(wavelengthString)] = MathROUND(spad_at_blank3[light],2);\n      output [\"SPAD_\".concat(wavelengthString,\"_intensity\")] = 3;\n//      output [\"SPAD3_\".concat(wavelengthString)] = MathROUND(spad_at_blank3[light],2);\n//      output [\"SPAD3_\".concat(wavelengthString,\"_intensity\")] = 3;\n      continue;\n    }\n  }\n}\n\nif (choose == 0) {\n  output [\"SPAD_650\"]  = 0;\n  danger(\"Chlorophyll content SPAD is outside the acceptable range.  The leaf may be too thick, too thin, or have holes in it.\", output);\n}\nelse if (minolta_spad \u003c= 2) {\n  danger(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n}\nelse if (minolta_spad \u003e= 100) {\n  danger(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n}\n\n/*\n    if (minolta_spad \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad1 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n*/\n\n// calculate chlorophyll content SPAD values with Minolta SPAD calibration --\u003e\n\n/*\nif (choose == 0) {\n    output [\"SPAD\"]  = 0;\n    output [\"SPAD intensity\"]  = 0;\n  \t\n\tdanger(\"Chlorophyll content SPAD is outside the acceptable range.  The leaf may be too thick, too thin, or have holes in it.\", output);\n}\nelse if (choose == 1) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad1,2);\n    output [\"SPAD intensity\"]  = 1;\n    if (minolta_spad1 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad1 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\nelse if (choose == 2) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad2,2);\n    output [\"SPAD intensity\"]  = 2;\n\tif (minolta_spad2 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad2 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\nelse if (choose == 3) {\n    output [\"SPAD\"]  = MathROUND(minolta_spad3,2);\n    output [\"SPAD intensity\"]  = 3;\n\tif (minolta_spad3 \u003c= 2) {\n      info(\"Chlorophyll Content SPAD is very low.  If leaf is visibly green, ensure leaf completely covers the light guide and retry.  If still too low, consider recalibrating device.\", output);\n    }\n    else if (minolta_spad3 \u003e= 100) {\n      info(\"Chlorophyll Content SPAD is very high.  If this value is associated with a typical leaf, consider recalibrating device.\", output);\n    }\n}\n*/\n\n// consider adding some warnings here... could be noisy, but also if the signal is \u003e blank (suggest to recalibate?)\n\n\n\n// consider adding some warnings here... could be noisy, but also if the signal is \u003e blank (suggest to recalibate?)\n\n\n// CALCULATIONS FOR PHI2 PORTION OF THE TRACE\n//----------------------------\n\n// calculate the ir baseline for LED 3 which is used as the measuring light.  This subtract IR generated by the LED from the IR generated by the plant\n//----------------------------\nvar sample_cal = json.detector_read1;\n\nvar shinyness = (sample_cal-json.recall[\"ir_baseline_yint[5]\"])/json.recall[\"ir_baseline_slope[5]\"]; // where 0 is dull black electrical tape, and 1 is shiny aluminum\nvar baseline = json.recall[\"ir_baseline_slope[3]\"]*shinyness+json.recall[\"ir_baseline_yint[3]\"];\n\nif (!baseline || !json.recall[\"ir_baseline_yint[5]\"] || sample_cal == 65535) {\t\t\t\t\t\t// if it hasn't been calibrated or there's an error or it's maxed, set baseline == 0\n  baseline = 0;\n}\noutput[\"baseline\"] = baseline;\n\n/*\noutput[\"shinyness\"] = shinyness;\noutput[\"baseline\"] = baseline;\noutput[\"recall led slope\"] = json.recall[\"ir_baseline_slope[3]\"];\noutput[\"recall led yint\"] = json.recall[\"ir_baseline_yint[3]\"];\noutput[\"recall cal slope\"] = json.recall[\"ir_baseline_slope[5]\"];\noutput[\"recall cal yint\"] = json.recall[\"ir_baseline_yint[5]\"];\noutput[\"sample led\"] = json.detector_read1;\n*/\n\n//var sample_cal = MathMEAN(data.slice(2,18));\n\nvar inverse_intensity = [1/4500,1/4050,1/3600,1/3150];\nvar ps2_starts = 900; // when does the Phi2 measurement start\n\n// Set our Apparent FmPrime, 3 FmPrime steps, and Fs to calculate both traditional fv/fm and new Multi-phase flash fv/fm\n//----------------------------\nvar Fs = MathMEAN(data.slice(ps2_starts + 1,ps2_starts + 4)) - baseline; // take only the first 4 values in the Fs range, excluding the very first\nvar Fs_std = MathSTDEV(data.slice(ps2_starts + 1,ps2_starts + 4)); // create standard deviation for this value for error checking\n\nvar sat_vals = data.slice(ps2_starts + 25,ps2_starts + 48).sort();  // sort the saturating light values from low to high\nvar AFmP = MathMEAN(sat_vals.slice(2,20)) - baseline; // take the 18 largest values and average them\nvar AFmP_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checkingjson.data_raw.slice(953,955)\n\nsat_vals = data.slice(ps2_starts + 84,ps2_starts + 110).sort();  // sort the saturating light values from low to high\nvar FmP_end = MathMEAN(sat_vals.slice(2,23)) - baseline; // take the 21 largest values and average them\nvar FmP_end_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 52,ps2_starts + 60).sort();  // sort the saturating light values from low to high\nvar FmP_step1 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step1_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 62,ps2_starts + 70).sort();  // sort the saturating light values from low to high\nvar FmP_step2 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step2_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\nsat_vals = data.slice(ps2_starts + 72,ps2_starts + 80).sort();  // sort the saturating light values from low to high\nvar FmP_step3 = MathMEAN(sat_vals.slice(2,6)) - baseline; // take the 4 largest values and average them\nvar FmP_step3_std = MathSTDEV(sat_vals); // create standard deviation for this value for error checking\n\n// Calculations for F0'\n// ----------------------------\nvar FoPrime_values = json.data_raw.slice(ps2_starts + 160,ps2_starts + 270).sort();\nvar FoPrime = MathMEAN(FoPrime_values.slice(5,10)) - baseline;\nvar FoPrime_std = MathSTDEV(FoPrime_values); // create standard deviation for this value for error checking\n\n// Calculations for corrected FmPrime using multi-phase flash\n// ----------------------------\nvar reg = MathLINREG(inverse_intensity, [AFmP,FmP_step1,FmP_step2,FmP_step3]);\n\n// Calculate Phi2 w/ and w/out multi-phase flash\n// ----------------------------\nvar fvfm_noMPF = (AFmP-Fs)/AFmP;\nvar fvfm_MPF = (reg.b-Fs)/reg.b;\n\n\n// Calculate NPQt, PhiNPQ, PhiNO, qL w/ and w/out multi-phase flash\n// ----------------------------\nvar npqt_MPF = (4.88 / ((reg.b / FoPrime) -1) )-1;\nvar npqt_noMPF = (4.88 / ((AFmP / FoPrime) -1) )-1;\nvar qL_MPF = ((reg.b - Fs)*FoPrime)/((reg.b-FoPrime)*Fs);\nvar qL_noMPF = ((AFmP - Fs)*FoPrime)/((AFmP-FoPrime)*Fs);\nvar PhiNO_MPF = 1/(npqt_MPF + 1 + qL_MPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNO_noMPF = 1/(npqt_noMPF + 1 + qL_noMPF*4.88); //based on equation 52 in Kramer et al., 2004 PRES\nvar PhiNPQ_MPF = 1-fvfm_MPF-PhiNO_MPF; //based on equation 53 in Kramer et al., 2004 PRES \nvar PhiNPQ_noMPF = 1-fvfm_noMPF-PhiNO_noMPF; //based on equation 53 in Kramer et al., 2004 PRES \n\nvar qP_MPF = (reg.b - Fs)/(reg.b - FoPrime);\nvar qP_noMPF = (FmPrime - Fs)/(FmPrime - FoPrime);\nvar FvP_FmP_MPF = (reg.b-FoPrime)/reg.b;\nvar FvP_FmP_noMPF = (AFmP-FoPrime)/AFmP;\n\n// Create the variables to be printed (assume to use the MPF values unless there is a good reason not to)\n// ----------------------------\nvar fvfm = fvfm_MPF;\nvar npqt = npqt_MPF;\nvar PhiNO = PhiNO_MPF;\nvar PhiNPQ = PhiNPQ_MPF;\nvar qL = qL_MPF;\nvar FmPrime = reg.b;\nvar qP = qP_MPF;\nvar FvP_FmP = FvP_FmP_MPF;\nvar b = json.b;\nvar r = json.r;\nvar g = json.g;\n\n\n/****************OUTPUT VALUES FROM MACRO *******************/\n\n// If multi-phase flash steps are flat or positive slope, then just use the normal Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nif (reg.m \u003e 0) {\n  fvfm = fvfm_noMPF;\n  npqt = npqt_noMPF;\n  PhiNO = PhiNO_noMPF;\n  PhiNPQ = PhiNPQ_noMPF;\n  qL = qL_noMPF;\n  FmPrime = AFmP;\n  qP = qP_noMPF;\n  FvP_FmP = FvP_FmP_noMPF;\n  \n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n\tdanger('Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_noMPF variable',output);\n\toutput[\"Phi2_noMPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n    output[\"Phi2\"] \t\t\t= -1;\n\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n\n  }\n  else {\n\t  output[\"Phi2\"] \t\t= MathROUND(fvfm,3);\n  }\n  \n  if (npqt \u003c= 0) {\n\toutput[\"PhiNPQ\"]\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n\tdanger(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_noMPF and PhiNPQ_noMPF variable\",output);\n\toutput[\"PhiNPQ_noMPF\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_noMPF\"]\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput[\"PhiNPQ\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt\"]\t\t= MathROUND(npqt,3);\n  }\n\toutput[\"PhiNO\"]\t\t= MathROUND(PhiNO,3);\n\toutput[\"qL\"]\t\t= MathROUND(qL,3);\n    output['FvP/FmP']\t\t= MathROUND(FvP_FmP,3);\n    output['qP']\t\t\t= MathROUND(qP,3);\n}\n\n// Otherwise, use the multi-phase flash calculation for Phi2, NPQt, PhiNPQ, PhiNO... etc.\n// If Phi2 or NPQt is less than zero, make zero and give user warning.  If Phi2 is higher than .85, give user danger flag.\n// ----------------------------\nelse {\n  if (fvfm \u003c= 0) {\n    output[\"Phi2\"] \t\t\t= 0;\n\tdanger(\"Phi2 is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see Phi2_MPF variable\",output);\n\toutput[\"Phi2_MPF\"] \t= MathROUND(npqt,3);\n  }\n  if (fvfm \u003e=.85) {\n    output[\"Phi2\"] \t\t\t= -1;\n\tdanger(\"Phi2 above the normal range (0 - 0.85).  Please check the raw trace and seriously consider excluding this point.\", output);\n  }\n  else {\n    output[\"Phi2\"]\t\t\t= MathROUND(fvfm,3);\n  }\n  if (npqt \u003c= 0) {\n\toutput[\"PhiNPQ\"]\t\t= 0;\n    output[\"NPQt\"]\t\t\t= 0;\n\tdanger(\"NPQt is negative (should be positive).  This may be due to a sample that is not doing photosynthesis, or you may have missed the leaf.  It has been set to zero, but check raw trace and consider excluding this point.  To see original negative value, see NPQt_MPF and PhiNPQ_MPF variables\",output);\n\toutput[\"PhiNPQ_MPF\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt_MPF\"]\t\t= MathROUND(npqt,3);\n  }\n  else {\n\toutput[\"PhiNPQ\"]  = MathROUND(PhiNPQ,3);\n\toutput[\"NPQt\"]\t\t= MathROUND(npqt,3);\n  }\n\toutput[\"PhiNO\"]\t\t= MathROUND(PhiNO,3);\n\toutput[\"qL\"]\t\t\t= MathROUND(qL,3);\n    output['FvP/FmP']\t\t= MathROUND(FvP_FmP,3);\n    output['qP']\t\t\t= MathROUND(qP,3);\n}\n\n// only display LEF if there is a light intensity measurement \u003e 0 \n// ----------------------------\nif (typeof json.light_intensity != \"undefined\" \u0026\u0026 json.light_intensity \u003e 0) {\n\toutput[\"LEF\"] \t\t= MathROUND((fvfm  * 0.45 * json.light_intensity),3);\n}\n\nif (Fs_std \u003e 100) {\n\tdanger(\"noisy Fs\", output);\n}\n/*\nif (AFmP_std \u003e 300) {\n\tdanger(\"noisy FmPrime\", output);\n}\n*/\nif (FmP_step1_std \u003e 120 | FmP_step2_std \u003e 120 | FmP_step3_std \u003e 120 | FmP_end_std \u003e 300) {\n\tdanger(\"noisy  multi-phase flash steps\",output);\n}\n\nif (FoPrime_std \u003e 150) {\n\tdanger(\"noisy FoPrime\", output);\n}\n/*\nif (reg.m \u003e 0) {\n\tinfo(\"Used Phi2 and not Phi2 MPF - ambient light level was too low to apply MPF calculation\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003e .1) {\t\n\tinfo(\"FmPrime slopes down.  This may mean that saturating flash is not bright enough... consider using a protocol with lower saturating light on these samples\", output);\n}\nif (FmP_end/AFmP - AFmP/AFmP \u003c -.1) {\n\tinfo(\"FmPrime slopes up.  This may mean that saturating flash is too bright... consider using a protocol with higher saturating light on these samples\",output);\n}\n*/\n\noutput[\"FmPrime\"] \t\t= MathROUND(FmPrime,3);\noutput[\"Fs\"] \t\t\t= MathROUND(Fs,1);\noutput['FoPrime']\t\t= MathROUND(FoPrime,0);\noutput[\"RFd\"]           = Number(MathROUND(((FmPrime/Fs)-1),3));\noutput[\"ratio MPF/noMPF, Phi2\"] = MathROUND(fvfm_MPF / fvfm_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNPQ\"] = MathROUND(PhiNPQ_MPF / PhiNPQ_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNO\"] = MathROUND(PhiNO_MPF / PhiNO_noMPF,5);\noutput[\"ratio MPF/noMPF, PhiNO\"] = MathROUND(npqt_MPF / npqt_noMPF,5);\noutput[\"MPF_slope\"] \t= MathROUND(reg.m,3);\noutput[\"MPF_rsquared\"] \t= MathROUND(reg.r,3);\n/*\noutput[\"Phi2_MPF\"] \t\t= MathROUND(fvfm_MPF,3);\noutput[\"Phi2_noMPF\"] \t= MathROUND(fvfm,3);\noutput[\"FmPrime_MPF\"] \t= MathROUND(reg.b,3);\noutput[\"FmPrime_noMPF\"] = MathROUND(AFmP,1);\noutput['qL_MPF']\t\t= MathROUND(qL_MPF,3);\noutput['qL_noMPF']      = MathROUND(qL,3);\noutput['PhiNPQ_MPF']    = MathROUND(PhiNPQ_MPF,3);\noutput['PhiNPQ_noMPF']  = MathROUND(PhiNPQ,3);\noutput['PhiNO_MPF']\t\t= MathROUND(PhiNO_MPF,3);\noutput['PhiNO_noMPF']\t= MathROUND(PhiNO,3);\noutput[\"Fs_std\"] \t\t\t= MathROUND(Fs_std,1);\noutput[\"AFmP_std\"] \t\t\t= MathROUND(AFmP_std,1);\noutput[\"FmP_step1_std\"] \t= MathROUND(FmP_step1_std,1);\noutput[\"FmP_step2_std\"] \t= MathROUND(FmP_step2_std,1);\noutput[\"FmP_step3_std\"] \t= MathROUND(FmP_step3_std,1);\noutput[\"FmP_end_std\"] \t\t= MathROUND(FmP_end_std,1);\noutput[\"FoPrime_std\"] \t\t\t= MathROUND(FoPrime_std,1);\n*/\n\n//output[\"FmP_step1\"] = MathROUND(FmP_step1,3);\n//output[\"FmP_step2\"] = MathROUND(FmP_step2,3);\n//output[\"FmP_step3\"] = MathROUND(FmP_step3,3);\n//output[\"intensity inverse\"] = inverse_intensity;\n//output[\"steps\"] = [AFmP,FmP_step1,FmP_step2,FmP_step3];\n//output[\"slopey\"] = FmP_end/AFmP - AFmP/AFmP ;\n\n  output[\"baseline\"] \t= baseline;\n\n// Check for data quality issues and add warning or danger flags\n//----------------------------\n\n// Finally, use the \"order\" object to define the order of the outputs (focus on the top 6 most important for the user to see)\n//----------------------------\noutput[\"Light Intensity (PAR)\"] = json.light_intensity;\noutput[\"Leaf Temp Differential\"] = json.contactless_temp - json.temperature;\noutput[\"Relative Chlorophyll\"] = minolta_spad;\noutput [\"Rel Chl intensity\"]  = choose;  \t\noutput[\"Ambient Temperature\"] = json.temperature;\noutput[\"Ambient Humidity\"] = json.humidity;\noutput[\"Leaf Angle\"] = json.angle;\n\noutput[\"order\"] = [\"Phi2\",\"PhiNPQ\",\"PhiNO\",\"Relative Chlorophyll\",\"Leaf Temp Differential\",\"Leaf Angle\", \"Light Intensity (PAR)\",\"NPQt\", \"LEF\",\"Ambient Temperature\",\"Ambient Humidity\"];\n\nmaxvalue = MathMAX([json.r,json.g,json.b]);\noutput[\"R\"] = Number(json.r);\noutput[\"G\"] = Number(json.g);\noutput[\"B\"] = Number(json.b);\n//output[\"rval\"] = json.r*(255/maxvalue);\n//output[\"gval\"] = json.g*(255/maxvalue);\n//output[\"bval\"] = json.b*(255/maxvalue);\n\n//output[\"Color\"] = [MathROUND(json.r*(255/maxvalue),2),MathROUND(json.g*(255/maxvalue),2),MathROUND(json.b*(255/maxvalue),2)];\n\nreturn output;","json_data":"{\"time_offset\":240,\"time\":1471466929426,\"device_version\":\"1\",\"device_id\":\"d4:f5:10:14:06:65\",\"device_battery\":90,\"device_firmware\":\"1.06\",\"firmware_version\":\"1.06\",\"device_time\":1471450983,\"sample\":[[{\"time\":1471466929451,\"protocol_id\":1,\"detector_read1\":2319,\"detector_read2\":3051,\"light_intensity\":11,\"r\":30,\"g\":15,\"b\":9,\"light_intensity_raw\":49,\"temperature\":27.43,\"humidity\":65.174805,\"pressure\":984.203064,\"temperature2\":27.51,\"humidity2\":62.969727,\"pressure2\":985.48407,\"contactless_temp\":26.53,\"thickness\":1.07,\"compass_direction\":\"NW\",\"compass\":\"315.06\",\"angle\":1.09,\"angle_direction\":\"N\",\"pitch\":0.88,\"roll\":0.65,\"recall\":{\"time\":1471466933605,\"colorcal_blank1[1]\":7839.5,\"colorcal_blank1[2]\":12927,\"colorcal_blank1[3]\":12024.5,\"colorcal_blank1[4]\":36130,\"colorcal_blank1[6]\":26263.5,\"colorcal_blank1[8]\":24891.5,\"colorcal_blank1[9]\":20946.5,\"colorcal_blank1[10]\":27715,\"colorcal_blank2[1]\":17226.5,\"colorcal_blank2[2]\":15096,\"colorcal_blank2[3]\":12841,\"colorcal_blank2[4]\":13510.5,\"colorcal_blank2[6]\":35288,\"colorcal_blank2[8]\":38212.5,\"colorcal_blank2[9]\":36138,\"colorcal_blank2[10]\":32846,\"colorcal_blank3[1]\":16779,\"colorcal_blank3[2]\":10041,\"colorcal_blank3[3]\":15482,\"colorcal_blank3[4]\":16311,\"colorcal_blank3[6]\":30774,\"colorcal_blank3[8]\":30418,\"colorcal_blank3[9]\":20022.5,\"colorcal_blank3[10]\":20597.5,\"colorcal_intensity1_slope[2]\":2.464,\"colorcal_intensity1_yint[2]\":7.4,\"colorcal_intensity2_slope[2]\":2.208,\"colorcal_intensity2_yint[2]\":10.4,\"colorcal_intensity3_slope[2]\":1.49,\"colorcal_intensity3_yint[2]\":10.6,\"ir_baseline_slope[5]\":9459.5,\"ir_baseline_yint[5]\":13594.5,\"ir_baseline_slope[3]\":251.5,\"ir_baseline_yint[3]\":482},\"data_raw\":[25190,26768,26778,26783,26787,26789,26777,26787,26785,26784,26771,26782,26782,26780,26779,26777,26779,26782,26777,26777,26780,26779,26777,26778,26777,26775,26776,26775,26779,26773,26773,26772,26779,26771,26773,26776,26777,26766,26773,26772,26775,26760,26775,26773,26776,26765,26774,26773,26777,26761,26774,26774,26775,26763,26776,26775,26773,26767,26773,26774,26767,26766,26772,26770,26762,26770,26770,26771,26759,26774,26770,26771,26763,26768,26768,26774,26765,26772,26769,26775,26771,26770,26772,26762,26773,26766,26771,26769,26770,26767,26768,26763,26772,26763,26772,26759,26767,26770,26772,26765,26766,26769,26771,26765,26769,26769,26766,26765,26769,26770,26759,26769,26767,26766,26765,26767,26766,26771,26762,26767,26760,26770,26759,26763,26771,26772,26763,26761,26775,26763,26769,26766,26771,26763,26764,26769,26769,26761,26762,26763,26767,26755,26767,26765,26769,26759,26767,26766,26762,26757,26764,26770,26758,26767,26765,26771,26757,26765,26761,26763,26764,26762,26765,26773,26763,26764,26761,26773,26768,26762,26766,26763,26763,26759,26770,26757,26759,26766,26767,26758,26762,26769,26767,26759,26769,26766,26765,26764,26765,26766,26757,26767,26759,26767,26760,26766,26762,26761,26765,26763,26763,26762,26765,26763,26765,26758,26762,26762,26768,26758,26761,26765,26766,26756,26766,26765,26760,26763,26763,26762,26760,26765,26759,26770,26759,26763,26759,26767,26758,26759,26766,26766,26761,26758,26768,26757,26758,26764,26761,26756,26761,26759,26763,26758,26762,26761,26763,26761,26761,26763,26762,26764,26763,26758,26759,26758,26760,26765,26756,26757,26757,26769,26760,26761,26767,26763,26761,26758,26765,26758,26761,26757,26768,26757,26758,26767,26765,26758,26759,26764,26764,26762,26764,26765,26757,26758,26763,26766,26755,26759,26769,26763,26760,26759,26768,26758,26759,26764,26761,26754,26756,26764,26758,26754,26760,26767,26762,26759,26764,26767,26757,26757,26765,26764,26756,26766,26766,26763,26762,26762,26765,26757,26767,26763,26762,26761,26763,26761,26770,26763,26764,26761,26761,26764,26759,26772,26760,26761,26767,26762,26760,26759,26767,26760,26759,26763,26768,26757,26759,26763,26768,26758,26767,26767,26763,26760,26761,26767,26757,26763,26765,26767,26758,26766,26767,26759,26759,26767,26764,26758,26766,26764,26766,26755,26763,26765,26762,26763,26768,26767,26757,26766,26761,26764,26758,26767,26769,26759,26769,26761,26765,26759,26763,26765,26761,26765,26764,26762,26761,26763,26763,26760,26759,26761,26765,26761,26767,26764,26766,26757,26763,26761,26762,26763,26762,26765,26760,26766,26764,26761,26761,26766,26758,26763,26760,26759,26763,26767,26766,26762,26767,26760,26763,26760,26768,26761,26761,26765,26759,26761,26763,26767,26755,26766,26766,26764,26758,26763,26767,26759,26765,26761,26760,26760,26763,26760,26770,26761,26759,26768,26767,26765,26758,26767,26758,26762,26769,26764,26768,26761,26769,26760,26761,26758,26767,26763,26762,26766,26763,26765,26759,26771,26757,26759,26769,26767,26762,26767,26769,26760,26759,26762,26771,26757,26764,26769,26765,26762,26768,26766,26761,26767,26765,26766,26761,26765,26767,26758,26766,26762,26767,26756,26764,26766,26763,26768,26764,26768,26759,26768,26761,26766,26765,26766,26764,26762,26766,26764,26763,26764,26765,26767,26767,26767,26759,26765,26763,26765,26762,26765,26761,26767,26770,26763,26769,26764,26766,26758,26763,26763,26764,26759,26765,26768,26757,26765,26766,26767,26757,26764,26767,26761,26766,26764,26767,26757,26766,26766,26769,26759,26769,26767,26758,26766,26763,26764,26757,26765,26765,26759,26768,26763,26769,26756,26766,26765,26761,26765,26764,26767,26757,26763,26763,26766,26764,26765,26766,26761,26768,26761,26769,26759,26767,26763,26760,26768,26765,26768,26755,26765,26765,26764,26763,26761,26761,26756,26764,26762,26758,26762,26761,26763,26755,26761,26761,26758,26763,26759,26758,26755,26764,26761,26759,26756,26763,26763,26761,26762,26759,26759,26757,26757,26759,26767,26760,26759,26765,26758,26761,26755,26763,26759,26758,26763,26760,26762,26759,26762,26758,26759,26760,26758,26760,26759,26764,26754,26760,26763,26757,26759,26760,26767,26756,26757,26763,26764,26759,26761,26764,26755,26761,26763,26760,26755,26766,26765,26756,26759,26762,26763,26755,26761,26765,26758,26758,26760,26764,26757,26759,26766,26759,26763,26759,26767,26753,26757,26762,26759,26759,26756,26765,26753,26759,26760,26761,26760,26754,26767,26757,26759,26758,26763,26761,26761,26761,26758,26757,26756,26765,26761,26759,26759,26757,26757,26762,26761,26763,26758,26758,26758,26759,26759,26766,26762,26759,26763,26757,26758,26759,26765,26765,26759,26763,26757,26757,26757,26763,26758,26756,26764,26758,26759,26761,26764,26763,26759,26765,26757,26761,26756,26766,26761,26759,26763,26757,26760,26758,26767,26759,26758,26766,26751,26759,26757,26764,26760,26757,26767,26757,26759,26763,26763,26759,26755,26765,26754,26761,26758,26764,26759,26762,26767,26755,26758,26759,26762,26762,26757,26768,26756,26758,26761,26763,26762,26757,26767,26757,26756,26767,26759,26757,26761,26765,26756,26759,26761,26759,26762,26762,26764,26757,26759,26766,26762,26758,26763,26763,26753,26758,26767,26758,26758,26764,26761,26756,26763,26762,26757,26759,26760,26763,26753,26763,26764,26755,26761,26762,26763,26756,26762,26763,26759,26765,26758,26764,26757,26759,26765,26751,26765,26758,26760,26761,26759,26762,26758,26759,26761,26757,26763,26759,26762,26758,26761,26763,26755,26763,26756,26758,26757,26760,26763,26755,26764,26763,26763,26757,26762,26766,26754,4600,4602,4599,4593,4594,4592,4590,4588,4587,4590,4589,4590,4588,4589,4587,4588,4589,4589,4590,4589,10547,11367,11919,12590,13286,13853,14241,14500,14686,14810,14910,14987,15048,15083,15126,15154,15177,15206,15211,15233,15239,15246,15255,15252,15258,15255,15262,15259,15246,15245,15139,15128,15108,15104,15090,15086,15074,15069,15062,15056,14914,14894,14875,14865,14859,14837,14831,14823,14812,14798,14623,14605,14581,14563,14549,14542,14532,14523,14512,14507,14937,14969,14981,14990,14984,14981,14979,14968,14961,14951,14945,14935,14924,14923,14909,14898,14890,14879,14873,14870,14851,14846,14841,14823,14819,14818,14800,14794,14795,14780,8343,7363,7017,6834,6704,6594,6518,6454,6404,6351,6314,6287,6257,6228,6199,6182,6157,6138,6117,6107,5471,5318,5285,5270,5248,5239,5237,5219,5216,5215,5199,5201,5201,5191,5189,5193,5183,5185,5182,5185,5177,5174,5177,5167,5169,5173,5162,5167,5166,5161,5161,5163,5157,5158,5161,5155,5154,5159,5147,5150,5154,5146,5149,5154,5142,5143,5150,5142,5142,5147,5138,5137,5142,5137,5137,5143,5137,5134,5133,5131,5135,5125,5127,5134,5125,5126,5127,5125,5124,5118,5117,5123,5110,5113,5119,5113,5111,5112,5109,5113,5104,5107,5107,5106,5105,5105,5104,5108,5097,5102,5102,5098,5104,5094,5098,5098,5095,5097,5093,5094,5090,5092,5100,5093,5091,5083,5091,5093,5090,5087,5082,5085,5090,5082,5088,5078,5083,5087,5084,5087,5082,5080,5074,5080,5080,5077,5082,5079,5081,5072,5075,5071,5073,5078,5075,5077,5073,5073,5071,5071,5071,5070,5077,5069,5074,5071,5073,5066,5070,5064,1860,620,592,586,581,582,581,577,579,577,274,299,297,300,300,297,300,298,297,300,5983,683,625,613,613,614,611,612,612,612,160,238,235,236,236,235,236,236,235,240,22734,9248,9035,9010,9003,9002,8985,8987,8989,8978,30310,8485,8144,8111,8098,8083,8080,8073,8075,8076,12507,9285,9239,9234,9229,9229,9230,9229,9228,9228,13264,10133,10076,10067,10069,10065,10063,10066,10060,10060,7819,8654,8672,8675,8671,8671,8674,8667,8671,8675,2128,2425,2431,2430,2431,2429,2434,2429,2432,2432,4155,4800,4805,4806,4806,4805,4806,4804,4805,4805,591,657,660,658,658,662,658,659,660,657,62432,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,57158,65535,65535,65535,65535,65535,65535,65535,65535,65535,56081,65535,65535,65535,65535,65535,65535,65535,65535,65535,33582,37122,37159,37164,37165,37163,37171,37163,37161,37170,5647,6462,6474,6467,6472,6475,6471,6471,6476,6469,24218,29798,29849,29851,29847,29831,29832,29831,29815,29815,4040,4980,4996,5001,4994,4998,5001,4999,4999,5004,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535]}]],\"app_os\":\"linux\",\"app_name\":\"PhotosynQ\",\"app_version\":\"0.3.4\",\"app_device\":\"x86-64\",\"location\":[\"42.7225897\",\"-84.4747067\"],\"ConsoleMacro\":\"207\"}","md5hash":"643705b2aa3112f2245855267b23791f","created_at":"2016-08-17T20:38:43.939Z","updated_at":"2018-01-25T21:14:53.119Z","is_deleted":false,"creator":{"name":"PhotosynQ Admin","id":2403,"email":"admin@photosynq.org","bio":"This a PhotosynQ staff account. ","institute":"PhotosynQ","profile_url":"https://photosynq.org/users/photosynq-admin","contributions":0,"projects":11,"collaborations":5,"avatar":{"original":"https://photosynqprod.s3.amazonaws.com/uploads/user/avatar/2403/Screen_Shot_2017-05-31_at_12.23.10_PM.png","thumb":"https://photosynqprod.s3.amazonaws.com/uploads/user/avatar/2403/thumb_Screen_Shot_2017-05-31_at_12.23.10_PM.png","medium":"https://photosynqprod.s3.amazonaws.com/uploads/user/avatar/2403/medium_Screen_Shot_2017-05-31_at_12.23.10_PM.png"},"latest_activity":"2018-01-30T13:51:59.067Z","badges":[{"name":"","url":""}]}},"creator":{"name":"PhotosynQ Admin","id":2403,"email":"admin@photosynq.org","bio":"This a PhotosynQ staff account. ","institute":"PhotosynQ","profile_url":"https://photosynq.org/users/photosynq-admin","contributions":0,"projects":11,"collaborations":5,"avatar":{"original":"https://photosynqprod.s3.amazonaws.com/uploads/user/avatar/2403/Screen_Shot_2017-05-31_at_12.23.10_PM.png","thumb":"https://photosynqprod.s3.amazonaws.com/uploads/user/avatar/2403/thumb_Screen_Shot_2017-05-31_at_12.23.10_PM.png","medium":"https://photosynqprod.s3.amazonaws.com/uploads/user/avatar/2403/medium_Screen_Shot_2017-05-31_at_12.23.10_PM.png"},"latest_activity":"2018-01-30T13:51:59.067Z","badges":[{"name":"","url":""}]}}],"creator":{"name":"Sean ","id":1220,"email":"reedsea1@msu.edu","bio":"","institute":"Michigan State","profile_url":"https://photosynq.org/users/sean-reed","contributions":17525,"projects":144,"collaborations":95,"avatar":{"original":"https://photosynq.org/users/sean-reed/default_avatar.png","thumb":"https://photosynq.org/users/sean-reed/default_avatar.png","medium":"https://photosynq.org/users/sean-reed/default_avatar.png"},"latest_activity":"2018-04-24T17:45:30.823Z","badges":[{"name":"","url":""}]},"description":"","directions_to_collaborators":null,"radius":"","project_url":"https://photosynq.org/projects/this-is-working-spad-tree","locations":[{"address":"East Lansing, US","latitude":42.7369792,"longitude":-84.4838654}],"filters":[{"id":11344,"created_at":"2016-05-16T16:47:24.902Z","updated_at":"2016-05-16T16:49:36.498Z","value_type":1,"sequence":"0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35,36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44","is_deleted":false,"value":["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45"],"label":"Tree"},{"id":11345,"created_at":"2016-05-16T16:49:36.680Z","updated_at":"2016-05-16T16:50:41.961Z","value_type":1,"sequence":"0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1","is_deleted":false,"value":["Exposed","Shade"],"label":"Leaf"},{"id":11346,"created_at":"2016-05-16T16:50:42.205Z","updated_at":"2016-05-16T16:51:46.930Z","value_type":1,"sequence":"0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3","is_deleted":false,"value":["Cherry","Peach","Apple","Pear"],"label":"Species"},{"id":11418,"created_at":"2016-05-23T16:54:55.768Z","updated_at":"2016-05-23T16:54:55.768Z","value_type":2,"sequence":"","is_deleted":false,"value":[],"label":"Minolta SPAD"}],"is_contributed":false}}
